name: Nightly

# Timed-trigger
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '*/30 0 * * *'  

env:
  buildDir: '${{ github.workspace }}/build'

jobs:
  # Check if there was a commit in 24hours
  build_check:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"

  # Windows-builds
  build_win:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-Win
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          # x86 builds
          - name: diablo-x86
            packages: 'sdl2:x86-windows sdl2-mixer:x86-windows sdl2-ttf:x86-windows libsodium:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501'
            artifact: 'diablo-nightly-x86.zip'
          - name: hellfire-x86
            packages: 'sdl2:x86-windows sdl2-mixer:x86-windows sdl2-ttf:x86-windows libsodium:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501 -D HELLFIRE=ON'
            artifact: 'hellfire-nightly-x86.zip'
          - name: hellone-x86
            packages: 'sdl2:x86-windows sdl2-ttf:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501 -D HELLFIRE=ON -D MPQONE="hellone.mpq" -D HAS_JOYSTICK=0 -D HAS_DPAD=0 -D HAS_GAMECTRL=0 -D HAS_TOUCHPAD=0 -D NONET=ON -D NOSOUND=ON -D SCREEN_WIDTH=640 -D SCREEN_HEIGHT=480 -D NOWIDESCREEN=ON'
            artifact: 'hellone-nightly-x86.zip'
          - name: hellsrv-x86
            packages: 'sdl2:x86-windows sdl2-mixer:x86-windows sdl2-ttf:x86-windows libsodium:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501 -D NOHOSTING=OFF -D HOSTONLY=ON -D HELLFIRE=ON -D HAS_JOYSTICK=0 -D HAS_DPAD=0 -D HAS_GAMECTRL=0 -D HAS_TOUCHPAD=0 -D NOSOUND=ON -D SCREEN_WIDTH=640 -D SCREEN_HEIGHT=480 -D NOWIDESCREEN=ON'
            artifact: 'hellsrv-nightly-x86.zip'
          # x64 builds
          - name: diablo
            packages: 'sdl2:x64-windows sdl2-mixer:x64-windows sdl2-ttf:x64-windows libsodium:x64-windows'
            cmakeargs: ''
            artifact: 'diablo-nightly-x64.zip'
          - name: hellfire
            packages: 'sdl2:x64-windows sdl2-mixer:x64-windows sdl2-ttf:x64-windows libsodium:x64-windows'
            cmakeargs: '-D HELLFIRE=ON'
            artifact: 'hellfire-nightly-x64.zip'
          - name: hellone
            packages: 'sdl2:x64-windows sdl2-mixer:x64-windows sdl2-ttf:x64-windows libsodium:x64-windows'
            cmakeargs: '-D HELLFIRE=ON -D MPQONE="hellone.mpq"'
            artifact: 'hellone-nightly-x64.zip'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
    - name: Create Build Environment
      uses: lukka/run-vcpkg@v6
      with:
        setupOnly: true
        vcpkgGitCommitId: '30124253eecff36bc90f73341edbfb4f845e2a1e'
    # Now that vcpkg is installed, it is being used to run with the desired arguments.
    - name: Install Required Packages
      run: |
        vcpkg install ${{ matrix.packages }}
      #  Start-Process -Wait -NoNewWindow -FilePath "$env:VCPKG_ROOT\vcpkg" -ArgumentList "install ${{ matrix.packages }}"
      #  $VCPKG_ROOT/vcpkg install ${{ matrix.packages }}
      #shell: bash

    - name: Configure CMake
      shell: bash
      working-directory: ${{ env.buildDir }}
      run: cmake .. ${{ matrix.cmakeargs }} -D BINARY_RELEASE="ON" -D CMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake

    - name: Build
      working-directory: ${{ env.buildDir }}
      shell: bash
    # Execute the build (-j 2 : with two cores).
      run: cmake --build . -j 2 --target package --config Release

    # Upload the created artifact
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.buildDir }}/devilutionx.zip
        name: ${{ matrix.artifact }}
  # Mac-builds
  build_mac:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-Mac
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          - name: diablo
            cmakeargs: ''
            artifact: 'diablo-nightly-mac.dmg'
          - name: hellfire
            cmakeargs: '-D HELLFIRE=ON'
            artifact: 'hellfire-nightly-mac.dmg'
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Create Build Environment
      run: brew bundle install

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake .. ${{ matrix.cmakeargs }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build (-j 2 : with two cores).
      run: cmake --build . -j 2 --target package

    # Upload the created artifact
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.buildDir }}/devilutionx.dmg
        name: ${{ matrix.artifact }}
  # Android-builds
  build_android:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-Android
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          - name: diablo
            cmakeargs: ''
            artifact: 'diablo-nightly-android.apk'
          - name: hellfire
            cmakeargs: '-DHELLFIRE=ON'
            artifact: 'hellfire-nightly-android.apk'
    runs-on: ubuntu-latest
    steps:
    - name: Install gettext
      run: sudo apt update && sudo apt install -y gettext

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle

    # CMake version 3.21.3 causes gradle to throw a NullPointerException during the build
    # Removing it will cause gradle to fall back on 3.18.1 installed by the Android SDK
    - name: Create Build Environment
      run: rm /usr/local/bin/cmake

    - name: Cache CMake build folder
      uses: actions/cache@v2
      with:
        path: android-project/app/.cxx
        key: android-cmake-${{ github.sha }}
        restore-keys: android-cmake-

    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      run: cd android-project && ./gradlew assembleRelease -Pcmakeargs="${{ matrix.cmakeargs }}"

    - name: Upload-Package
      uses: actions/upload-artifact@v2
      with:
        #name: devilutionx-debug.apk
        #path: android-project/app/build/outputs/apk/debug/app-debug.apk
        name: ${{ matrix.artifact }}
        path: android-project/app/build/outputs/apk/release/app-release-unsigned.apk

  build_rg350:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-RG350
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          - name: diablo
            cmakeargs: ''
            artifact: 'diablo-nightly-rg350.opk'
          - name: hellfire
            cmakeargs: '-DHELLFIRE=ON'
            artifact: 'hellfire-nightly-rg350.opk'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Create Build Environment
      run: >
        sudo apt update &&
        sudo apt install -y curl cmake git squashfs-tools &&
        curl -L http://od.abstraction.se/opendingux/toolchain/opendingux-gcw0-toolchain.2021-03-10.tar.xz -o gcw0-toolchain.tar.xz &&
        sudo mkdir -p /opt/gcw0-toolchain && sudo chown -R "${USER}:" /opt/gcw0-toolchain &&
        tar -C /opt -xf gcw0-toolchain.tar.xz
    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      run: Packaging/OpenDingux/build.sh rg350
      env:
        TOOLCHAIN: /opt/gcw0-toolchain

    - name: Upload-Package
      uses: actions/upload-artifact@v2
      with:
        #name: devilutionx-rg350.opk.zip
        name: ${{ matrix.artifact }}
        path: build-rg350/devilutionx-rg350.opk

  build_lepus:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-Lepus
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          - name: diablo
            cmakeargs: ''
            artifact: 'diablo-nightly-lepus.opk'
          - name: hellfire
            cmakeargs: '-DHELLFIRE=ON'
            artifact: 'hellfire-nightly-lepus.opk'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Create Build Environment
      run: >
        sudo apt update &&
        sudo apt install -y curl cmake git squashfs-tools &&
        curl -L http://od.abstraction.se/opendingux/toolchain/opendingux-lepus-toolchain.2021-03-11.tar.xz -o lepus-toolchain.tar.xz &&
        sudo mkdir -p /opt/lepus-toolchain && sudo chown -R "${USER}:" /opt/lepus-toolchain &&
        tar -C /opt -xf lepus-toolchain.tar.xz
    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      run: Packaging/OpenDingux/build.sh lepus
      env:
        TOOLCHAIN: /opt/lepus-toolchain

    - name: Upload-Package
      uses: actions/upload-artifact@v2
      with:
        #name: devilutionx-lepus.opk.zip
        name: ${{ matrix.artifact }}
        path: build-lepus/devilutionx-lepus.opk

  build_retrofw:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-RetroFW
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          - name: diablo
            cmakeargs: ''
            artifact: 'diablo-nightly-retrofw.opk'
          - name: hellfire
            cmakeargs: '-DHELLFIRE=ON'
            artifact: 'hellfire-nightly-retrofw.opk'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

     #sudo apt install -y curl git smpq &&
     #curl -L https://github.com/retrofw/buildroot/releases/download/2018.02.11/mipsel-linux-uclibc_x64.tar.gz -o retrofw-toolchain.tar.xz &&
     #sudo mkdir -p /opt/mipsel-linux-uclibc && sudo chown -R "${USER}:" /opt/mipsel-linux-uclibc &&
     #tar -C /opt -xvf retrofw-toolchain.tar.xz
    - name: Create Build Environment
      run: >
        sudo apt update &&
        sudo apt install -y curl cmake git squashfs-tools gettext &&
        curl -L https://github.com/Poligraf/retrofw_buildroot_gcc11/releases/download/2.3.2/host.tar.gz -o retrofw-toolchain.tar.gz &&
        sudo mkdir -p /opt/retrofw-toolchain && sudo chown -R "${USER}:" /opt/retrofw-toolchain &&
        tar -C /opt/retrofw-toolchain --strip-components=1 -xf retrofw-toolchain.tar.gz &&
        cd /opt/retrofw-toolchain && ./relocate-sdk.sh
    #TOOLCHAIN: /opt/mipsel-linux-uclibc
    - name: Build
      working-directory: ${{github.workspace}}
      shell: bash
      run: Packaging/OpenDingux/build.sh retrofw
      env:
        TOOLCHAIN: /opt/retrofw-toolchain

    - name: Upload-Package
      uses: actions/upload-artifact@v2
      with:
        #name: devilutionx-retrofw.opk.zip
        name: ${{ matrix.artifact }}
        path: build-retrofw/devilutionx-retrofw.opk

  # Releases
  release:
    needs: [build_check, build_win, build_mac, build_android, build_rg350, build_lepus, build_retrofw]
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    runs-on: windows-latest
    steps:
    # x86 builds
    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/diablo-nightly-x86.zip

    - name: Download a hellfire artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellfire-nightly-x86.zip

    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: hellone-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellone-nightly-x86.zip

    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: hellsrv-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellsrv-nightly-x86.zip

    # x64 builds
    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-x64.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/diablo-nightly-x64.zip

    - name: Download a hellfire artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-x64.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellfire-nightly-x64.zip

    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: hellone-nightly-x64.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellone-nightly-x64.zip

    - name: Download a diablo mac-artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-mac.dmg
    - run: mv ${{github.workspace}}/devilutionx.dmg ${{github.workspace}}/diablo-nightly-mac.dmg

    - name: Download a hellfire mac-artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-mac.dmg
    - run: mv ${{github.workspace}}/devilutionx.dmg ${{github.workspace}}/hellfire-nightly-mac.dmg

    # android builds
    - name: Download a diablo android artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-android.apk
    - run: mv ${{github.workspace}}/app-release-unsigned.apk ${{github.workspace}}/diablo-nightly-android.apk

    - name: Download a hellfire android artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-android.apk
    - run: mv ${{github.workspace}}/app-release-unsigned.apk ${{github.workspace}}/hellfire-nightly-android.apk

    # rg350 builds
    - name: Download a diablo rg350 artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-rg350.opk
    - run: mv ${{github.workspace}}/devilutionx-rg350.opk ${{github.workspace}}/diablo-nightly-rg350.opk

    - name: Download a hellfire rg350 artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-rg350.opk
    - run: mv ${{github.workspace}}/devilutionx-rg350.opk ${{github.workspace}}/hellfire-nightly-rg350.opk

    # lepus builds
    - name: Download a diablo lepus artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-lepus.opk
    - run: mv ${{github.workspace}}/devilutionx-lepus.opk ${{github.workspace}}/diablo-nightly-lepus.opk

    - name: Download a hellfire lepus artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-lepus.opk
    - run: mv ${{github.workspace}}/devilutionx-lepus.opk ${{github.workspace}}/hellfire-nightly-lepus.opk

    # retrofw builds
    - name: Download a diablo retrofw artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-retrofw.opk
    - run: mv ${{github.workspace}}/devilutionx-retrofw.opk ${{github.workspace}}/diablo-nightly-retrofw.opk

    - name: Download a hellfire retrofw artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-retrofw.opk
    - run: mv ${{github.workspace}}/devilutionx-retrofw.opk ${{github.workspace}}/hellfire-nightly-retrofw.opk

    # release notes
    - name: Create release notes
      run: |
        echo 'Latest nightly builds'         > RELEASE_NOTE.md
        echo ''                             >> RELEASE_NOTE.md
        echo 'For the list of changes see [changelog](docs/CHANGELOG.md#DevilX).' >> RELEASE_NOTE.md
        echo ''                             >> RELEASE_NOTE.md
        echo '### **Diablo**'               >> RELEASE_NOTE.md
        echo '_Filename_ | _Description_'   >> RELEASE_NOTE.md
        echo '------------ | -------------' >> RELEASE_NOTE.md
        echo '[diablo-nightly-android.apk](../../releases/download/devilx-nightly/diablo-nightly-android.apk)   | Diablo package for `Android`' >> RELEASE_NOTE.md
        echo '[diablo-nightly-lepus.opk](../../releases/download/devilx-nightly/diablo-nightly-lepus.opk)   | Diablo package for `Lepus`'       >> RELEASE_NOTE.md
        echo '[diablo-nightly-retrofw.opk](../../releases/download/devilx-nightly/diablo-nightly-retrofw.opk)   | Diablo package for `RetroFW`' >> RELEASE_NOTE.md
        echo '[diablo-nightly-rg350.opk](../../releases/download/devilx-nightly/diablo-nightly-rg350.opk)   | Diablo package for `RG350`'       >> RELEASE_NOTE.md
        echo '[diablo-nightly-mac.dmg](../../releases/download/devilx-nightly/diablo-nightly-mac.dmg)   | Diablo package for `Mac`'             >> RELEASE_NOTE.md
        echo '[diablo-nightly-x64.zip](../../releases/download/devilx-nightly/diablo-nightly-x64.zip)   | Diablo build for `Windows x64`'       >> RELEASE_NOTE.md
        echo '[diablo-nightly-x86.zip](../../releases/download/devilx-nightly/diablo-nightly-x86.zip)   | Diablo build for `Windows x86`'       >> RELEASE_NOTE.md
        echo ''                             >> RELEASE_NOTE.md
        echo '### **Diablo: Hellfire**'     >> RELEASE_NOTE.md
        echo '_Filename_ | _Description_'   >> RELEASE_NOTE.md
        echo '------------ | -------------' >> RELEASE_NOTE.md
        echo '[hellfire-nightly-android.apk](../../releases/download/devilx-nightly/hellfire-nightly-android.apk)   | Hellfire package for `Android`' >> RELEASE_NOTE.md
        echo '[hellfire-nightly-lepus.opk](../../releases/download/devilx-nightly/hellfire-nightly-lepus.opk)   | Hellfire package for `Lepus`'       >> RELEASE_NOTE.md
        echo '[hellfire-nightly-retrofw.opk](../../releases/download/devilx-nightly/hellfire-nightly-retrofw.opk)   | Hellfire package for `RetroFW`' >> RELEASE_NOTE.md
        echo '[hellfire-nightly-rg350.opk](../../releases/download/devilx-nightly/hellfire-nightly-rg350.opk)   | Hellfire package for `RG350`'       >> RELEASE_NOTE.md
        echo '[hellfire-nightly-mac.dmg](../../releases/download/devilx-nightly/hellfire-nightly-mac.dmg) | Hellfire package for `Mac`'               >> RELEASE_NOTE.md
        echo '[hellfire-nightly-x64.zip](../../releases/download/devilx-nightly/hellfire-nightly-x64.zip) | Hellfire build for `Windows x64`'         >> RELEASE_NOTE.md
        echo '[hellfire-nightly-x86.zip](../../releases/download/devilx-nightly/hellfire-nightly-x86.zip) | Hellfire build for `Windows x86`'         >> RELEASE_NOTE.md
        echo '[hellone-nightly-x64.zip](../../releases/download/devilx-nightly/hellone-nightly-x64.zip) | Hellfire build for `Windows x64`<br>- merges the mpq files on the first run (takes a few minutes)'                                                                   >> RELEASE_NOTE.md
        echo '[hellone-nightly-x86.zip](../../releases/download/devilx-nightly/hellone-nightly-x86.zip) | Minimal Hellfire build for `Windows x86`<br>- no internet, controller, sound or widescreen support<br>- merges the mpq files on the first run (takes a few minutes)' >> RELEASE_NOTE.md
        echo '[hellsrv-nightly-x86.zip](../../releases/download/devilx-nightly/hellsrv-nightly-x86.zip) | Minimal Hellfire server for `Windows x86`<br>- no controller, sound or widescreen support<br>- only server functionality'                                            >> RELEASE_NOTE.md

    #- name: Show content of workspace
    #  run: find $RUNNER_WORKSPACE
    #  shell: bash

    - uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true
        tag_name: devilx-nightly
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: devilx-nightly
        body_path: ${{ github.workspace }}/RELEASE_NOTE.md
        draft: false
        prerelease: true
        files: |
          ${{github.workspace}}/diablo-nightly-android.apk
          ${{github.workspace}}/diablo-nightly-lepus.opk
          ${{github.workspace}}/diablo-nightly-retrofw.opk
          ${{github.workspace}}/diablo-nightly-rg350.opk
          ${{github.workspace}}/diablo-nightly-mac.dmg
          ${{github.workspace}}/diablo-nightly-x64.zip
          ${{github.workspace}}/diablo-nightly-x86.zip
          ${{github.workspace}}/hellfire-nightly-android.apk
          ${{github.workspace}}/hellfire-nightly-lepus.opk
          ${{github.workspace}}/hellfire-nightly-retrofw.opk
          ${{github.workspace}}/hellfire-nightly-rg350.opk
          ${{github.workspace}}/hellfire-nightly-mac.dmg
          ${{github.workspace}}/hellfire-nightly-x64.zip
          ${{github.workspace}}/hellfire-nightly-x86.zip
          ${{github.workspace}}/hellone-nightly-x64.zip
          ${{github.workspace}}/hellone-nightly-x86.zip
          ${{github.workspace}}/hellsrv-nightly-x86.zip
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
