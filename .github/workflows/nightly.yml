name: Nightly

# Timed-trigger
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '*/30 0 * * *'  

env:
  buildDir: '${{ github.workspace }}/build'

jobs:
  # Check if there was a commit in 24hours
  build0:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"

  # Windows-builds
  build1:
    needs: build0
    if: ${{ needs.build0.outputs.should_run != 'false' }}
    name: Nightly-Win
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          # x86 builds
          - name: diablo-x86
            packages: 'sdl2:x86-windows sdl2-mixer:x86-windows sdl2-ttf:x86-windows libsodium:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501'
            artifact: 'diablo-nightly-x86.zip'
          - name: hellfire-x86
            packages: 'sdl2:x86-windows sdl2-mixer:x86-windows sdl2-ttf:x86-windows libsodium:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501 -D HELLFIRE=ON'
            artifact: 'hellfire-nightly-x86.zip'
          - name: hellone-x86
            packages: 'sdl2:x86-windows sdl2-ttf:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501 -D HELLFIRE=ON -D MPQONE="hellone.mpq" -D HAS_JOYSTICK=0 -D HAS_DPAD=0 -D HAS_GAMECTRL=0 -D HAS_TOUCHPAD=0 -D NONET=ON -D NOSOUND=ON -D SCREEN_WIDTH=640 -D SCREEN_HEIGHT=480 -D NOWIDESCREEN=ON'
            artifact: 'hellone-nightly-x86.zip'
          - name: hellsrv-x86
            packages: 'sdl2:x86-windows sdl2-mixer:x86-windows sdl2-ttf:x86-windows libsodium:x86-windows'
            cmakeargs: '-A Win32 -D_WIN32_WINNT=0x0501 -D NOHOSTING=OFF -D HOSTONLY=ON -D HELLFIRE=ON -D HAS_JOYSTICK=0 -D HAS_DPAD=0 -D HAS_GAMECTRL=0 -D HAS_TOUCHPAD=0 -D NOSOUND=ON -D SCREEN_WIDTH=640 -D SCREEN_HEIGHT=480 -D NOWIDESCREEN=ON'
            artifact: 'hellsrv-nightly-x86.zip'
          # x64 builds
          - name: diablo
            packages: 'sdl2:x64-windows sdl2-mixer:x64-windows sdl2-ttf:x64-windows libsodium:x64-windows'
            cmakeargs: ''
            artifact: 'diablo-nightly-x64.zip'
          - name: hellfire
            packages: 'sdl2:x64-windows sdl2-mixer:x64-windows sdl2-ttf:x64-windows libsodium:x64-windows'
            cmakeargs: '-D HELLFIRE=ON'
            artifact: 'hellfire-nightly-x64.zip'
          - name: hellone
            packages: 'sdl2:x64-windows sdl2-mixer:x64-windows sdl2-ttf:x64-windows libsodium:x64-windows'
            cmakeargs: '-D HELLFIRE=ON -D MPQONE="hellone.mpq"'
            artifact: 'hellone-nightly-x64.zip'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
    - name: Create Build Environment
      uses: lukka/run-vcpkg@v6
      with:
        setupOnly: true
        vcpkgGitCommitId: '30124253eecff36bc90f73341edbfb4f845e2a1e'
    # Now that vcpkg is installed, it is being used to run with the desired arguments.
    - name: Install Required Packages
      run: |
        vcpkg install ${{ matrix.packages }}
      #  Start-Process -Wait -NoNewWindow -FilePath "$env:VCPKG_ROOT\vcpkg" -ArgumentList "install ${{ matrix.packages }}"
      #  $VCPKG_ROOT/vcpkg install ${{ matrix.packages }}
      #shell: bash

    - name: Configure CMake
      shell: bash
      working-directory: ${{ env.buildDir }}
      run: cmake .. ${{ matrix.cmakeargs }} -D BINARY_RELEASE="ON" -D CMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake

    - name: Build
      working-directory: ${{ env.buildDir }}
      shell: bash
    # Execute the build (-j 2 : with two cores).
      run: cmake --build . -j 2 --target package --config Release

    # Upload the created artifact
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.buildDir }}/devilutionx.zip
        name: ${{ matrix.artifact }}
  # Mac-builds
  build2:
    needs: build0
    if: ${{ needs.build0.outputs.should_run != 'false' }}
    name: Nightly-Mac
    strategy:
      fail-fast: false
      matrix:
        name: [diablo, hellfire]
        include:
          - name: diablo
            cmakeargs: ''
            artifact: 'diablo-nightly-mac.dmg'
          - name: hellfire
            cmakeargs: '-D HELLFIRE=ON'
            artifact: 'hellfire-nightly-mac.dmg'
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Create Build Environment
      run: brew bundle install

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake .. ${{ matrix.cmakeargs }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build (-j 2 : with two cores).
      run: cmake --build . -j 2 --target package

    # Upload the created artifact
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.buildDir }}/devilutionx.dmg
        name: ${{ matrix.artifact }}
  # Releases
  release:
    needs: [build0, build1, build2]
    if: ${{ needs.build0.outputs.should_run != 'false' }}
    runs-on: windows-latest
    steps:
    # x86 builds
    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/diablo-nightly-x86.zip

    - name: Download a hellfire artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellfire-nightly-x86.zip

    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: hellone-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellone-nightly-x86.zip

    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: hellsrv-nightly-x86.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellsrv-nightly-x86.zip

    # x64 builds
    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-x64.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/diablo-nightly-x64.zip

    - name: Download a hellfire artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-x64.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellfire-nightly-x64.zip

    - name: Download a diablo artifact
      uses: actions/download-artifact@v2
      with:
        name: hellone-nightly-x64.zip
    - run: mv ${{github.workspace}}/devilutionx.zip ${{github.workspace}}/hellone-nightly-x64.zip

    - name: Download a diablo mac-artifact
      uses: actions/download-artifact@v2
      with:
        name: diablo-nightly-mac.dmg
    - run: mv ${{github.workspace}}/devilutionx.dmg ${{github.workspace}}/diablo-nightly-mac.dmg

    - name: Download a hellfire mac-artifact
      uses: actions/download-artifact@v2
      with:
        name: hellfire-nightly-mac.dmg
    - run: mv ${{github.workspace}}/devilutionx.dmg ${{github.workspace}}/hellfire-nightly-mac.dmg

    #- name: Show content of workspace
    #  run: find $RUNNER_WORKSPACE
    #  shell: bash

    - uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true
        tag_name: devilx-nightly
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: devilx-nightly
        body: Latest nightly builds
          
          
          
          Filename | Description
          
          ------------ | -------------
          
          [diablo-nightly-mac.dmg](../../releases/download/devilx-nightly/diablo-nightly-mac.dmg)   | Diablo package for Mac
          
          [diablo-nightly-x64.zip](../../releases/download/devilx-nightly/diablo-nightly-x64.zip)   | Diablo build for Windows x64
          
          [diablo-nightly-x86.zip](../../releases/download/devilx-nightly/diablo-nightly-x86.zip)   | Diablo build for Windows x86
          
          [hellfire-nightly-mac.dmg](../../releases/download/devilx-nightly/hellfire-nightly-mac.dmg) | Hellfire package for Mac
          
          [hellfire-nightly-x64.zip](../../releases/download/devilx-nightly/hellfire-nightly-x64.zip) | Hellfire build for Windows x64
          
          [hellfire-nightly-x86.zip](../../releases/download/devilx-nightly/hellfire-nightly-x86.zip) | Hellfire build for Windows x86
          
          [hellone-nightly-x64.zip](../../releases/download/devilx-nightly/hellone-nightly-x64.zip) | Hellfire build for Windows x64<br>- merges the mpq files on the first run (takes a few minutes)
          
          [hellone-nightly-x86.zip](../../releases/download/devilx-nightly/hellone-nightly-x86.zip) | Minimal Hellfire build for Windows x86<br>- no internet, controller, sound or widescreen support<br>- merges the mpq files on the first run (takes a few minutes)
          
          [hellsrv-nightly-x86.zip](../../releases/download/devilx-nightly/hellsrv-nightly-x86.zip) | Minimal Hellfire server for Windows x86<br>- no controller, sound or widescreen support<br>- only server functionality
        draft: false
        prerelease: true
        files: |
          ${{github.workspace}}/diablo-nightly-mac.dmg
          ${{github.workspace}}/diablo-nightly-x64.zip
          ${{github.workspace}}/diablo-nightly-x86.zip
          ${{github.workspace}}/hellfire-nightly-mac.dmg
          ${{github.workspace}}/hellfire-nightly-x64.zip
          ${{github.workspace}}/hellfire-nightly-x86.zip
          ${{github.workspace}}/hellone-nightly-x64.zip
          ${{github.workspace}}/hellone-nightly-x86.zip
          ${{github.workspace}}/hellsrv-nightly-x86.zip
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
