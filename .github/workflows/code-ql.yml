name: Weekly Code Scanning

#on: [push, pull_request]
on:
  schedule:
    - cron: "0 0 1 * *" # First day of the months

# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
jobs:
  analyze:
    name: Analyze (${{ matrix.name }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || (matrix.version == 'mac-x64' && 'macos-12') || 'ubuntu-22.04' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      #packages: read

      # only required for workflows in private repositories
      #actions: read
      #contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        #- name: c-cpp (auto)
        #  language: c-cpp
        #  build-mode: autobuild
        #- name: c-cpp (win-x86)
        #  language: c-cpp
        #  build-mode: manual
        #  version: win-x86
        #  cmakeargs: '-DDEVILUTIONX_SYSTEM_LIBSODIUM=OFF -DDEVILUTIONX_SYSTEM_SDL2=OFF -DHELLFIRE=ON -DCMAKE_TOOLCHAIN_FILE=../CMake/mingwcc.toolchain.cmake'
        - name: c-cpp (win-x64)
          language: c-cpp
          build-mode: manual
          version: win-x64
          cmakeargs: '-DDEVILUTIONX_SYSTEM_LIBSODIUM=OFF -DDEVILUTIONX_SYSTEM_SDL2=OFF -DHELLFIRE=ON -DCMAKE_TOOLCHAIN_FILE=../CMake/mingwcc64.toolchain.cmake'
        #- name: c-cpp (linux-x64)
        #  language: c-cpp
        #  build-mode: manual
        #  version: linux-x64
        #  cmakeargs: '-DDEVILUTIONX_SYSTEM_LIBSODIUM=OFF -DDEVILUTIONX_SYSTEM_SDL2=OFF -DHELLFIRE=ON -DCMAKE_INSTALL_PREFIX=/usr'
        #- name: c-cpp (mac-x64)
        #  language: c-cpp
        #  build-mode: manual
        #  version: mac-x64
        #  cmakeargs: '-DDEVILUTIONX_SYSTEM_LIBSODIUM=OFF -DDEVILUTIONX_SYSTEM_SDL2=OFF -DHELLFIRE=ON -DMACOSX_STANDALONE_APP_BUNDLE=ON'
        - name: java
          language: java-kotlin
          build-mode: none # This mode only analyzes Java. Set this to 'autobuild' or 'manual' to analyze Kotlin too.
        - name: python
          language: python
          build-mode: none
        #- language: ruby
        #  build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        #debug: true
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - name: Create Build Environment
      if: matrix.version == 'win-x86'
      run: >
        sudo apt-get update &&
        sudo apt install -y cmake gcc-mingw-w64-i686 g++-mingw-w64-i686 pkg-config-mingw-w64-i686 libz-mingw-w64-dev gettext dpkg-dev wget git sudo &&
        sudo rm /usr/i686-w64-mingw32/lib/libz.dll.a &&
        sudo Packaging/windows/mingw-prep.sh

    - name: Create Build Environment
      if: matrix.version == 'win-x64'
      run: >
        sudo apt-get update &&
        sudo apt-get install -y cmake gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 pkg-config-mingw-w64-x86-64 libz-mingw-w64-dev dpkg-dev wget git sudo &&
        sudo rm /usr/x86_64-w64-mingw32/lib/libz.dll.a &&
        sudo Packaging/windows/mingw-prep.sh

    - name: Create Build Environment
      if: matrix.version == 'linux-x64'
      run: Packaging/nix/debian-host-prep.sh

    - name: Create Build Environment
      if: matrix.version == 'mac-x64'
      run: brew bundle install

    # TODO: -j $(nproc) vs. -j $(sysctl -n hw.physicalcpu)
    - name: Build
      if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        cmake -S. -Bbuild ${{ matrix.cmakeargs }} -DCMAKE_BUILD_TYPE="Release" && \
        cmake --build build --target package

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}${{matrix.version}}"

