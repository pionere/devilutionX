/**
 * @file enums.h
 *
 * Various global enumerators.
 */

DEVILUTION_BEGIN_NAMESPACE

typedef enum item_quality {
	ITEM_QUALITY_NORMAL = 0,
	ITEM_QUALITY_MAGIC  = 1,
	ITEM_QUALITY_UNIQUE = 2,
} item_quality;

typedef enum unique_base_item {
	UITYPE_NONE        = 0x0,
	UITYPE_SHORTBOW    = 0x1,
	UITYPE_LONGBOW     = 0x2,
	UITYPE_HUNTBOW     = 0x3,
	UITYPE_COMPBOW     = 0x4,
	UITYPE_WARBOW      = 0x5,
	UITYPE_BATTLEBOW   = 0x6,
	UITYPE_DAGGER      = 0x7,
	UITYPE_FALCHION    = 0x8,
	UITYPE_CLAYMORE    = 0x9,
	UITYPE_BROADSWR    = 0xA,
	UITYPE_SABRE       = 0xB,
	UITYPE_SCIMITAR    = 0xC,
	UITYPE_LONGSWR     = 0xD,
	UITYPE_BASTARDSWR  = 0xE,
	UITYPE_TWOHANDSWR  = 0xF,
	UITYPE_GREATSWR    = 0x10,
	UITYPE_CLEAVER     = 0x11,
	UITYPE_LARGEAXE    = 0x12,
	UITYPE_BROADAXE    = 0x13,
	UITYPE_SMALLAXE    = 0x14,
	UITYPE_BATTLEAXE   = 0x15,
	UITYPE_GREATAXE    = 0x16,
	UITYPE_MACE        = 0x17,
	UITYPE_MORNSTAR    = 0x18,
	UITYPE_SPIKCLUB    = 0x19,
	UITYPE_MAUL        = 0x1A,
	UITYPE_WARHAMMER   = 0x1B,
	UITYPE_FLAIL       = 0x1C,
	UITYPE_LONGSTAFF   = 0x1D,
	UITYPE_SHORTSTAFF  = 0x1E,
	UITYPE_COMPSTAFF   = 0x1F,
	UITYPE_QUARSTAFF   = 0x20,
	UITYPE_WARSTAFF    = 0x21,
	UITYPE_SKULLCAP    = 0x22,
	UITYPE_HELM        = 0x23,
	UITYPE_GREATHELM   = 0x24,
	UITYPE_CROWN       = 0x25,
	UITYPE_38          = 0x26,
	UITYPE_RAGS        = 0x27,
	UITYPE_STUDARMOR   = 0x28,
	UITYPE_CLOAK       = 0x29,
	UITYPE_ROBE        = 0x2A,
	UITYPE_CHAINMAIL   = 0x2B,
	UITYPE_LEATHARMOR  = 0x2C,
	UITYPE_BREASTPLATE = 0x2D,
	UITYPE_CAPE        = 0x2E,
	UITYPE_PLATEMAIL   = 0x2F,
	UITYPE_FULLPLATE   = 0x30,
	UITYPE_BUCKLER     = 0x31,
	UITYPE_SMALLSHIELD = 0x32,
	UITYPE_LARGESHIELD = 0x33,
	UITYPE_KITESHIELD  = 0x34,
	UITYPE_GOTHSHIELD  = 0x35,
	UITYPE_RING        = 0x36,
	UITYPE_55          = 0x37,
	UITYPE_AMULET      = 0x38,
	UITYPE_SKCROWN     = 0x39,
	UITYPE_INFRARING   = 0x3A,
	UITYPE_OPTAMULET   = 0x3B,
	UITYPE_TRING       = 0x3C,
	UITYPE_HARCREST    = 0x3D,
	UITYPE_MAPOFDOOM   = 0x3E,
	UITYPE_ELIXIR      = 0x3F,
	UITYPE_ARMOFVAL    = 0x40,
	UITYPE_STEELVEIL   = 0x41,
	UITYPE_GRISWOLD    = 0x42,
	UITYPE_LGTFORGE    = 0x43,
	UITYPE_LAZSTAFF    = 0x44,
	UITYPE_BOVINE      = 0x45,
} unique_base_item;

typedef enum item_effect_type {
	IPL_TOHIT ,
	IPL_DAMP,
	IPL_TOHIT_DAMP,
	IPL_ACP,
	IPL_FIRERES,
	IPL_LIGHTRES,
	IPL_MAGICRES,
	IPL_ACIDRES,
	IPL_ALLRES,
	IPL_SPLCOST,		/* only used in beta */
	IPL_SPLDUR,			/* only used in beta */
	IPL_SPLLVLADD,
	IPL_CHARGES,
	IPL_FIREDAM,
	IPL_LIGHTDAM,
	IPL_MAGICDAM, // unused
	IPL_ACIDDAM,  // unused
	IPL_STR,
	IPL_MAG,
	IPL_DEX,
	IPL_VIT,
	IPL_ATTRIBS,
	IPL_GETHIT,
	IPL_LIFE,
	IPL_MANA,
	IPL_DUR,
	IPL_DUR_CURSE,
	IPL_INDESTRUCTIBLE,
	IPL_LIGHT,
	IPL_MULT_ARROWS,	/* only used in hellfire */
	IPL_INVCURS,
	IPL_THORNS,
	IPL_NOMANA,
	IPL_KNOCKBACK,
	IPL_NOHEALMON,		/* unused */
	IPL_STEALMANA,
	IPL_STEALLIFE,
	IPL_TARGAC,
	IPL_FASTATTACK,
	IPL_FASTRECOVER,
	IPL_FASTBLOCK,
	IPL_DAMMOD,
	IPL_SETDAM,
	IPL_SETDUR,
	IPL_NOMINSTR,
	IPL_SPELL,
	IPL_ONEHAND,
	IPL_ALLRESZERO,
	IPL_DRAINLIFE,
	IPL_INFRAVISION,	/* unused */
	IPL_SETAC,
	IPL_AC,
	IPL_CRYSTALLINE,
	IPL_MANATOLIFE,     /* only used in hellfire */
	IPL_LIFETOMANA,     /* only used in hellfire */
	IPL_FASTCAST,
	IPL_FASTWALK,
	IPL_INVALID          = 0xFF,
} item_effect_type;

typedef enum affix_item_type {
	PLT_MISC   = 1 << 1,
	PLT_BOW    = 1 << 2,
	PLT_STAFF  = 1 << 3,
	PLT_MELEE  = 1 << 4,
	PLT_SHLD   = 1 << 5,
	PLT_ARMO   = 1 << 6,
	PLT_CHRG   = 1 << 7,
	PLT_LARMOR = 1 << 8,
	PLT_MARMOR = 1 << 9,
	PLT_HARMOR = 1 << 10,
} affix_item_type;

/// Item graphic IDs; frame_num-11 of objcurs.cel.
typedef enum item_cursor_graphic {
	ICURS_POTION_OF_FULL_MANA         = 0,
	ICURS_SCROLL_OF                   = 1,
	ICURS_GOLD_SMALL                  = 4,
	ICURS_GOLD_MEDIUM                 = 5,
	ICURS_GOLD_LARGE                  = 6,
	ICURS_RING_BLEEDER                = 8,
	ICURS_RING_BRAMBLE                = 9,
	ICURS_RING_OF_TRUTH               = 10,
	ICURS_RING_REGHA                  = 11,
	ICURS_RING                        = 12,
	ICURS_RING_OF_ENGAGEMENT          = 13,
	ICURS_RING_CONSTRICTING           = 14,
	ICURS_SPECTRAL_ELIXIR             = 15,
	ICURS_OIL_OF_CHANCE               = 16,
	ICURS_GOLDEN_ELIXIR               = 17,
	ICURS_EMPYREAN_BAND               = 18,
	ICURS_EAR_SORCERER                = 19,
	ICURS_EAR_WARRIOR                 = 20,
	ICURS_EAR_ROGUE                   = 21,
	ICURS_BLOOD_STONE                 = 25,
	ICURS_OIL_OF_DEXTERITY            = 29,
	ICURS_OIL_OF_STRENGTH             = 30,
	ICURS_OIL_OF_CLEANSING            = 31,
	ICURS_POTION_OF_HEALING           = 32,
	ICURS_POTION_OF_FULL_REJUVENATION = 33,
	ICURS_OIL_OF_VITALITY             = 34,
	ICURS_POTION_OF_FULL_HEALING      = 35,
	ICURS_OIL_OF_DAM_ATTR             = 36,
	ICURS_POTION_OF_REJUVENATION      = 37,
	ICURS_OIL_OF_MAGIC                = 38,
	ICURS_POTION_OF_MANA              = 39,
	ICURS_BRAIN                       = 40,
	ICURS_OPTIC_AMULET                = 44,
	ICURS_AMULET                      = 45,
	ICURS_WIZARDSPIKE                 = 50,
	ICURS_DAGGER                      = 51,
	ICURS_BLACK_RAZOR                 = 53,
	ICURS_GONNAGAL_DIRK               = 54,
	ICURS_KATAR                       = 55,
	ICURS_BLADE                       = 56,
	ICURS_BASTARD_SWORD               = 57,
	ICURS_EXECUTIONER_BLADE           = 58,
	ICURS_MACE                        = 59,
	ICURS_LONG_SWORD                  = 60,
	ICURS_BROAD_SWORD                 = 61,
	ICURS_FALCHION                    = 62,
	ICURS_MORNING_STAR                = 63,
	ICURS_SHORT_SWORD                 = 64,
	ICURS_CLAYMORE                    = 65,
	ICURS_CLUB                        = 66,
	ICURS_SABRE                       = 67,
	ICURS_FALCON_GRYPHON              = 68,
	ICURS_SPIKED_CLUB                 = 70,
	ICURS_SCIMITAR                    = 72,
	ICURS_FULL_HELM                   = 75,
	ICURS_MAGIC_ROCK                  = 76,
	ICURS_HELM_OF_SPIRITS             = 77,
	ICURS_THE_UNDEAD_CROWN            = 78,
	ICURS_ROYAL_CIRCLET               = 79,
	ICURS_FOOL_CREST                  = 80,
	ICURS_HARLEQUIN_CREST             = 81,
	ICURS_HELM                        = 82,
	ICURS_BUCKLER                     = 83,
	ICURS_VEIL_OF_STEEL               = 85,
	ICURS_BOOK_GREY                   = 86,
	ICURS_BOOK_RED                    = 87,
	ICURS_BOOK_BLUE                   = 88,
	ICURS_BLACK_MUSHROOM              = 89,
	ICURS_SKULL_CAP                   = 90,
	ICURS_CAP                         = 91,
	ICURS_FLESH_OF_SOULS              = 92,
	ICURS_THINKING_CAP                = 93,
	ICURS_CROWN                       = 95,
	ICURS_MAP_OF_THE_STARS            = 96,
	ICURS_FUNGAL_TOME                 = 97,
	ICURS_GREAT_HELM                  = 98,
	ICURS_OVERLORD_HELM               = 99,
	ICURS_STORMSHIELD                 = 100,
	ICURS_BATTLE_AXE                  = 101,
	ICURS_HUNTERS_BOW                 = 102,
	ICURS_FIELD_PLATE                 = 103,
	ICURS_STONECLEAVER                = 104,
	ICURS_SMALL_SHIELD                = 105,
	ICURS_CLEAVER                     = 106,
	ICURS_STUDDED_LEATHER_ARMOR       = 107,
	ICURS_BATTLE_BOW                  = 108,
	ICURS_SHORT_STAFF                 = 109,
	ICURS_TWO_HANDED_SWORD            = 110,
	ICURS_CHAIN_MAIL                  = 111,
	ICURS_SMALL_AXE                   = 112,
	ICURS_KITE_SHIELD                 = 113,
	ICURS_SCALE_MAIL                  = 114,
	ICURS_SKULL_SHIELD                = 116,
	ICURS_DRAGON_SHIELD               = 117,
	ICURS_SHORT_BOW                   = 118,
	ICURS_LONG_WAR_BOW                = 119,
	//ICURS_CELESTIAL_BOW               = 120,
	ICURS_WAR_HAMMER                  = 121,
	ICURS_MAUL                        = 122,
	ICURS_LONG_STAFF                  = 123,
	ICURS_WAR_STAFF                   = 124,
	ICURS_TAVERN_SIGN                 = 126,
	ICURS_HARD_LEATHER_ARMOR          = 127,
	ICURS_RAGS                        = 128,
	ICURS_QUILTED_ARMOR               = 129,
	ICURS_FLAIL                       = 131,
	ICURS_TOWER_SHIELD                = 132,
	ICURS_COMPOSITE_BOW               = 133,
	ICURS_GREAT_SWORD                 = 134,
	ICURS_LEATHER_ARMOR               = 135,
	ICURS_SPLINT_MAIL                 = 136,
	ICURS_ROBE                        = 137,
	ICURS_UCLOAK                      = 138,
	ICURS_TRELLISED_ARMOR             = 139,
	ICURS_ANVIL_OF_FURY               = 140,
	ICURS_BROAD_AXE                   = 141,
	ICURS_LARGE_AXE                   = 142,
	ICURS_GREAT_AXE                   = 143,
	ICURS_AXE                         = 144,
	ICURS_HOLY_DEFENDER               = 146,
	ICURS_LARGE_SHIELD                = 147,
	ICURS_GOTHIC_SHIELD               = 148,
	ICURS_CLOAK                       = 149,
	ICURS_CAPE                        = 150,
	ICURS_FULL_PLATE_MAIL             = 151,
	ICURS_GOTHIC_PLATE                = 152,
	ICURS_BREAST_PLATE                = 153,
	ICURS_RING_MAIL                   = 154,
	ICURS_STAFF_OF_LAZARUS            = 155,
	ICURS_ARKAINES_VALOR              = 157,
	ICURS_THE_NEEDLER                 = 158,
	ICURS_NAJ_PLATE                   = 159,
	ICURS_THE_GRIZZLY                 = 160,
	ICURS_THE_GRANDFATHER             = 161,
	ICURS_THE_PROTECTOR               = 162,
	ICURS_MESSERSCHMIDT               = 163,
	ICURS_WINDFORCE                   = 164,
	ICURS_SHORT_WAR_BOW               = 165,
	ICURS_COMPOSITE_STAFF             = 166,
	ICURS_SHORT_BATTLE_BOW            = 167,
#ifdef HELLFIRE
	ICURS_RING_XORINE                 = 168,
	ICURS_AMULET_WARDING              = 170,
	ICURS_RING_KARIK                  = 173,
	ICURS_RING_MERCURIAL              = 176,
	ICURS_RING_THUNDER                = 177,
	ICURS_RING_GIANTS                 = 179,
	ICURS_AURIC_AMULET                = 180,
	ICURS_RING_MYSTICS                = 181,
	ICURS_AMULET_ACOLYTE              = 183,
	ICURS_RING_MAGMA                  = 184,
	ICURS_RING_GLADIATOR              = 186,
	ICURS_RUNE_BOMB                   = 187,
	ICURS_THEODORE                    = 188,
	ICURS_TORN_NOTE_1                 = 189,
	ICURS_TORN_NOTE_2                 = 190,
	ICURS_TORN_NOTE_3                 = 191,
	ICURS_RECONSTRUCTED_NOTE          = 192,
	ICURS_RUNE_OF_FIRE                = 193,
	ICURS_RUNE_OF_WAVE                = 194,
	ICURS_RUNE_OF_LIGHTNING           = 195,
	ICURS_RUNE_OF_NOVA                = 196,
	ICURS_RUNE_OF_STONE               = 197,
	ICURS_GREY_SUIT                   = 198,
	ICURS_BROWN_SUIT                  = 199,
	ICURS_SOUL_EATER                  = 200,
	ICURS_GLOOMARMOR                  = 203,
	ICURS_BONEARMOR                   = 204,
	ICURS_THUNDERCLAP                 = 205,
	ICURS_DIAMONDEDGE                 = 206,
	ICURS_FLAMBEAU                    = 209,
	ICURS_GNAT_STING                  = 210,
	ICURS_BLITZEN                     = 219,
	ICURS_DEMONARMOR                  = 225,
	ICURS_BOVINE                      = 226,
#endif
	NUM_ICURS
} item_cursor_graphic;

typedef enum _sfx_id {
	PS_WALK1,
	PS_WALK2,
	PS_WALK3,
	PS_WALK4,
	PS_BFIRE,
	PS_FMAG,
	PS_TMAG,
	PS_LGHIT,
	PS_LGHIT1,
	PS_SWING,
	PS_SWING2,
	PS_DEAD,
	IS_STING1,
	IS_FBALLBOW,
	IS_QUESTDN,
	IS_ARMRFKD,
	IS_BARLFIRE,
	IS_BARREL,
	IS_POPPOP8,
	IS_POPPOP5,
	IS_POPPOP3,
	IS_POPPOP2,
	IS_BHIT,
	IS_BHIT1,
	IS_CHEST,
	IS_DOORCLOS,
	IS_DOOROPEN,
	IS_FANVL,
	IS_FAXE,
	IS_FBLST,
	IS_FBODY,
	IS_FBOOK,
	IS_FBOW,
	IS_FCAP,
	IS_FHARM,
	IS_FLARM,
	IS_FMAG,
	IS_FMAG1,
	IS_FMUSH,
	IS_FPOT,
	IS_FRING,
	IS_FROCK,
	IS_FSCRL,
	IS_FSHLD,
	IS_FSIGN,
	IS_FSTAF,
	IS_FSWOR,
	IS_GOLD,
	IS_HLMTFKD,
	IS_IANVL,
	IS_IAXE,
	IS_IBLST,
	IS_IBODY,
	IS_IBOOK,
	IS_IBOW,
	IS_ICAP,
	IS_IGRAB,
	IS_IHARM,
	IS_ILARM,
	IS_IMUSH,
	IS_IPOT,
	IS_IRING,
	IS_IROCK,
	IS_ISCROL,
	IS_ISHIEL,
	IS_ISIGN,
	IS_ISTAF,
	IS_ISWORD,
	IS_LEVER,
	IS_MAGIC,
	IS_MAGIC1,
	IS_RBOOK,
	IS_SARC,
	IS_SHLDFKD,
	IS_SWRDFKD,
	IS_TITLEMOV,
	IS_TITLSLCT,
	SFX_SILENCE,
	IS_TRAP,
	IS_CAST1,
	IS_CAST10,
	IS_CAST12,
	IS_CAST2,
	IS_CAST3,
	IS_CAST4,
	IS_CAST5,
	IS_CAST6,
	IS_CAST7,
	IS_CAST8,
	IS_CAST9,
	LS_HEALING,
	IS_REPAIR,
	LS_ACID,
	LS_ACIDS,
	LS_APOC,
	LS_ARROWALL,
	LS_BLODBOIL,
	LS_BLODSTAR,
	LS_BLSIMPT,
	LS_BONESP,
	LS_BSIMPCT,
	LS_CALDRON,
	LS_CBOLT,
	LS_CHLTNING,
	LS_DSERP,
	LS_ELECIMP1,
	LS_ELEMENTL,
	LS_ETHEREAL,
	LS_FBALL,
	LS_FBOLT1,
	LS_FBOLT2,
	LS_FIRIMP1,
	LS_FIRIMP2,
	LS_FLAMWAVE,
	LS_FLASH,
	LS_FOUNTAIN,
	LS_GOLUM,
	LS_GOLUMDED,
	LS_GSHRINE,
	LS_GUARD,
	LS_GUARDLAN,
	LS_HOLYBOLT,
	LS_HYPER,
	LS_INFRAVIS,
	LS_INVISIBL,
	LS_INVPOT,
	LS_LNING1,
	LS_LTNING,
	LS_MSHIELD,
	LS_NESTXPLD,
	LS_NOVA,
	LS_PORTAL,
	LS_PUDDLE,
	LS_RESUR,
	LS_SCURSE,
	LS_SCURIMP,
	LS_SENTINEL,
	LS_SHATTER,
	LS_SOULFIRE,
	LS_SPOUTLOP,
	LS_SPOUTSTR,
	LS_STORM,
	LS_TRAPDIS,
	LS_TELEPORT,
	LS_VTHEFT,
	LS_WALLLOOP,
	LS_WALLSTRT,
	LS_LMAG,
	TSFX_BMAID1,
	TSFX_BMAID2,
	TSFX_BMAID3,
	TSFX_BMAID4,
	TSFX_BMAID5,
	TSFX_BMAID6,
	TSFX_BMAID7,
	TSFX_BMAID8,
	TSFX_BMAID9,
	TSFX_BMAID10,
	TSFX_BMAID11,
	TSFX_BMAID12,
	TSFX_BMAID13,
	TSFX_BMAID14,
	TSFX_BMAID15,
	TSFX_BMAID16,
	TSFX_BMAID17,
	TSFX_BMAID18,
	TSFX_BMAID19,
	TSFX_BMAID20,
	TSFX_BMAID21,
	TSFX_BMAID22,
	TSFX_BMAID23,
	TSFX_BMAID24,
	TSFX_BMAID25,
	TSFX_BMAID26,
	TSFX_BMAID27,
	TSFX_BMAID28,
	TSFX_BMAID29,
	TSFX_BMAID30,
	TSFX_BMAID31,
	TSFX_BMAID32,
	TSFX_BMAID33,
	TSFX_BMAID34,
	TSFX_BMAID35,
	TSFX_BMAID36,
	TSFX_BMAID37,
	TSFX_BMAID38,
	TSFX_BMAID39,
	TSFX_BMAID40,
	TSFX_SMITH1,
	TSFX_SMITH2,
	TSFX_SMITH3,
	TSFX_SMITH4,
	TSFX_SMITH5,
	TSFX_SMITH6,
	TSFX_SMITH7,
	TSFX_SMITH8,
	TSFX_SMITH9,
	TSFX_SMITH10,
	TSFX_SMITH11,
	TSFX_SMITH12,
	TSFX_SMITH13,
	TSFX_SMITH14,
	TSFX_SMITH15,
	TSFX_SMITH16,
	TSFX_SMITH17,
	TSFX_SMITH18,
	TSFX_SMITH19,
	TSFX_SMITH20,
	TSFX_SMITH21,
	TSFX_SMITH22,
	TSFX_SMITH23,
	TSFX_SMITH24,
	TSFX_SMITH25,
	TSFX_SMITH26,
	TSFX_SMITH27,
	TSFX_SMITH28,
	TSFX_SMITH29,
	TSFX_SMITH30,
	TSFX_SMITH31,
	TSFX_SMITH32,
	TSFX_SMITH33,
	TSFX_SMITH34,
	TSFX_SMITH35,
	TSFX_SMITH36,
	TSFX_SMITH37,
	TSFX_SMITH38,
	TSFX_SMITH39,
	TSFX_SMITH40,
	TSFX_SMITH41,
	TSFX_SMITH42,
	TSFX_SMITH43,
	TSFX_SMITH44,
	TSFX_SMITH45,
	TSFX_SMITH46,
	TSFX_SMITH47,
	TSFX_SMITH48,
	TSFX_SMITH49,
	TSFX_SMITH50,
	TSFX_SMITH51,
	TSFX_SMITH52,
	TSFX_SMITH53,
	TSFX_SMITH54,
	TSFX_SMITH55,
	TSFX_SMITH56,
	TSFX_COW1,
	TSFX_COW2,
/*
	TSFX_COW3,
	TSFX_COW4,
	TSFX_COW5,
	TSFX_COW6,
*/
	TSFX_COW7,
	TSFX_COW8,
	TSFX_DEADGUY,
	TSFX_DRUNK1,
	TSFX_DRUNK2,
	TSFX_DRUNK3,
	TSFX_DRUNK4,
	TSFX_DRUNK5,
	TSFX_DRUNK6,
	TSFX_DRUNK7,
	TSFX_DRUNK8,
	TSFX_DRUNK9,
	TSFX_DRUNK10,
	TSFX_DRUNK11,
	TSFX_DRUNK12,
	TSFX_DRUNK13,
	TSFX_DRUNK14,
	TSFX_DRUNK15,
	TSFX_DRUNK16,
	TSFX_DRUNK17,
	TSFX_DRUNK18,
	TSFX_DRUNK19,
	TSFX_DRUNK20,
	TSFX_DRUNK21,
	TSFX_DRUNK22,
	TSFX_DRUNK23,
	TSFX_DRUNK24,
	TSFX_DRUNK25,
	TSFX_DRUNK26,
	TSFX_DRUNK27,
	TSFX_DRUNK28,
	TSFX_DRUNK29,
	TSFX_DRUNK30,
	TSFX_DRUNK31,
	TSFX_DRUNK32,
	TSFX_DRUNK33,
	TSFX_DRUNK34,
	TSFX_DRUNK35,
	TSFX_HEALER1,
	TSFX_HEALER2,
	TSFX_HEALER3,
	TSFX_HEALER4,
	TSFX_HEALER5,
	TSFX_HEALER6,
	TSFX_HEALER7,
	TSFX_HEALER8,
	TSFX_HEALER9,
	TSFX_HEALER10,
	TSFX_HEALER11,
	TSFX_HEALER12,
	TSFX_HEALER13,
	TSFX_HEALER14,
	TSFX_HEALER15,
	TSFX_HEALER16,
	TSFX_HEALER17,
	TSFX_HEALER18,
	TSFX_HEALER19,
	TSFX_HEALER20,
	TSFX_HEALER21,
	TSFX_HEALER22,
	TSFX_HEALER23,
	TSFX_HEALER24,
	TSFX_HEALER25,
	TSFX_HEALER26,
	TSFX_HEALER27,
	TSFX_HEALER28,
	TSFX_HEALER29,
	TSFX_HEALER30,
	TSFX_HEALER31,
	TSFX_HEALER32,
	TSFX_HEALER33,
	TSFX_HEALER34,
	TSFX_HEALER35,
	TSFX_HEALER36,
	TSFX_HEALER37,
	TSFX_HEALER38,
	TSFX_HEALER39,
	TSFX_HEALER40,
	TSFX_HEALER41,
	TSFX_HEALER42,
	TSFX_HEALER43,
	TSFX_HEALER44,
	TSFX_HEALER45,
	TSFX_HEALER46,
	TSFX_HEALER47,
	TSFX_PEGBOY1,
	TSFX_PEGBOY2,
	TSFX_PEGBOY3,
	TSFX_PEGBOY4,
	TSFX_PEGBOY5,
	TSFX_PEGBOY6,
	TSFX_PEGBOY7,
	TSFX_PEGBOY8,
	TSFX_PEGBOY9,
	TSFX_PEGBOY10,
	TSFX_PEGBOY11,
	TSFX_PEGBOY12,
	TSFX_PEGBOY13,
	TSFX_PEGBOY14,
	TSFX_PEGBOY15,
	TSFX_PEGBOY16,
	TSFX_PEGBOY17,
	TSFX_PEGBOY18,
	TSFX_PEGBOY19,
	TSFX_PEGBOY20,
	TSFX_PEGBOY21,
	TSFX_PEGBOY22,
	TSFX_PEGBOY23,
	TSFX_PEGBOY24,
	TSFX_PEGBOY25,
	TSFX_PEGBOY26,
	TSFX_PEGBOY27,
	TSFX_PEGBOY28,
	TSFX_PEGBOY29,
	TSFX_PEGBOY30,
	TSFX_PEGBOY31,
	TSFX_PEGBOY32,
	TSFX_PEGBOY33,
	TSFX_PEGBOY34,
	TSFX_PEGBOY35,
	TSFX_PEGBOY36,
	TSFX_PEGBOY37,
	TSFX_PEGBOY38,
	TSFX_PEGBOY39,
	TSFX_PEGBOY40,
	TSFX_PEGBOY41,
	TSFX_PEGBOY42,
	TSFX_PEGBOY43,
	TSFX_PRIEST0,
	TSFX_PRIEST1,
	TSFX_PRIEST2,
	TSFX_PRIEST3,
	TSFX_PRIEST4,
	TSFX_PRIEST5,
	TSFX_PRIEST6,
	TSFX_PRIEST7,
	TSFX_STORY0,
	TSFX_STORY1,
	TSFX_STORY2,
	TSFX_STORY3,
	TSFX_STORY4,
	TSFX_STORY5,
	TSFX_STORY6,
	TSFX_STORY7,
	TSFX_STORY8,
	TSFX_STORY9,
	TSFX_STORY10,
	TSFX_STORY11,
	TSFX_STORY12,
	TSFX_STORY13,
	TSFX_STORY14,
	TSFX_STORY15,
	TSFX_STORY16,
	TSFX_STORY17,
	TSFX_STORY18,
	TSFX_STORY19,
	TSFX_STORY20,
	TSFX_STORY21,
	TSFX_STORY22,
	TSFX_STORY23,
	TSFX_STORY24,
	TSFX_STORY25,
	TSFX_STORY26,
	TSFX_STORY27,
	TSFX_STORY28,
	TSFX_STORY29,
	TSFX_STORY30,
	TSFX_STORY31,
	TSFX_STORY32,
	TSFX_STORY33,
	TSFX_STORY34,
	TSFX_STORY35,
	TSFX_STORY36,
	TSFX_STORY37,
	TSFX_STORY38,
	TSFX_TAVERN0,
	TSFX_TAVERN1,
	TSFX_TAVERN2,
	TSFX_TAVERN3,
	TSFX_TAVERN4,
	TSFX_TAVERN5,
	TSFX_TAVERN6,
	TSFX_TAVERN7,
	TSFX_TAVERN8,
	TSFX_TAVERN9,
	TSFX_TAVERN10,
	TSFX_TAVERN11,
	TSFX_TAVERN12,
	TSFX_TAVERN13,
	TSFX_TAVERN14,
	TSFX_TAVERN15,
	TSFX_TAVERN16,
	TSFX_TAVERN17,
	TSFX_TAVERN18,
	TSFX_TAVERN19,
	TSFX_TAVERN20,
	TSFX_TAVERN21,
	TSFX_TAVERN22,
	TSFX_TAVERN23,
	TSFX_TAVERN24,
	TSFX_TAVERN25,
	TSFX_TAVERN26,
	TSFX_TAVERN27,
	TSFX_TAVERN28,
	TSFX_TAVERN29,
	TSFX_TAVERN30,
	TSFX_TAVERN31,
	TSFX_TAVERN32,
	TSFX_TAVERN33,
	TSFX_TAVERN34,
	TSFX_TAVERN35,
	TSFX_TAVERN36,
	TSFX_TAVERN37,
	TSFX_TAVERN38,
	TSFX_TAVERN39,
	TSFX_TAVERN40,
	TSFX_TAVERN41,
	TSFX_TAVERN42,
	TSFX_TAVERN43,
	TSFX_TAVERN44,
	TSFX_TAVERN45,
	TSFX_WITCH1,
	TSFX_WITCH2,
	TSFX_WITCH3,
	TSFX_WITCH4,
	TSFX_WITCH5,
	TSFX_WITCH6,
	TSFX_WITCH7,
	TSFX_WITCH8,
	TSFX_WITCH9,
	TSFX_WITCH10,
	TSFX_WITCH11,
	TSFX_WITCH12,
	TSFX_WITCH13,
	TSFX_WITCH14,
	TSFX_WITCH15,
	TSFX_WITCH16,
	TSFX_WITCH17,
	TSFX_WITCH18,
	TSFX_WITCH19,
	TSFX_WITCH20,
	TSFX_WITCH21,
	TSFX_WITCH22,
	TSFX_WITCH23,
	TSFX_WITCH24,
	TSFX_WITCH25,
	TSFX_WITCH26,
	TSFX_WITCH27,
	TSFX_WITCH28,
	TSFX_WITCH29,
	TSFX_WITCH30,
	TSFX_WITCH31,
	TSFX_WITCH32,
	TSFX_WITCH33,
	TSFX_WITCH34,
	TSFX_WITCH35,
	TSFX_WITCH36,
	TSFX_WITCH37,
	TSFX_WITCH38,
	TSFX_WITCH39,
	TSFX_WITCH40,
	TSFX_WITCH41,
	TSFX_WITCH42,
	TSFX_WITCH43,
	TSFX_WITCH44,
	TSFX_WITCH45,
	TSFX_WITCH46,
	TSFX_WITCH47,
	TSFX_WITCH48,
	TSFX_WITCH49,
	TSFX_WITCH50,
	TSFX_WOUND,
	PS_MAGE1,
	PS_MAGE2,
	PS_MAGE3,
	PS_MAGE4,
	PS_MAGE5,
	PS_MAGE6,
	PS_MAGE7,
	PS_MAGE8,
	PS_MAGE9,
	PS_MAGE10,
	PS_MAGE11,
	PS_MAGE12,
	PS_MAGE13,
	PS_MAGE14,
	PS_MAGE15,
	PS_MAGE16,
	PS_MAGE17,
	PS_MAGE18,
	PS_MAGE19,
	PS_MAGE20,
	PS_MAGE21,
	PS_MAGE22,
	PS_MAGE23,
	PS_MAGE24,
	PS_MAGE25,
	PS_MAGE26,
	PS_MAGE27,
	PS_MAGE28,
	PS_MAGE29,
	PS_MAGE30,
	PS_MAGE31,
	PS_MAGE32,
	PS_MAGE33,
	PS_MAGE34,
	PS_MAGE35,
	PS_MAGE36,
	PS_MAGE37,
	PS_MAGE38,
	PS_MAGE39,
	PS_MAGE40,
	PS_MAGE41,
	PS_MAGE42,
	PS_MAGE43,
	PS_MAGE44,
	PS_MAGE45,
	PS_MAGE46,
	PS_MAGE47,
	PS_MAGE48,
	PS_MAGE49,
	PS_MAGE50,
	PS_MAGE51,
	PS_MAGE52,
	PS_MAGE53,
	PS_MAGE54,
	PS_MAGE55,
	PS_MAGE56,
	PS_MAGE57,
	PS_MAGE58,
	PS_MAGE59,
	PS_MAGE60,
	PS_MAGE61,
	PS_MAGE62,
	PS_MAGE63,
	PS_MAGE64,
	PS_MAGE65,
	PS_MAGE66,
	PS_MAGE67,
	PS_MAGE68,
	PS_MAGE69,
	PS_MAGE69B,
	PS_MAGE70,
	PS_MAGE71,
	PS_MAGE72,
	PS_MAGE73,
	PS_MAGE74,
	PS_MAGE75,
	PS_MAGE76,
	PS_MAGE77,
	PS_MAGE78,
	PS_MAGE79,
	PS_MAGE80,
	PS_MAGE81,
	PS_MAGE82,
	PS_MAGE83,
	PS_MAGE84,
	PS_MAGE85,
	PS_MAGE86,
	PS_MAGE87,
	PS_MAGE88,
	PS_MAGE89,
	PS_MAGE90,
	PS_MAGE91,
	PS_MAGE92,
	PS_MAGE93,
	PS_MAGE94,
	PS_MAGE95,
	PS_MAGE96,
	PS_MAGE97,
	PS_MAGE98,
	PS_MAGE99,
	PS_MAGE100,
	PS_MAGE101,
	PS_MAGE102,
	PS_ROGUE1,
	PS_ROGUE2,
	PS_ROGUE3,
	PS_ROGUE4,
	PS_ROGUE5,
	PS_ROGUE6,
	PS_ROGUE7,
	PS_ROGUE8,
	PS_ROGUE9,
	PS_ROGUE10,
	PS_ROGUE11,
	PS_ROGUE12,
	PS_ROGUE13,
	PS_ROGUE14,
	PS_ROGUE15,
	PS_ROGUE16,
	PS_ROGUE17,
	PS_ROGUE18,
	PS_ROGUE19,
	PS_ROGUE20,
	PS_ROGUE21,
	PS_ROGUE22,
	PS_ROGUE23,
	PS_ROGUE24,
	PS_ROGUE25,
	PS_ROGUE26,
	PS_ROGUE27,
	PS_ROGUE28,
	PS_ROGUE29,
	PS_ROGUE30,
	PS_ROGUE31,
	PS_ROGUE32,
	PS_ROGUE33,
	PS_ROGUE34,
	PS_ROGUE35,
	PS_ROGUE36,
	PS_ROGUE37,
	PS_ROGUE38,
	PS_ROGUE39,
	PS_ROGUE40,
	PS_ROGUE41,
	PS_ROGUE42,
	PS_ROGUE43,
	PS_ROGUE44,
	PS_ROGUE45,
	PS_ROGUE46,
	PS_ROGUE47,
	PS_ROGUE48,
	PS_ROGUE49,
	PS_ROGUE50,
	PS_ROGUE51,
	PS_ROGUE52,
	PS_ROGUE53,
	PS_ROGUE54,
	PS_ROGUE55,
	PS_ROGUE56,
	PS_ROGUE57,
	PS_ROGUE58,
	PS_ROGUE59,
	PS_ROGUE60,
	PS_ROGUE61,
	PS_ROGUE62,
	PS_ROGUE63,
	PS_ROGUE64,
	PS_ROGUE65,
	PS_ROGUE66,
	PS_ROGUE67,
	PS_ROGUE68,
	PS_ROGUE69,
	PS_ROGUE69B,
	PS_ROGUE70,
	PS_ROGUE71,
	PS_ROGUE72,
	PS_ROGUE73,
	PS_ROGUE74,
	PS_ROGUE75,
	PS_ROGUE76,
	PS_ROGUE77,
	PS_ROGUE78,
	PS_ROGUE79,
	PS_ROGUE80,
	PS_ROGUE81,
	PS_ROGUE82,
	PS_ROGUE83,
	PS_ROGUE84,
	PS_ROGUE85,
	PS_ROGUE86,
	PS_ROGUE87,
	PS_ROGUE88,
	PS_ROGUE89,
	PS_ROGUE90,
	PS_ROGUE91,
	PS_ROGUE92,
	PS_ROGUE93,
	PS_ROGUE94,
	PS_ROGUE95,
	PS_ROGUE96,
	PS_ROGUE97,
	PS_ROGUE98,
	PS_ROGUE99,
	PS_ROGUE100,
	PS_ROGUE101,
	PS_ROGUE102,
	PS_WARR1,
	PS_WARR2,
	PS_WARR3,
	PS_WARR4,
	PS_WARR5,
	PS_WARR6,
	PS_WARR7,
	PS_WARR8,
	PS_WARR9,
	PS_WARR10,
	PS_WARR11,
	PS_WARR12,
	PS_WARR13,
	PS_WARR14,
	PS_WARR14B,
	PS_WARR14C,
	PS_WARR15,
	PS_WARR15B,
	PS_WARR15C,
	PS_WARR16,
	PS_WARR16B,
	PS_WARR16C,
	PS_WARR17,
	PS_WARR18,
	PS_WARR19,
	PS_WARR20,
	PS_WARR21,
	PS_WARR22,
	PS_WARR23,
	PS_WARR24,
	PS_WARR25,
	PS_WARR26,
	PS_WARR27,
	PS_WARR28,
	PS_WARR29,
	PS_WARR30,
	PS_WARR31,
	PS_WARR32,
	PS_WARR33,
	PS_WARR34,
	PS_WARR35,
	PS_WARR36,
	PS_WARR37,
	PS_WARR38,
	PS_WARR39,
	PS_WARR40,
	PS_WARR41,
	PS_WARR42,
	PS_WARR43,
	PS_WARR44,
	PS_WARR45,
	PS_WARR46,
	PS_WARR47,
	PS_WARR48,
	PS_WARR49,
	PS_WARR50,
	PS_WARR51,
	PS_WARR52,
	PS_WARR53,
	PS_WARR54,
	PS_WARR55,
	PS_WARR56,
	PS_WARR57,
	PS_WARR58,
	PS_WARR59,
	PS_WARR60,
	PS_WARR61,
	PS_WARR62,
	PS_WARR63,
	PS_WARR64,
	PS_WARR65,
	PS_WARR66,
	PS_WARR67,
	PS_WARR68,
	PS_WARR69,
	PS_WARR69B,
	PS_WARR70,
	PS_WARR71,
	PS_WARR72,
	PS_WARR73,
	PS_WARR74,
	PS_WARR75,
	PS_WARR76,
	PS_WARR77,
	PS_WARR78,
	PS_WARR79,
	PS_WARR80,
	PS_WARR81,
	PS_WARR82,
	PS_WARR83,
	PS_WARR84,
	PS_WARR85,
	PS_WARR86,
	PS_WARR87,
	PS_WARR88,
	PS_WARR89,
	PS_WARR90,
	PS_WARR91,
	PS_WARR92,
	PS_WARR93,
	PS_WARR94,
	PS_WARR95,
	PS_WARR95B,
	PS_WARR95C,
	PS_WARR95D,
	PS_WARR95E,
	PS_WARR95F,
	PS_WARR96B,
	PS_WARR97,
	PS_WARR98,
	PS_WARR99,
	PS_WARR100,
	PS_WARR101,
	PS_WARR102,
	PS_MONK1,
	PS_MONK2,
	PS_MONK3,
	PS_MONK4,
	PS_MONK5,
	PS_MONK6,
	PS_MONK7,
	PS_MONK8,
	PS_MONK9,
	PS_MONK10,
	PS_MONK11,
	PS_MONK12,
	PS_MONK13,
	PS_MONK14,
	PS_MONK15,
	PS_MONK16,
	PS_MONK17,
	PS_MONK18,
	PS_MONK19,
	PS_MONK20,
	PS_MONK21,
	PS_MONK22,
	PS_MONK23,
	PS_MONK24,
	PS_MONK25,
	PS_MONK26,
	PS_MONK27,
	PS_MONK28,
	PS_MONK29,
	PS_MONK30,
	PS_MONK31,
	PS_MONK32,
	PS_MONK33,
	PS_MONK34,
	PS_MONK35,
	PS_MONK36,
	PS_MONK37,
	PS_MONK38,
	PS_MONK39,
	PS_MONK40,
	PS_MONK41,
	PS_MONK42,
	PS_MONK43,
	PS_MONK44,
	PS_MONK45,
	PS_MONK46,
	PS_MONK47,
	PS_MONK48,
	PS_MONK49,
	PS_MONK50,
	PS_MONK51,
	PS_MONK52,
	PS_MONK53,
	PS_MONK54,
	PS_MONK55,
	PS_MONK56,
	PS_MONK57,
	PS_MONK58,
	PS_MONK59,
	PS_MONK60,
	PS_MONK61,
	PS_MONK62,
	PS_MONK63,
	PS_MONK64,
	PS_MONK65,
	PS_MONK66,
	PS_MONK67,
	PS_MONK68,
	PS_MONK69,
	PS_MONK69B,
	PS_MONK70,
	PS_MONK71,
	PS_MONK72,
	PS_MONK73,
	PS_MONK74,
	PS_MONK75,
	PS_MONK76,
	PS_MONK77,
	PS_MONK78,
	PS_MONK79,
	PS_MONK80,
	PS_MONK81,
	PS_MONK82,
	PS_MONK83,
	PS_MONK84,
	PS_MONK85,
	PS_MONK86,
	PS_MONK87,
	PS_MONK88,
	PS_MONK89,
	PS_MONK90,
	PS_MONK91,
	PS_MONK92,
	PS_MONK93,
	PS_MONK94,
	PS_MONK95,
	PS_MONK96,
	PS_MONK97,
	PS_MONK98,
	PS_MONK99,
	PS_MONK100,
	PS_MONK101,
	PS_MONK102,
	PS_NAR1,
	PS_NAR2,
	PS_NAR3,
	PS_NAR4,
	PS_NAR5,
	PS_NAR6,
	PS_NAR7,
	PS_NAR8,
	PS_NAR9,
	PS_DIABLVLINT,
	USFX_CLEAVER,
	USFX_GARBUD1,
	USFX_GARBUD2,
	USFX_GARBUD3,
	USFX_GARBUD4,
	USFX_IZUAL1,
	USFX_LACH1,
	USFX_LACH2,
	USFX_LACH3,
	USFX_LAZ1,
	USFX_LAZ2,
	USFX_SKING1,
	USFX_SNOT1,
	USFX_SNOT2,
	USFX_SNOT3,
	USFX_WARLRD1,
	USFX_WLOCK1,
	USFX_ZHAR1,
	USFX_ZHAR2,
	USFX_DIABLOD,
	TSFX_FARMER1,
	TSFX_FARMER2,
	TSFX_FARMER2A,
	TSFX_FARMER3,
	TSFX_FARMER4,
	TSFX_FARMER5,
	TSFX_FARMER6,
	TSFX_FARMER7,
	TSFX_FARMER8,
	TSFX_FARMER9,
	TSFX_TEDDYBR1,
	TSFX_TEDDYBR2,
	TSFX_TEDDYBR3,
	TSFX_TEDDYBR4,
	//USFX_DEFILER1,
	//USFX_DEFILER2,
	//USFX_DEFILER3,
	//USFX_DEFILER4,
	USFX_DEFILER8,
	USFX_DEFILER6,
	USFX_DEFILER7,
	USFX_NAKRUL1,
	USFX_NAKRUL2,
	USFX_NAKRUL3,
	USFX_NAKRUL4,
	USFX_NAKRUL5,
	USFX_NAKRUL6,
	PS_NARATR3,
	TSFX_COWSUT1,
	TSFX_COWSUT2,
	TSFX_COWSUT3,
	TSFX_COWSUT4,
	TSFX_COWSUT4A,
	TSFX_COWSUT5,
	TSFX_COWSUT6,
	TSFX_COWSUT7,
	TSFX_COWSUT8,
	TSFX_COWSUT9,
	TSFX_COWSUT10,
	TSFX_COWSUT11,
	TSFX_COWSUT12,
	USFX_SKLJRN1,
	PS_NARATR6,
	PS_NARATR7,
	PS_NARATR8,
	PS_NARATR5,
	PS_NARATR9,
	PS_NARATR4,
	TSFX_TRADER1,
	IS_CROPEN,
	IS_CRCLOS,
	SFX_NONE = -1,
} _sfx_id;

typedef enum sfx_flag {
	sfx_STREAM   = 0x01,
	sfx_MISC     = 0x02,
	sfx_UI       = 0x04,
	sfx_MONK     = 0x08,
	sfx_ROGUE    = 0x10,
	sfx_WARRIOR  = 0x20,
	sfx_SORCERER = 0x40,
	sfx_HELLFIRE = 0x80,
} sfx_flag;

typedef enum sfx_set {
	SFXS_MASK,
	SFXS_PLR_01,
	SFXS_PLR_08,
	SFXS_PLR_09,
	SFXS_PLR_10,
	SFXS_PLR_11,
	SFXS_PLR_12,
	SFXS_PLR_13,
	SFXS_PLR_14,
	SFXS_PLR_16,
	SFXS_PLR_24,
	SFXS_PLR_27,
	SFXS_PLR_29,
	SFXS_PLR_34,
	SFXS_PLR_35,
	SFXS_PLR_46,
	SFXS_PLR_54,
	SFXS_PLR_55,
	SFXS_PLR_56,
	SFXS_PLR_61,
	SFXS_PLR_62,
	SFXS_PLR_68,
	SFXS_PLR_69,
	SFXS_PLR_70,
	SFXS_PLR_71,
	SFXS_PLR_72,
	SFXS_PLR_79,
	SFXS_PLR_80,
	SFXS_PLR_82,
	SFXS_PLR_83,
	SFXS_PLR_87,
	SFXS_PLR_88,
	SFXS_PLR_89,
	SFXS_PLR_91,
	SFXS_PLR_92,
	SFXS_PLR_94,
	SFXS_PLR_95,
	SFXS_PLR_96,
	SFXS_PLR_97,
	SFXS_PLR_98,
	SFXS_PLR_99,
	NUM_SFXSets,
} sfx_set;

typedef enum item_equip_type {
	ILOC_NONE        = 0x0,
	ILOC_ONEHAND     = 0x1,
	ILOC_TWOHAND     = 0x2,
	ILOC_ARMOR       = 0x3,
	ILOC_HELM        = 0x4,
	ILOC_RING        = 0x5,
	ILOC_AMULET      = 0x6,
	ILOC_UNEQUIPABLE = 0x7,
	ILOC_BELT        = 0x8,
} item_equip_type;

typedef enum missile_id {
	MIS_ARROW,
	MIS_PBARROW,
	MIS_ASARROW,
	MIS_ARROWC,
	MIS_PBARROWC,
	MIS_ASARROWC,
	MIS_FIREBOLT,
	MIS_HBOLT,
	MIS_FLARE,
	MIS_SNOWWICH,
	MIS_HLSPWN,
	MIS_SOLBRNR,
	MIS_MAGMABALL,
	MIS_ACID,
	MIS_ACIDPUD,
	MIS_EXACIDP,
	MIS_EXFIRE,
	MIS_EXLGHT,
	MIS_EXMAGIC,
	MIS_EXACID,
	MIS_EXHOLY,
	MIS_EXFLARE,
	MIS_EXSNOWWICH,
	MIS_EXHLSPWN,
	MIS_EXSOLBRNR,
	MIS_GUARDIAN,
	MIS_RNDTELEPORT,
	MIS_LIGHTBALL,
	MIS_FIREBALL,
	MIS_LIGHTNINGC,
	MIS_LIGHTNING,
	MIS_LIGHTNINGC2,
	MIS_LIGHTNING2,
	MIS_TOWN,
	MIS_RPORTAL,
	MIS_FLASH,
	MIS_FLASH2,
	MIS_MANASHIELD,
	MIS_CHAIN,
	//MIS_BLODSTAR,	// TODO: Check beta
	//MIS_BONE,		// TODO: Check beta
	//MIS_METLHIT,	// TODO: Check beta
	MIS_RHINO,
	MIS_TELEPORT,
	//MIS_FARROW,
	//MIS_DOOMSERP,
	MIS_STONE,
	//MIS_INVISIBL,
	MIS_GOLEM,
	//MIS_ETHEREALIZE,
	//MIS_BLODBUR,	// TODO: Check beta
	//MIS_EXAPOCA,
	MIS_FIREWALLC,
	MIS_FIREWALL,
	MIS_INFRA,
	MIS_FIREWAVEC,
	MIS_FIREWAVE,
	MIS_LIGHTNOVAC,
	//MIS_APOCAC,
	MIS_HEAL,
	MIS_HEALOTHER,
	MIS_RESURRECT,
	MIS_TELEKINESIS,
	//MIS_LARROW,
	MIS_ABILITY,
	MIS_IDENTIFY,
	MIS_REPAIR,
	MIS_DISARM,
	MIS_INFERNOC,
	MIS_INFERNO,
	MIS_FIRETRAP,
	MIS_BARRELEX,
	//MIS_FIREMAN,	// TODO: Check beta
	//MIS_KRULL,		// TODO: Check beta
	MIS_CBOLTC,
	MIS_CBOLT,
	MIS_ELEMENTAL,
	MIS_EXELE,
	//MIS_BONESPIRIT,
	MIS_APOCAC2,
	MIS_EXAPOCA2,
	MIS_RAGE,
#ifdef HELLFIRE
	//MIS_LIGHTWALLC,
	//MIS_LIGHTWALL,
	//MIS_FIRENOVAC,
	//MIS_FIREBALL2,
	//MIS_REFLECT,
	MIS_FIRERING,
	//MIS_MANATRAP,
	//MIS_LIGHTRING,
	MIS_RUNEFIRE,
	MIS_RUNELIGHT,
	MIS_RUNENOVA,
	MIS_RUNEWAVE,
	MIS_RUNESTONE,
	MIS_HIVEEXP,
	MIS_HORKDMN,
	MIS_HIVEEXPC,
	MIS_LICH,
	MIS_PSYCHORB,
	MIS_NECROMORB,
	MIS_ARCHLICH,
	MIS_BONEDEMON,
	MIS_EXYEL2,
	MIS_EXRED3,
	MIS_EXBL2,
	MIS_EXBL3,
	MIS_EXORA1,
#endif
	NUM_MISTYPES
} missile_id;

typedef enum missile_graphic_id {
	MFILE_ARROWS,
	MFILE_FIREBA,
	MFILE_GUARD,
	MFILE_LGHNING,
	MFILE_FIREWAL,
	MFILE_MAGBLOS,
	MFILE_PORTAL,
	MFILE_BLUEXFR,
	MFILE_BLUEXBK,
	MFILE_MANASHLD,
	MFILE_BONE,
	MFILE_METLHIT,
	MFILE_FARROW,
	MFILE_LARROW,
	MFILE_MARROW,
	MFILE_PARROW,
	MFILE_MAGICEXP,
	MFILE_GREENEXP,
	MFILE_DOOM,
	MFILE_BLODBUR,
	MFILE_NEWEXP,
	MFILE_SHATTER1,
	MFILE_BIGEXP,
	MFILE_INFERNO,
	MFILE_THINLGHT,
	MFILE_FLARE,
	MFILE_FLAREEXP,
	MFILE_MAGBALL,
	//MFILE_KRULL,
	MFILE_MINILTNG,
	MFILE_HOLY,
	MFILE_HOLYEXPL,
	MFILE_FIRARWEX,
	MFILE_ACIDBF,
	MFILE_ACIDSPLA,
	MFILE_ACIDPUD,
	MFILE_ETHRSHLD,
	MFILE_FIRERUN,
	MFILE_RESSUR1,
	MFILE_SKLBALL,
	MFILE_RPORTAL,
	MFILE_FIREPLAR,
	MFILE_SCUBMISB,
	MFILE_SCBSEXPB,
	MFILE_SCUBMISC,
	MFILE_SCBSEXPC,
	MFILE_SCUBMISD,
	MFILE_SCBSEXPD,
#ifdef HELLFIRE
	MFILE_SPAWNS,
	MFILE_REFLECT,
	MFILE_LICH,
	MFILE_MSBLA,
	MFILE_NECROMORB,
	MFILE_ARCHLICH,
	MFILE_RUNE,
	MFILE_EXYEL2,
	MFILE_EXBL2,
	MFILE_EXRED3,
	MFILE_BONEDEMON,
	MFILE_EXORA1,
	MFILE_EXBL3,
#endif
	NUM_MFILE,
	MFILE_NONE = NUM_MFILE,
} missile_graphic_id;

typedef enum missile_flags {
	MIF_AREA    = 1 << 0,
	MIF_NOBLOCK = 1 << 1,
	MIF_DOT     = 1 << 2,
} missile_flags;

typedef enum missile_anim_flags {
	MAFLAG_HIDDEN         = 1 << 0,
	MAFLAG_LOCK_ANIMATION = 1 << 1,
	MAFLAG_UNUSED = MAFLAG_HIDDEN,
} missile_anim_flags;

typedef enum missile_add_result {
	MIRES_DONE,
	MIRES_DELETE,
	MIRES_FAIL_DELETE,
} missile_add_result;

typedef enum _mai_id {
	AI_ZOMBIE,
	AI_FAT,
	AI_SKELSD,
	AI_SKELBOW,
	AI_SCAV,
	AI_RHINO,
	AI_GOATMC,
	AI_GOATBOW,
	AI_FALLEN,
	AI_MAGMA,
	AI_SKELKING,
	AI_BAT,
	AI_GARG,
	AI_CLEAVER,
	AI_SUCC,
	AI_SNOWWICH,
	AI_HLSPWN,
	AI_SOLBRNR,
	AI_SNEAK,
	AI_STORM,
	//AI_FIREMAN,
	AI_GARBUD,
	AI_ACID,
	AI_ACIDUNIQ,
	AI_GOLUM,
	AI_ZHAR,
	AI_SNOTSPIL,
	AI_SNAKE,
	AI_COUNSLR,
	AI_MEGA,
	AI_DIABLO,
	AI_LAZURUS,
	AI_LAZHELP,
	AI_LACHDAN,
	AI_WARLORD,
#ifdef HELLFIRE
	AI_FIREBAT,
	AI_TORCHANT,
	AI_HORKDMN,
	AI_LICH,
	AI_ARCHLICH,
	AI_PSYCHORB,
	AI_NECROMORB,
	AI_BONEDEMON,
#endif
	AI_STORM2,
} _mai_id;

typedef enum _mc_id {
	MC_UNDEAD = 0,
	MC_DEMON  = 1,
	MC_ANIMAL = 2,
} _mc_id;

typedef enum _monster_id {
	MT_NZOMBIE,
	MT_BZOMBIE,
	MT_GZOMBIE,
	MT_YZOMBIE,
	MT_RFALLSP,
	MT_DFALLSP,
	MT_YFALLSP,
	MT_BFALLSP,
	MT_WSKELAX,
	MT_TSKELAX,
	MT_RSKELAX,
	MT_XSKELAX,
	MT_RFALLSD,
	MT_DFALLSD,
	MT_YFALLSD,
	MT_BFALLSD,
	MT_NSCAV,
	MT_BSCAV,
	MT_WSCAV,
	MT_YSCAV,
	MT_WSKELBW,
	MT_TSKELBW,
	MT_RSKELBW,
	MT_XSKELBW,
	MT_WSKELSD,
	MT_TSKELSD,
	MT_RSKELSD,
	MT_XSKELSD,
	//MT_INVILORD,
	MT_SNEAK,
	MT_STALKER,
	MT_UNSEEN,
	MT_ILLWEAV,
	MT_NGOATMC,
	MT_BGOATMC,
	MT_RGOATMC,
	MT_GGOATMC,
	MT_FIEND,
	MT_BLINK,
	MT_GLOOM,
	MT_FAMILIAR,
	MT_NGOATBW,
	MT_BGOATBW,
	MT_RGOATBW,
	MT_GGOATBW,
	MT_NACID,
	MT_RACID,
	MT_BACID,
	MT_XACID,
	MT_SKING,
	MT_CLEAVER,
	MT_FAT,
	MT_MUDMAN,
	MT_TOAD,
	MT_FLAYED,
	MT_WYRM,
	MT_CAVSLUG,
	MT_DVLWYRM,
	MT_DEVOUR,
	MT_NMAGMA,
	MT_YMAGMA,
	MT_BMAGMA,
	MT_WMAGMA,
	MT_HORNED,
	MT_MUDRUN,
	MT_FROSTC,
	MT_OBLORD,
	//MT_BONEDMN,
	//MT_REDDTH,
	//MT_LTCHDMN,
	//MT_UDEDBLRG,
	//MT_INCIN,
	//MT_FLAMLRD,
	//MT_DOOMFIRE,
	//MT_HELLBURN,
	MT_STORM,
	MT_RSTORM,
	MT_STORML,
	MT_MAEL,
	MT_WINGED,
	MT_GARGOYLE,
	MT_BLOODCLW,
	MT_DEATHW,
	MT_MEGA,
	MT_GUARD,
	MT_VTEXLRD,
	MT_BALROG,
	MT_NSNAKE,
	MT_RSNAKE,
	MT_BSNAKE,
	MT_GSNAKE,
	MT_NBLACK,
	MT_RTBLACK,
	MT_BTBLACK,
	MT_RBLACK,
	//MT_UNRAV,
	//MT_HOLOWONE,
	//MT_PAINMSTR,
	//MT_REALWEAV,
	MT_SUCCUBUS,
	MT_SNOWWICH,
	MT_HLSPWN,
	MT_SOLBRNR,
	MT_COUNSLR,
	MT_MAGISTR,
	MT_CABALIST,
	MT_ADVOCATE,
	MT_GOLEM,
	MT_DIABLO,
	//MT_DARKMAGE,
#ifdef HELLFIRE
	MT_HELLBOAR,
	MT_STINGER,
	MT_PSYCHORB,
	MT_ARACHNON,
	MT_FELLTWIN,
	MT_UNRAV,
	MT_HORKSPWN,
	MT_VENMTAIL,
	MT_NECRMORB,
	MT_SPIDLORD,
	MT_LASHWORM,
	MT_TORCHANT,
	MT_HORKDMN,
	MT_DEFILER,
	MT_LRDSAYTR,
	MT_GRAVEDIG,
	MT_BIGFALL,
	MT_TOMBRAT,
	MT_FIREBAT,
	MT_SKLWING,
	MT_LICH,
	MT_CRYPTDMN,
	MT_HELLBAT,
	MT_BONEDEMN,
	MT_ARCHLICH,
	MT_BICLOPS,
	MT_FLESTHNG,
	MT_REAPER,
	MT_NAKRUL,
#endif
	NUM_MTYPES, /// BUGFIX the count is off by one (fixed)
	MT_INVALID = 0xFF
} _monster_id;

// this enum contains indexes from UniqMonst array for special unique monsters (usually quest related)
typedef enum {
	UMT_GARBUD    = 0,
	UMT_SKELKING  = 1,
	UMT_ZHAR      = 2,
	UMT_SNOTSPIL  = 3,
	UMT_LAZURUS   = 4,
	UMT_RED_VEX   = 5,
	UMT_BLACKJADE = 6,
	UMT_LACHDAN   = 7,
	UMT_WARLORD   = 8,
	UMT_BUTCHER   = 9,
	// hellfire only
	UMT_HORKDMN   = 10,
	UMT_DEFILER   = 11,
	UMT_NAKRUL    = 12,
} _uniq_monsterid;

typedef enum monster_flag {
	MFLAG_HIDDEN          = 0x0001,
	MFLAG_REV_ANIMATION   = 0x0002,
	MFLAG_LOCK_ANIMATION  = 0x0004,
	MFLAG_GARG_STONE      = 0x0008,
	MFLAG_KNOCKBACK       = 0x0010,
	MFLAG_LIFESTEAL       = 0x0020,
	MFLAG_CAN_OPEN_DOOR   = 0x0040,
	MFLAG_SEARCH          = 0x0080,
	MFLAG_TARGETS_MONSTER = 0x0100,
	MFLAG_NO_ENEMY        = 0x0200,
	MFLAG_NOSTONE         = 0x0400,
	MFLAG_NOHEAL          = 0x0800,
} monster_flag;

typedef enum monster_goal {
	MGOAL_NORMAL,
	MGOAL_RETREAT,
	MGOAL_HEALING,
	MGOAL_MOVE,
	MGOAL_ATTACK2,
	MGOAL_INQUIRING,
	MGOAL_TALKING,
} monster_goal;

typedef enum monster_leaderflag {
	MLEADER_NONE    = 0,
	MLEADER_PRESENT = 1,
	MLEADER_AWAY    = 2,
} monster_leaderflag;

typedef enum monster_resistance_type {
	MORT_NONE,
	MORT_PROTECTED,
	MORT_RESIST,
	MORT_IMMUNE,
} monster_resistance_type;

typedef enum monster_resistance_idx {
	MORS_IDX_SLASH     = 0,
	MORS_IDX_BLUNT     = 2,
	MORS_IDX_PUNCTURE  = 4,
	MORS_IDX_FIRE      = 6,
	MORS_IDX_LIGHTNING = 8,
	MORS_IDX_MAGIC     = 10,
	MORS_IDX_ACID      = 12,
} monster_resistance_idx;

typedef enum monster_resistance {
	MORS_SLASH_PROTECTED     = 0x01 << MORS_IDX_SLASH,
	MORS_SLASH_RESIST        = 0x02 << MORS_IDX_SLASH,
	MORS_SLASH_IMMUNE        = 0x03 << MORS_IDX_SLASH,
	MORS_BLUNT_PROTECTED     = 0x01 << MORS_IDX_BLUNT,
	MORS_BLUNT_RESIST        = 0x02 << MORS_IDX_BLUNT,
	MORS_BLUNT_IMMUNE        = 0x03 << MORS_IDX_BLUNT,
	MORS_PUNCTURE_PROTECTED  = 0x01 << MORS_IDX_PUNCTURE,
	MORS_PUNCTURE_RESIST     = 0x02 << MORS_IDX_PUNCTURE,
	MORS_PUNCTURE_IMMUNE     = 0x03 << MORS_IDX_PUNCTURE,
	MORS_FIRE_PROTECTED      = 0x01 << MORS_IDX_FIRE,
	MORS_FIRE_RESIST         = 0x02 << MORS_IDX_FIRE,
	MORS_FIRE_IMMUNE         = 0x03 << MORS_IDX_FIRE,
	MORS_LIGHTNING_PROTECTED = 0x01 << MORS_IDX_LIGHTNING,
	MORS_LIGHTNING_RESIST    = 0x02 << MORS_IDX_LIGHTNING,
	MORS_LIGHTNING_IMMUNE    = 0x03 << MORS_IDX_LIGHTNING,
	MORS_MAGIC_PROTECTED     = 0x01 << MORS_IDX_MAGIC,
	MORS_MAGIC_RESIST        = 0x02 << MORS_IDX_MAGIC,
	MORS_MAGIC_IMMUNE        = 0x03 << MORS_IDX_MAGIC,
	MORS_ACID_PROTECTED      = 0x01 << MORS_IDX_ACID,
	MORS_ACID_RESIST         = 0x02 << MORS_IDX_ACID,
	MORS_ACID_IMMUNE         = 0x03 << MORS_IDX_ACID,
} monster_resistance;

typedef enum missile_resistance {
	MISR_NONE,
	MISR_SLASH,
	MISR_BLUNT,
	MISR_PUNCTURE,
	MISR_FIRE,
	MISR_LIGHTNING,
	MISR_MAGIC,
	MISR_ACID,
} missile_resistance;

typedef enum _speech_id {
	TEXT_KING1,
	TEXT_KING2,
	TEXT_KING3,
	TEXT_KING4,
	TEXT_KING5,
	TEXT_KING6,
	TEXT_KING7,
	TEXT_KING8,
	TEXT_KING9,
	TEXT_KING10,
	TEXT_BANNER1,
	TEXT_BANNER2,
	TEXT_BANNER3,
	TEXT_BANNER4,
	TEXT_BANNER5,
	TEXT_BANNER6,
	TEXT_BANNER7,
	TEXT_BANNER8,
	TEXT_BANNER9,
	TEXT_BANNER10,
	TEXT_BANNER11,
	TEXT_BANNER12,
	TEXT_VILE1,
	TEXT_VILE2,
	TEXT_VILE3,
	TEXT_VILE4,
	TEXT_VILE5,
	TEXT_VILE6,
	TEXT_VILE7,
	TEXT_VILE8,
	TEXT_VILE9,
	TEXT_VILE10,
	TEXT_VILE11,
	TEXT_VILE12,
	TEXT_VILE13,
	TEXT_VILE14,
	TEXT_POISON1,
	TEXT_POISON2,
	TEXT_POISON3,
	TEXT_POISON4,
	TEXT_POISON5,
	TEXT_POISON6,
	TEXT_POISON7,
	TEXT_POISON8,
	TEXT_POISON9,
	TEXT_POISON10,
	TEXT_BONE1,
	TEXT_BONE2,
	TEXT_BONE3,
	TEXT_BONE4,
	TEXT_BONE5,
	TEXT_BONE6,
	TEXT_BONE7,
	TEXT_BONE8,
	TEXT_BUTCH1,
	TEXT_BUTCH2,
	TEXT_BUTCH3,
	TEXT_BUTCH4,
	TEXT_BUTCH5,
	TEXT_BUTCH6,
	TEXT_BUTCH7,
	TEXT_BUTCH8,
	TEXT_BUTCH9,
	TEXT_BUTCH10,
	TEXT_BLIND1,
	TEXT_BLIND2,
	TEXT_BLIND3,
	TEXT_BLIND4,
	TEXT_BLIND5,
	TEXT_BLIND6,
	TEXT_BLIND7,
	TEXT_BLIND8,
	TEXT_VEIL1,
	TEXT_VEIL2,
	TEXT_VEIL3,
	TEXT_VEIL4,
	TEXT_VEIL5,
	TEXT_VEIL6,
	TEXT_VEIL7,
	TEXT_VEIL8,
	TEXT_VEIL9,
	TEXT_VEIL10,
	TEXT_VEIL11,
	TEXT_ANVIL1,
	TEXT_ANVIL2,
	TEXT_ANVIL3,
	TEXT_ANVIL4,
	TEXT_ANVIL5,
	TEXT_ANVIL6,
	TEXT_ANVIL7,
	TEXT_ANVIL8,
	TEXT_ANVIL9,
	TEXT_ANVIL10,
	TEXT_BLOOD1,
	TEXT_BLOOD2,
	TEXT_BLOOD3,
	TEXT_BLOOD4,
	TEXT_BLOOD5,
	TEXT_BLOOD6,
	TEXT_BLOOD7,
	TEXT_BLOOD8,
	TEXT_WARLRD1,
	TEXT_WARLRD2,
	TEXT_WARLRD3,
	TEXT_WARLRD4,
	TEXT_WARLRD5,
	TEXT_WARLRD6,
	TEXT_WARLRD7,
	TEXT_WARLRD8,
	TEXT_WARLRD9,
	TEXT_INFRA1,
	TEXT_INFRA2,
	TEXT_INFRA3,
	TEXT_INFRA4,
	TEXT_INFRA5,
	TEXT_INFRA6,
	TEXT_INFRA7,
	TEXT_INFRA8,
	TEXT_INFRA9,
	TEXT_INFRA10,
	TEXT_MUSH1,
	TEXT_MUSH2,
	TEXT_MUSH3,
	TEXT_MUSH4,
	TEXT_MUSH5,
	TEXT_MUSH6,
	TEXT_MUSH7,
	TEXT_MUSH8,
	TEXT_MUSH9,
	TEXT_MUSH10,
	TEXT_MUSH11,
	TEXT_MUSH12,
	TEXT_MUSH13,
	TEXT_DOOM1,
	TEXT_DOOM2,
	TEXT_DOOM3,
	TEXT_DOOM4,
	TEXT_DOOM5,
	TEXT_DOOM6,
	TEXT_DOOM7,
	TEXT_DOOM8,
	TEXT_DOOM9,
	TEXT_DOOM10,
	TEXT_GARBUD1,
	TEXT_GARBUD2,
	TEXT_GARBUD3,
	TEXT_GARBUD4,
	TEXT_ZHAR1,
	TEXT_ZHAR2,
	TEXT_STORY1,
	TEXT_STORY2,
	TEXT_STORY3,
	TEXT_STORY4,
	TEXT_STORY5,
	TEXT_STORY6,
	TEXT_STORY7,
	TEXT_STORY9,
	TEXT_STORY10,
	TEXT_STORY11,
	TEXT_OGDEN1,
	TEXT_OGDEN2,
	TEXT_OGDEN3,
	TEXT_OGDEN4,
	TEXT_OGDEN5,
	TEXT_OGDEN6,
	TEXT_OGDEN8,
	TEXT_OGDEN9,
	TEXT_OGDEN10,
	TEXT_PEPIN1,
	TEXT_PEPIN2,
	TEXT_PEPIN3,
	TEXT_PEPIN4,
	TEXT_PEPIN5,
	TEXT_PEPIN6,
	TEXT_PEPIN7,
	TEXT_PEPIN9,
	TEXT_PEPIN10,
	TEXT_PEPIN11,
	TEXT_GILLIAN1,
	TEXT_GILLIAN2,
	TEXT_GILLIAN3,
	TEXT_GILLIAN4,
	TEXT_GILLIAN5,
	TEXT_GILLIAN6,
	TEXT_GILLIAN7,
	TEXT_GILLIAN9,
	TEXT_GILLIAN10,
	TEXT_GRISWOLD1,
	TEXT_GRISWOLD2,
	TEXT_GRISWOLD3,
	TEXT_GRISWOLD4,
	TEXT_GRISWOLD5,
	TEXT_GRISWOLD6,
	TEXT_GRISWOLD7,
	TEXT_GRISWOLD8,
	TEXT_GRISWOLD9,
	TEXT_GRISWOLD10,
	TEXT_GRISWOLD12,
	TEXT_GRISWOLD13,
	TEXT_FARNHAM1,
	TEXT_FARNHAM2,
	TEXT_FARNHAM3,
	TEXT_FARNHAM4,
	TEXT_FARNHAM5,
	TEXT_FARNHAM6,
	TEXT_FARNHAM8,
	TEXT_FARNHAM9,
	TEXT_FARNHAM10,
	TEXT_FARNHAM11,
	TEXT_FARNHAM12,
	TEXT_FARNHAM13,
	TEXT_ADRIA1,
	TEXT_ADRIA2,
	TEXT_ADRIA3,
	TEXT_ADRIA4,
	TEXT_ADRIA5,
	TEXT_ADRIA6,
	TEXT_ADRIA7,
	TEXT_ADRIA8,
	TEXT_ADRIA9,
	TEXT_ADRIA10,
	TEXT_ADRIA12,
	TEXT_ADRIA13,
	TEXT_WIRT1,
	TEXT_WIRT2,
	TEXT_WIRT3,
	TEXT_WIRT4,
	TEXT_WIRT5,
	TEXT_WIRT6,
	TEXT_WIRT7,
	TEXT_WIRT8,
	TEXT_WIRT9,
	TEXT_WIRT11,
	TEXT_WIRT12,
	TEXT_BONER,
	TEXT_BLOODY,
	TEXT_BLINDING,
	TEXT_BLOODWAR,
	TEXT_COW1,
	TEXT_COW2,
	TEXT_BOOK11,
	TEXT_BOOK12,
	TEXT_BOOK13,
	TEXT_BOOK21,
	TEXT_BOOK22,
	TEXT_BOOK23,
	TEXT_BOOK31,
	TEXT_BOOK32,
	TEXT_BOOK33,
	TEXT_INTRO,
	TEXT_IM_MUSHROOM,
	TEXT_IM_ANVIL,
	TEXT_IM_GLDNELIX,
	TEXT_IM_ROCK,
	TEXT_IM_ARMOFVAL,
	TEXT_IM_MAPOFDOOM,
	TEXT_IM_FULLNOTE,
	TEXT_IM_FUNGALTM,
	TEXT_QM_BUTCHER,
	TEXT_QM_GARBUD,
	TEXT_QM_SKING,
	TEXT_QM_ZHAR,
	TEXT_QM_LAZURUS,
	TEXT_QM_WARLORD,
	TEXT_DM_CATHEDRAL,
	TEXT_DM_CATACOMBS,
	TEXT_DM_CAVES,
	TEXT_DM_HELL,
	TEXT_DM_DIABLO,
	TEXT_DM_SKING,
#ifdef HELLFIRE
	TEXT_DM_NEST,
	TEXT_DM_CRYPT,
	//TEXT_DEFILER4,
	//TEXT_DEFILER5,
	TEXT_DM_DEFILER,
	TEXT_GRAVE1,
	TEXT_GRAVE2,
	TEXT_GRAVE3,
	TEXT_GRAVE4,
	TEXT_GRAVE5,
	TEXT_GRAVE6,
	TEXT_GRAVE7,
	TEXT_GRAVE8,
	TEXT_GRAVE9,
	TEXT_GRAVE10,
	TEXT_FARMER1,
	TEXT_FARMER2,
	TEXT_FARMER3,
	TEXT_FARMER4,
	TEXT_FARMER5,
	TEXT_GIRL1,
	TEXT_GIRL2,
	TEXT_GIRL3,
	TEXT_GIRL4,
	TEXT_NAKRUL1,
	TEXT_NAKRUL2,
	TEXT_NAKRUL3,
	TEXT_NAKRUL4,
	TEXT_NAKRUL5,
	//TEXT_CORNSTN,
	TEXT_JERSEY1,
	TEXT_JERSEY2,
	TEXT_JERSEY3,
	TEXT_JERSEY4,
	TEXT_JERSEY5,
	TEXT_JERSEY6,
	TEXT_JERSEY7,
	TEXT_JERSEY8,
	TEXT_JERSEY9,
	TEXT_TRADER,
	TEXT_FARMER6,
	TEXT_FARMER7,
	TEXT_FARMER8,
	TEXT_FARMER9,
	TEXT_FARMER10,
	TEXT_JERSEY10,
	TEXT_JERSEY11,
	TEXT_JERSEY12,
	TEXT_JERSEY13,
	TEXT_SKLJRN,
	TEXT_BOOK4,
	TEXT_BOOK5,
	TEXT_BOOK6,
	TEXT_BOOK7,
	TEXT_BOOK8,
	TEXT_BOOK9,
	TEXT_BOOKA,
	TEXT_BOOKB,
	TEXT_BOOKC,
/*
	TEXT_DEADGUY,
	TEXT_FARNHAM14,
	TEXT_FARNHAM15,
	TEXT_FARNHAM16,
	TEXT_FARNHAM17,
	TEXT_FARNHAM18,
	TEXT_FARNHAM19,
	TEXT_FARNHAM20,
	TEXT_FARNHAM21,
	TEXT_FARNHAM22,
	TEXT_GILLIAN11,
	TEXT_GILLIAN12,
	TEXT_GILLIAN13,
	TEXT_GILLIAN14,
	TEXT_GILLIAN15,
	TEXT_GILLIAN16,
	TEXT_GILLIAN17,
    TEXT_GILLIAN18,
    TEXT_GILLIAN19,
    TEXT_GILLIAN20,
    TEXT_GILLIAN21,
    TEXT_GILLIAN22,
    TEXT_GILLIAN23,
    TEXT_GILLIAN24,
    TEXT_GILLIAN25,
	TEXT_GILLIAN26,
	TEXT_PEPIN12,
	TEXT_PEPIN13,
	TEXT_PEPIN14,
	TEXT_PEPIN15,
	TEXT_PEPIN16,
	TEXT_PEPIN17,
	TEXT_PEPIN18,
	TEXT_PEPIN19,
	TEXT_PEPIN20,
	TEXT_PEPIN21,
	TEXT_PEPIN22,
	TEXT_PEPIN23,
	TEXT_PEPIN24,
	TEXT_PEPIN25,
	TEXT_PEPIN26,
	TEXT_PEPIN27,
	TEXT_PEPIN28,
	TEXT_PEPIN29,
	TEXT_PEPIN30,
	TEXT_GRISWOLD14,
	TEXT_GRISWOLD15,
	TEXT_GRISWOLD16,
	TEXT_GRISWOLD17,
	TEXT_GRISWOLD18,
	TEXT_GRISWOLD19,
	TEXT_GRISWOLD20,
	TEXT_GRISWOLD21,
	TEXT_GRISWOLD22,
	TEXT_GRISWOLD23,
	TEXT_GRISWOLD24,
	TEXT_GRISWOLD25,
	TEXT_GRISWOLD26,
	TEXT_GRISWOLD27,
	TEXT_GRISWOLD28,
	TEXT_GRISWOLD29,
	TEXT_GRISWOLD30,
	TEXT_GRISWOLD31,
	TEXT_GRISWOLD32,
	TEXT_GRISWOLD33,
	TEXT_GRISWOLD34,
	TEXT_GRISWOLD35,
	TEXT_GRISWOLD36,
	TEXT_GRISWOLD37,
*/
#endif
	NUM_TEXTS,
	TEXT_NONE = -1,
} _speech_id;

typedef enum object_graphic_id {
	OFILE_L1BRAZ   = 0x0,
	OFILE_L1DOORS  = 0x1,
	OFILE_LEVER    = 0x2,
	OFILE_CHEST1   = 0x3,
	OFILE_CHEST2   = 0x4,
	OFILE_BANNER   = 0x5,
	OFILE_SKULPILE = 0x6,
	OFILE_SKULFIRE = 0x7,
	OFILE_SKULSTIK = 0x8,
	OFILE_CRUXSK1  = 0x9,
	OFILE_CRUXSK2  = 0xA,
	OFILE_CRUXSK3  = 0xB,
	OFILE_BOOK1    = 0xC,
	OFILE_BOOK2    = 0xD,
	OFILE_ROCKSTAN = 0xE,
	OFILE_ANGEL    = 0xF,
	OFILE_CHEST3   = 0x10,
	OFILE_BURNCROS = 0x11,
	OFILE_CANDLE2  = 0x12,
	OFILE_NUDE2    = 0x13,
	OFILE_SWITCH4  = 0x14,
	OFILE_TNUDEM   = 0x15,
	OFILE_TNUDEW   = 0x16,
	OFILE_TSOUL    = 0x17,
	OFILE_L2DOORS  = 0x18,
	OFILE_WTORCH4  = 0x19,
	OFILE_WTORCH3  = 0x1A,
	OFILE_SARC     = 0x1B,
	OFILE_FLAME1   = 0x1C,
	OFILE_PRSRPLT1 = 0x1D,
	OFILE_TRAPHOLE = 0x1E,
	OFILE_MINIWATR = 0x1F,
	OFILE_WTORCH2  = 0x20,
	OFILE_WTORCH1  = 0x21,
	OFILE_BCASE    = 0x22,
	OFILE_BSHELF   = 0x23,
	OFILE_WEAPSTND = 0x24,
	OFILE_BARREL   = 0x25,
	OFILE_BARRELEX = 0x26,
	OFILE_LSHRINEG = 0x27,
	OFILE_RSHRINEG = 0x28,
	OFILE_BLOODFNT = 0x29,
	OFILE_DECAP    = 0x2A,
	OFILE_PEDISTL  = 0x2B,
	OFILE_L3DOORS  = 0x2C,
	OFILE_PFOUNTN  = 0x2D,
	OFILE_ARMSTAND = 0x2E,
	OFILE_GOATSHRN = 0x2F,
	OFILE_CAULDREN = 0x30,
	OFILE_MFOUNTN  = 0x31,
	OFILE_TFOUNTN  = 0x32,
	OFILE_ALTBOY   = 0x33,
	OFILE_MCIRL    = 0x34,
	OFILE_BKSLBRNT = 0x35,
	OFILE_MUSHPTCH = 0x36,
	OFILE_LZSTAND  = 0x37,
	NUM_OFILE_TYPES
} object_graphic_id;

typedef enum dungeon_type {
	DTYPE_TOWN,
	DTYPE_CATHEDRAL,
	DTYPE_CATACOMBS,
	DTYPE_CAVES,
	DTYPE_HELL,
	DTYPE_CRYPT,
	DTYPE_NEST,
	DTYPE_NONE = 0xFF,
} dungeon_type;

typedef enum dungeon_type_mask {
	DTM_TOWN      = 1 << DTYPE_TOWN,
	DTM_CATHEDRAL = 1 << DTYPE_CATHEDRAL,
	DTM_CATACOMBS = 1 << DTYPE_CATACOMBS,
	DTM_CAVES     = 1 << DTYPE_CAVES,
	DTM_HELL      = 1 << DTYPE_HELL,
	DTM_CRYPT     = 1 << DTYPE_CRYPT,
	DTM_NEST      = 1 << DTYPE_NEST,
	DTM_ANY       = 0xFF,
	DTM_NONE      = 0,
} dungeon_type_mask;

typedef enum townwarp_dest {
	TWARP_CATHEDRAL,
	TWARP_CATACOMB,
	TWARP_CAVES,
	TWARP_HELL,
#ifdef HELLFIRE
	TWARP_NEST,
	TWARP_CRYPT,
#endif
	NUM_TWARP
} townwarp_dest;

typedef enum dungeon_level {
	DLV_TOWN,
	DLV_CATHEDRAL1,
	DLV_CATHEDRAL2,
	DLV_CATHEDRAL3,
	DLV_CATHEDRAL4,
	DLV_CATACOMBS1,
	DLV_CATACOMBS2,
	DLV_CATACOMBS3,
	DLV_CATACOMBS4,
	DLV_CAVES1,
	DLV_CAVES2,
	DLV_CAVES3,
	DLV_CAVES4,
	DLV_HELL1,
	DLV_HELL2,
	DLV_HELL3,
	DLV_HELL4,
#ifdef HELLFIRE
	DLV_NEST1,
	DLV_NEST2,
	DLV_NEST3,
	DLV_NEST4,
	DLV_CRYPT1,
	DLV_CRYPT2,
	DLV_CRYPT3,
	DLV_CRYPT4,
#endif
	NUM_STDLVLS
} dungeon_level;

typedef enum _setlevels {
	SL_BUTCHCHAMB   = NUM_STDLVLS,
	SL_SKELKING,
	SL_BONECHAMB,
	SL_MAZE,
	SL_POISONWATER,
	SL_VILEBETRAYER,
	NUM_SETLVLS = SL_VILEBETRAYER - NUM_STDLVLS + 1,
	NUM_LEVELS = NUM_STDLVLS + NUM_SETLVLS
} _setlevels;

typedef enum piece_flag {
	PFLAG_BLOCK_PATH       = 1 << 0,
	PFLAG_BLOCK_LIGHT      = 1 << 1,
	PFLAG_BLOCK_MISSILE    = 1 << 2,
	PFLAG_TRANSPARENT      = 1 << 3,
	PFLAG_TRANS_MASK_LEFT  = 1 << 4,
	PFLAG_TRANS_MASK_RIGHT = 1 << 5,
	// PFLAG_TRANS_MASK_NONE  = 1 << 6, - unused. masked the LEFT/RIGHT flags in vanilla.
	PFLAG_TRAP_SOURCE      = 1 << 7,
} piece_flag;

typedef enum dflag {
	BFLAG_MISSILE     = 0x01,
	BFLAG_VISIBLE     = 0x02,
	BFLAG_DEAD_PLAYER = 0x04,
	BFLAG_POPULATED   = 0x08,
	BFLAG_MONSTLR     = 0x10,
	BFLAG_PLAYERLR    = 0x20,
	BFLAG_LIT         = 0x40,
	BFLAG_EXPLORED    = 0x80,
} dflag;

typedef enum placeflag {
	PLACE_SCATTER = 1,
	PLACE_SPECIAL = 2,
	PLACE_UNIQUE  = 4,
} placeflag;

/*
Looks like someone treated hex values as binary, so 0x10 came after 0x01, that's why we have 1 and 16, they did the same thing with affix_item_type
*/
typedef enum goodorevil {
	GOE_ANY  = 0x00,
	GOE_EVIL = 0x01,
	GOE_GOOD = 0x10,
} goodorevil;

/*
 First 8 bits store level
 9-10th bit stores info if item is from a specific source (griswold, wirt, adria, pepin and user crafted) 
 11th bit stores onlygood flag
 12th bit stores uper15 flag - uper means unique percent, this flag is true for unique monsters and loot from them has 15% to become unique
 13th bit stores uper1 flag - this is loot from normal monsters, which has 1% to become unique
 14th bit stores info if item is unique
 15th bit stores pregen flag

 combining CF_UPER15 and CF_UPER1 flags (CF_USEFUL) is used to mark potions and town portal scrolls created on the ground
 CF_TOWN is combining all source flags and indicates if item has been bought from a NPC or created via crafting
 */
typedef enum icreateinfo_loc {
	CFL_DUNGEON,
	CFL_SMITH,
	CFL_SMITHPREMIUM,
	CFL_BOY,
	CFL_WITCH,
	CFL_HEALER,
	CFL_CRAFTED,
} icreateinfo_loc;
typedef enum icreateinfo_flag {
	CF_LEVEL        = (1 << 8) - 1,
	CF_SMITH        = CFL_SMITH << 8,
	CF_SMITHPREMIUM = CFL_SMITHPREMIUM << 8,
	CF_BOY          = CFL_BOY << 8,
	CF_WITCH        = CFL_WITCH << 8,
	CF_HEALER       = CFL_HEALER << 8,
	CF_CRAFTED      = CFL_CRAFTED << 8,
	CF_ONLYGOOD     = 1 << 11,
	CF_UPER15       = 1 << 12,
	CF_UPER1        = 1 << 13,
	CF_UNIQUE       = 1 << 14,
	CF_PREGEN       = 1 << 15,

	CF_USEFUL = CF_UPER15 | CF_UPER1,
	CF_TOWN   = 7 << 8,
} icreateinfo_flag;

typedef enum dungeon_message {
	DMSG_CATHEDRAL = 1 << 0,
	DMSG_CATACOMBS = 1 << 1,
	DMSG_CAVES     = 1 << 2,
	DMSG_HELL      = 1 << 3,
	DMSG_DIABLO    = 1 << 4,
	DMSG_SKING     = 1 << 5,
} dungeon_message;

typedef enum dungeon_message2 {
	DMSG2_DEFILER  = 1 << 0,
	DMSG2_DEFILER1 = 1 << 1,
	DMSG2_DEFILER2 = 1 << 2,
} dungeon_message2;

typedef enum diablo_message {
	EMSG_NONE,
	EMSG_DESYNC,
	EMSG_LOADING,
	EMSG_SAVING,
	EMSG_SHRINE_HIDDEN,
	EMSG_SHRINE_GLOOMY,
	EMSG_SHRINE_WEIRD,
	EMSG_SHRINE_RELIGIOUS,
	EMSG_SHRINE_MAGICAL,
	EMSG_SHRINE_STONE,
	EMSG_SHRINE_CREEPY,
	EMSG_SHRINE_THAUMATURGIC,
	EMSG_SHRINE_FASCINATING,
	EMSG_SHRINE_SHIMMERING,
	EMSG_SHRINE_CRYPTIC,
	EMSG_SHRINE_ELDRITCH,
	EMSG_SHRINE_EERIE1,
	EMSG_SHRINE_EERIE2,
	EMSG_SHRINE_SPOOKY1,
	EMSG_SHRINE_SPOOKY2,
	EMSG_SHRINE_QUIET1,
	EMSG_SHRINE_QUIET2,
	EMSG_SHRINE_DIVINE,
	EMSG_SHRINE_HOLY,
	EMSG_SHRINE_SACRED,
	EMSG_SHRINE_ORNATE,
	EMSG_SHRINE_SPIRITUAL,
	EMSG_SHRINE_SECLUDED,
	EMSG_SHRINE_GLIMMERING,
	EMSG_SHRINE_TAINTED,
	EMSG_SHRINE_GLISTENING,
	EMSG_BONECHAMB,
#ifdef HELLFIRE
	EMSG_SHRINE_SPARKLING,
	EMSG_SHRINE_SOLAR,
	EMSG_SHRINE_MURPHYS,
#endif
	NUM_EMSGS
} diablo_message;

typedef enum magic_type {
	STYPE_FIRE,
	STYPE_LIGHTNING,
	STYPE_MAGIC,
	STYPE_NONE
} magic_type;

typedef enum theme_id {
	THEME_BARREL,
	THEME_SHRINE,
	THEME_MONSTPIT,
	THEME_SKELROOM,
	THEME_TREASURE,
	THEME_LIBRARY,
	THEME_TORTURE,
	THEME_BLOODFOUNTAIN,
	THEME_DECAPITATED,
	THEME_PURIFYINGFOUNTAIN,
	THEME_ARMORSTAND,
	THEME_GOATSHRINE,
	THEME_CAULDRON,
	THEME_MURKYFOUNTAIN,
	THEME_TEARFOUNTAIN,
	THEME_BRNCROSS,
	THEME_WEAPONRACK,
	NUM_THEMES,
	THEME_NONE              = 0xFF,
} theme_id;

typedef enum event_type {
	EVENT_TYPE_JOIN_ACCEPTED,
	EVENT_TYPE_PLAYER_LEAVE_GAME,
	NUM_EVT_TYPES,
} event_type;

typedef enum player_status {
	PS_CONNECTED    = 0x01, // was 0x10000
	PS_TURN_ARRIVED = 0x02, // was 0x20000
	PS_ACTIVE       = 0x04, // was 0x40000
} player_status;

typedef enum leave_reason {
	LEAVE_NONE,
	LEAVE_UNKNOWN,
	LEAVE_ENDING, // was 0x40000004
	LEAVE_DROP,   // was 0x40000006
} leave_reason;

typedef enum text_color {
	COL_WHITE,
	COL_BLUE,
	COL_RED,
	COL_GOLD,
	COL_BLACK,
} text_color;

typedef enum item_color {
	ICOL_YELLOW = PAL16_YELLOW + 5,
	ICOL_WHITE = PAL16_GRAY + 5,
	ICOL_BLUE  = PAL16_BLUE + 5,
	ICOL_RED   = PAL16_RED + 5,
} item_color;

typedef enum _difficulty {
	DIFF_NORMAL,
	DIFF_NIGHTMARE,
	DIFF_HELL,
} _difficulty;

typedef enum _speed {
	SPEED_NORMAL  = 25,
	SPEED_FAST    = 30,
	SPEED_FASTER  = 40,
	SPEED_FASTEST = 50,
} _speed;

typedef enum MON_MODE {
	MM_STAND     = 0,
	MM_WALK      = 1, //Movement towards N, NW, or NE
	MM_WALK2     = 2, //Movement towards S, SW, or SE
	MM_WALK3     = 3, //Movement towards W or E
	MM_ATTACK    = 4,
	MM_GOTHIT    = 5,
	MM_DEATH     = 6,
	MM_SATTACK   = 7,
	MM_FADEIN    = 8,
	MM_FADEOUT   = 9,
	MM_RATTACK   = 10,
	MM_SPSTAND   = 11,
	MM_RSPATTACK = 12,
	MM_DELAY     = 13,
	MM_CHARGE    = 14,
	MM_STONE     = 15,
	MM_HEAL      = 16,
	MM_TALK      = 17,
} MON_MODE;

typedef enum MON_ANIM {
	MA_STAND   = 0,
	MA_WALK    = 1,
	MA_ATTACK  = 2,
	MA_GOTHIT  = 3,
	MA_DEATH   = 4,
	MA_SPECIAL = 5,
	NUM_MON_ANIM
} MON_ANIM;

typedef enum MON_SFX {
	MS_ATTACK,
	MS_GOTHIT,
	MS_DEATH,
	MS_SPECIAL,
	NUM_MON_SFX
} MON_SFX;

typedef enum PLR_MODE {
	PM_STAND   = 0,
	PM_WALK    = 1, //Movement towards N, NW, or NE
	PM_WALK2   = 2, //Movement towards S, SW, or SE
	PM_WALK3   = 3, //Movement towards W or E
	PM_ATTACK  = 4,
	PM_RATTACK = 5,
	PM_BLOCK   = 6,
	PM_GOTHIT  = 7,
	PM_DEATH   = 8,
	PM_SPELL   = 9,
	PM_NEWLVL  = 10,
	PM_QUIT    = 11,
} PLR_MODE;

typedef enum PLR_ANIM {
	PA_STAND,
	PA_ATTACK,
	PA_WALK,
	PA_BLOCK,
	PA_DEATH,
	PA_SPELL,
	PA_GOTHIT,
	NUM_PLR_ANIMS
} PLR_ANIM;

typedef enum PLR_EAR {
	DMGTYPE_NPC,
	DMGTYPE_PLAYER,
	DMGTYPE_UNKNOWN,
} PLR_EAR;

typedef enum spell_type {
	RSPLTYPE_ABILITY = 0x0,
	RSPLTYPE_SPELL   = 0x1,
	RSPLTYPE_SCROLL  = 0x2,
	RSPLTYPE_CHARGES = 0x3,
	RSPLTYPE_INVALID = 0x4,
} spell_type;

typedef enum spell_from_type {
	SPLFROM_INVALID =  0,
	SPLFROM_ABILITY = -1,
	SPLFROM_MANA    = -2,
} spell_from_type;

typedef enum cursor_id {
	CURSOR_NONE        = 0x0,
	CURSOR_HAND        = 0x1,
	CURSOR_IDENTIFY    = 0x2,
	CURSOR_REPAIR      = 0x3,
	CURSOR_RECHARGE    = 0x4,
	CURSOR_DISARM      = 0x5,
	CURSOR_OIL         = 0x6,
	CURSOR_TELEKINESIS = 0x7,
	CURSOR_RESURRECT   = 0x8,
	CURSOR_TELEPORT    = 0x9,
	CURSOR_HEALOTHER   = 0xA,
	CURSOR_HOURGLASS   = 0xB,
	CURSOR_FIRSTITEM   = 0xC,
} cursor_id;

typedef enum direction {
	DIR_S,
	DIR_SW,
	DIR_W,
	DIR_NW,
	DIR_N,
	DIR_NE,
	DIR_E,
	DIR_SE,
	NUM_DIRS,
	DIR_NONE = NUM_DIRS,
} direction;

typedef enum _scroll_direction {
	SDIR_NONE = 0x0,
	SDIR_N    = 0x1,
	SDIR_NE   = 0x2,
	SDIR_E    = 0x3,
	SDIR_SE   = 0x4,
	SDIR_S    = 0x5,
	SDIR_SW   = 0x6,
	SDIR_W    = 0x7,
	SDIR_NW   = 0x8,
} _scroll_direction;

typedef enum _path_direction {
	PDIR_N,
	PDIR_W,
	PDIR_E,
	PDIR_S,
	PDIR_NW,
	PDIR_NE,
	PDIR_SE,
	PDIR_SW
} _path_direction;

typedef enum interface_mode {
	WM_DIABNEXTLVL  = 0x402, // dungeon -> next level  WM_USER+2
	WM_DIABPREVLVL  = 0x403, // dungeon -> previous level
	WM_DIABRTNLVL   = 0x404, // setlevel -> dungeon
	WM_DIABSETLVL   = 0x405, // dungeon -> setlevel
	WM_DIABWARPLVL  = 0x406, // portal
	WM_DIABTWARPDN  = 0x407, // town -> dungeon
	WM_DIABTWARPUP  = 0x408, // dungeon -> town
	WM_DIABRETOWN   = 0x409, // restart in town
	WM_DIABNEWGAME  = 0x40A,
	WM_DIABLOADGAME = 0x40B
	// WM_LEIGHSKIP = 0x40C, // psx only
	// WM_DIAVNEWLVL = 0x40D, // psx only
} interface_mode;

typedef enum lvl_entry {
	ENTRY_MAIN    = 0,
	ENTRY_PREV    = 1,
	ENTRY_SETLVL  = 2,
	ENTRY_RTNLVL  = 3,
	ENTRY_LOAD    = 4,
	ENTRY_WARPLVL = 5,
	ENTRY_TWARPDN = 6,
	ENTRY_TWARPUP = 7,
} lvl_entry;

/*typedef enum game_info {
	GAMEINFO_NAME         = 1,
	GAMEINFO_PASSWORD     = 2,
	GAMEINFO_STATS        = 3,
	GAMEINFO_MODEFLAG     = 4,
	GAMEINFO_GAMETEMPLATE = 5,
	GAMEINFO_PLAYERS      = 6,
} game_info;*/

typedef enum spell_id {
	SPL_NULL,
	SPL_WALK,
	SPL_BLOCK,
	SPL_ATTACK,
	SPL_SWIPE,
	SPL_RATTACK,
	SPL_POINT_BLANK,
	SPL_FAR_SHOT,
	SPL_RAGE,
	SPL_FIREBOLT,
	SPL_CBOLT,
	SPL_HBOLT,
	SPL_LIGHTNING,
	SPL_FLASH,
	SPL_FIREWALL,
	SPL_FIREBALL,
	SPL_CHAIN,
	SPL_WAVE,
	SPL_NOVA,
	SPL_INFERNO,
	SPL_ELEMENTAL,
	SPL_FLARE,
	SPL_GUARDIAN,
	SPL_GOLEM,
	SPL_STONE,
	SPL_INFRA,
	SPL_MANASHIELD,
	SPL_TELEKINESIS,
	SPL_TELEPORT,
	SPL_RNDTELEPORT,
	SPL_TOWN,
	SPL_HEAL,
	SPL_HEALOTHER,
	SPL_RESURRECT,
	SPL_IDENTIFY,
	SPL_REPAIR,
	SPL_RECHARGE,
	SPL_DISARM,
#ifdef HELLFIRE
	SPL_BUCKLE,
	SPL_WHITTLE,
	//SPL_LIGHTWALL,
	//SPL_IMMOLAT,
	SPL_FIRERING,
	SPL_RUNEFIRE,
	SPL_RUNELIGHT,
	SPL_RUNENOVA,
	SPL_RUNEWAVE,
	SPL_RUNESTONE,
#endif
	NUM_SPELLS,
	SPL_INVALID = NUM_SPELLS
} spell_id;

typedef enum _cmd_id {
	CMD_SYNCDATA,
	CMD_WALKXY,
	CMD_SATTACKXY,
	CMD_RATTACKXY,
	CMD_SPELLXY,
	CMD_OPOBJXY,
	CMD_DISARMXY,
	CMD_ATTACKID,
	CMD_ATTACKPID,
	CMD_RATTACKID,
	CMD_RATTACKPID,
	CMD_SPELLID,
	CMD_SPELLPID,
	CMD_BLOCK,
	CMD_KNOCKBACK,
	CMD_TALKXY,
	CMD_MONSTDEATH,
	CMD_MONSTDAMAGE,
	CMD_AWAKEGOLEM,
	CMD_PLRDEAD,
	CMD_PLRRESURRECT,
	CMD_PLRDAMAGE,
	CMD_PLRLEVEL,
	CMD_PLRSKILLLVL,
	CMD_SETSHIELD,
	CMD_REMSHIELD,
	CMD_ADDSTR,
	CMD_ADDMAG,
	CMD_ADDDEX,
	CMD_ADDVIT,
	CMD_DOABILITY,
	CMD_DOOIL,
	CMD_CHANGEPLRITEM,
	CMD_DELPLRITEM,
	CMD_USEPLRITEM,
	CMD_DROPITEM,
	CMD_GETITEM,
	CMD_AGETITEM,
	CMD_PUTITEM,
	CMD_SYNCPUTITEM,
	CMD_RESPAWNITEM,
	CMD_REQUESTGITEM,
	CMD_REQUESTAGITEM,
	CMD_GOTOGETITEM,
	CMD_GOTOAGETITEM,
	CMD_ITEMEXTRA,
	CMD_OPERATEOBJ,
	CMD_OPOBJT,
	CMD_DOOROPEN,
	CMD_DOORCLOSE,
	CMD_TRAPDISABLE,
	CMD_TRAPOPEN,
	CMD_TRAPCLOSE,
	CMD_CHESTCLOSE,
	CMD_ACTIVATEPORTAL,
	CMD_DEACTIVATEPORTAL,
	CMD_NEWLVL,
	CMD_TWARP,
	CMD_RETOWN,
	CMD_ACK_JOINLEVEL,
	CMD_SEND_JOINLEVEL,
	CMD_ACK_PLRINFO,
	CMD_SEND_PLRINFO,
	CMD_DLEVEL_DATA,
	CMD_DLEVEL_SEP,
	CMD_DLEVEL_JUNK,
	CMD_DLEVEL_END,
	CMD_STRING,
	CMD_INVITE,
	CMD_ACK_INVITE,
	CMD_DEC_INVITE,
	CMD_REV_INVITE,
	CMD_KICK_PLR,
	CMD_SYNCQUEST,
	CMD_SYNCQUESTEXT,
	CMD_OPENSPIL,
	CMD_OPENHIVE,
	CMD_OPENCRYPT,
	CMD_CHEAT_EXPERIENCE,
	CMD_CHEAT_SPELL_LEVEL,
	CMD_DEBUG,
	FAKE_CMD_SETID,
	FAKE_CMD_DROPID,
} _cmd_id;

// TODO: check the meaning of the values
typedef enum _dcmd_id {
	DCMD_SPAWNED,
	DCMD_TAKEN,
	DCMD_DROPPED,
} _dcmd_id;

typedef enum _msg_mode {
	MSG_NORMAL,
	MSG_DOWNLOAD_DELTA,
	MSG_RUN_DELTA,
} _msg_mode;

typedef enum _talker_id {
	TOWN_SMITH,
	TOWN_HEALER,
	TOWN_TAVERN,
	TOWN_STORY,
	TOWN_DRUNK,
	TOWN_WITCH,
	TOWN_BMAID,
	TOWN_PEGBOY,
	TOWN_DEADGUY,
#ifdef HELLFIRE
	TOWN_FARMER,
	TOWN_GIRL,
	TOWN_COWFARM,
#else
	TOWN_PRIEST,
#endif
	TOWN_COW,
} _talker_id;

typedef enum _music_id {
	TMUSIC_TOWN,
	TMUSIC_L1,
	TMUSIC_L2,
	TMUSIC_L3,
	TMUSIC_L4,
#ifdef HELLFIRE
	TMUSIC_L5,
	TMUSIC_L6,
#endif
	TMUSIC_INTRO,
	NUM_MUSIC,
} _music_id;

typedef enum _mainmenu_selections {
	MAINMENU_SINGLE_PLAYER = 1,
	MAINMENU_MULTIPLAYER,
	MAINMENU_REPLAY_INTRO,
	MAINMENU_SHOW_CREDITS,
	MAINMENU_EXIT_DIABLO,
	MAINMENU_ATTRACT_MODE,
} _mainmenu_selections;

typedef enum _selhero_selections {
	SELHERO_NEW_DUNGEON = 1,
	SELHERO_CONTINUE    = 2,
	SELHERO_PREVIOUS    = 3
} _selhero_selections;

typedef enum _selgame_selections {
	SELGAME_CREATE,
	SELGAME_JOIN,
	SELGAME_PREVIOUS
} _selgame_selections;

typedef enum conn_type {
	SELCONN_ZT,
	SELCONN_TCP,
	SELCONN_LOOPBACK,
} conn_type;

typedef enum panel_button_id {
	PANBTN_MAINMENU,
	PANBTN_OPTIONS,
	PANBTN_CHARINFO,
	PANBTN_INVENTORY,
	PANBTN_SPELLBOOK,
	PANBTN_QLOG,
	PANBTN_AUTOMAP,
	PANBTN_SENDMSG,
	PANBTN_TEAMBOOK,
	NUM_PANBTNS
} panel_button_id;

typedef enum attribute_id {
	ATTRIB_STR,
	ATTRIB_MAG,
	ATTRIB_DEX,
	ATTRIB_VIT,
	NUM_ATTRIBS
} attribute_id;

typedef enum _object_id {
	OBJ_L1LIGHT,
	OBJ_L1LDOOR,
	OBJ_L1RDOOR,
	OBJ_SKFIRE,
	OBJ_LEVER,
	OBJ_CHEST1,
	OBJ_CHEST2,
	OBJ_CHEST3,
	//OBJ_CANDLE1,
	OBJ_CANDLE2,
	//OBJ_CANDLEO,
	OBJ_BANNERL,
	OBJ_BANNERM,
	OBJ_BANNERR,
	//OBJ_SKPILE,
	//OBJ_SKSTICK1,
	//OBJ_SKSTICK2,
	//OBJ_SKSTICK3,
	//OBJ_SKSTICK4,
	//OBJ_SKSTICK5,
	OBJ_CRUXM,
	OBJ_CRUXR,
	OBJ_CRUXL,
	OBJ_STAND,
	//OBJ_ANGEL,
	//OBJ_NUDEW2R,
	OBJ_SWITCHSKL,
	OBJ_TNUDEM1,
	OBJ_TNUDEM2,
	OBJ_TNUDEM3,
	OBJ_TNUDEM4,
	OBJ_TNUDEW1,
	OBJ_TNUDEW2,
	OBJ_TNUDEW3,
	OBJ_TORTURE1,
	OBJ_TORTURE2,
	OBJ_TORTURE3,
	OBJ_TORTURE4,
	OBJ_TORTURE5,
	OBJ_L2LDOOR,
	OBJ_L2RDOOR,
	OBJ_TORCHL,
	OBJ_TORCHR,
	OBJ_TORCHL2,
	OBJ_TORCHR2,
	OBJ_SARC,
	//OBJ_FLAMEHOLE,
	//OBJ_FLAMELVR,
	//OBJ_WATER,
	OBJ_TRAPL,
	OBJ_TRAPR,
	//OBJ_BOOKSHELF,
	//OBJ_WEAPRACK,
	OBJ_BARREL,
	OBJ_BARRELEX,
	OBJ_SHRINEL,
	OBJ_SHRINER,
	OBJ_BOOKCASEL,
	OBJ_BOOKCASER,
	OBJ_BOOKCANDLE,
	OBJ_BLOODFTN,
	OBJ_DECAP,
	OBJ_TCHEST1,
	OBJ_TCHEST2,
	OBJ_TCHEST3,
	OBJ_BOOK2L,
	OBJ_BOOK2R,
	OBJ_BOOKSTAND,
	OBJ_SKELBOOK,
	//OBJ_BOOKLVR,
	OBJ_BLINDBOOK,
	OBJ_BLOODBOOK,
	OBJ_STEELTOME,
	OBJ_PEDISTAL,
	OBJ_L3LDOOR,
	OBJ_L3RDOOR,
	OBJ_PURIFYINGFTN,
	OBJ_ARMORSTAND,
	OBJ_ARMORSTANDN,
	OBJ_GOATSHRINE,
	OBJ_CAULDRON,
	OBJ_MURKYFTN,
	OBJ_TEARFTN,
	OBJ_ALTBOY,
	OBJ_MCIRCLE1,
	OBJ_MCIRCLE2,
	OBJ_STORYBOOK,
	OBJ_STORYCANDLE,
	OBJ_TBCROSS,
	OBJ_WEAPONRACKL,
	OBJ_WEAPONRACKLN,
	OBJ_WEAPONRACKR,
	OBJ_WEAPONRACKRN,
	OBJ_MUSHPATCH,
	OBJ_LAZSTAND,
	OBJ_SLAINHERO,
	OBJ_SIGNCHEST,
	//OBJ_BOOKSHELFR,
	NUM_OBJECTS
} _object_id;

typedef enum item_misc_id {
	IMISC_NONE,
	IMISC_HEAL,
	IMISC_FULLHEAL,
	IMISC_MANA,
	IMISC_FULLMANA,
	IMISC_REJUV,
	IMISC_FULLREJUV,
	IMISC_SCROLL,
	IMISC_BOOK,
	IMISC_UNIQUE,
	IMISC_EAR,
	IMISC_SPECELIX,
	IMISC_OILQLTY,
	IMISC_OILFIRST  = IMISC_OILQLTY,
	IMISC_OILZEN,
	IMISC_OILSTR,
	IMISC_OILDEX,
	IMISC_OILVIT,
	IMISC_OILMAG,
	IMISC_OILRESIST,
	IMISC_OILCHANCE,
	IMISC_OILCLEAN,
	IMISC_OILLAST = IMISC_OILCLEAN,
	IMISC_MAPOFDOOM,
	IMISC_RUNE,
	IMISC_NOTE,
	IMISC_INVALID   = -1,
} item_misc_id;

typedef enum item_type {
	ITYPE_MISC   = 0x0,
	ITYPE_SWORD  = 0x1,
	ITYPE_AXE    = 0x2,
	ITYPE_BOW    = 0x3,
	ITYPE_MACE   = 0x4,
	ITYPE_SHIELD = 0x5,
	ITYPE_HELM   = 0x6,
	ITYPE_LARMOR = 0x7,
	ITYPE_MARMOR = 0x8,
	ITYPE_HARMOR = 0x9,
	ITYPE_STAFF  = 0xA,
	ITYPE_GOLD   = 0xB,
	ITYPE_RING   = 0xC,
	ITYPE_AMULET = 0xD,
	ITYPE_NONE   = -1,
} item_type;

typedef enum _item_indexes {
	IDI_GOLD,
	IDI_WARRSWORD,
	IDI_WARRSHLD,
	IDI_ROGUEBOW,
	IDI_SORCSTAFF,
	IDI_BARDSWORD,
	IDI_BARDDAGGER,
	IDI_MONKSTAFF,
	IDI_BARBCLUB,
	IDI_CLEAVER,
	IDI_GRISWOLD,
	IDI_HARCREST,
	IDI_SKCROWN,
	IDI_STEELVEIL,
	IDI_ARMOFVAL,
	IDI_INFRARING,
	IDI_OPTAMULET,
	IDI_TRING,
	IDI_LGTFORGE,
	IDI_ROCK,
	IDI_BANNER,
	IDI_GLDNELIX,
	IDI_ANVIL,
	IDI_MUSHROOM,
	IDI_BRAIN,
	IDI_FUNGALTM,
	IDI_SPECELIX,
	IDI_BLDSTONE,
	IDI_LAZSTAFF,
	IDI_MAPOFDOOM,
	IDI_EAR,
	IDI_IDENTIFY,
	IDI_PORTAL,
	IDI_RESURRECT,
	IDI_RUNEBOMB,
	IDI_THEODORE,
	IDI_NOTE1,
	IDI_NOTE2,
	IDI_NOTE3,
	IDI_FULLNOTE,
	IDI_BROWNSUIT,
	IDI_GREYSUIT,
	IDI_HEAL       = 0x47,
	IDI_FULLHEAL   = 0x48,
	IDI_MANA       = 0x49,
	IDI_FULLMANA   = 0x4A,
	IDI_REJUV      = 0x4B,
	IDI_FULLREJUV  = 0x4C,
	IDI_BOOK1      = 0x6A,
	IDI_BOOK4      = 0x6D,
	IDI_CLUB       = 0x85,
	IDI_DROPSHSTAFF= 0x91,
#ifdef HELLFIRE
	NUM_IDI        = 0xA3
#else
	NUM_IDI        = 0x9E
#endif
} _item_indexes;

typedef enum _item_damage_type {
	IDAM_NONE       = 0x00,
	IDAM_SLASH      = 0x01,
	IDAM_BLUNT      = 0x02,
	IDAM_SB_MIX     = 0x03,
	IDAM_PUNCTURE   = 0x04,
} _item_damage_type;

typedef enum quest_id {
	Q_ROCK,
	Q_MUSHROOM,
	Q_GARBUD,
	Q_ZHAR,
	Q_VEIL,
	Q_DIABLO,
	Q_BUTCHER,
	Q_LTBANNER,
	Q_BLIND,
	Q_BLOOD,
	Q_ANVIL,
	Q_WARLORD,
	Q_SKELKING,
	Q_PWATER,
	Q_SCHAMB,
	Q_BETRAYER,
#ifdef HELLFIRE
	Q_GRAVE,
	Q_FARMER,
	Q_GIRL,
	Q_TRADER,
	Q_DEFILER,
	Q_NAKRUL,
	//Q_CORNSTN,
	Q_JERSEY,
#endif
	NUM_QUESTS,
	Q_INVALID  = 0xFF,
} quest_id;

typedef enum quest_state {
	QUEST_NOTAVAIL = 0, // quest did not spawn this game
	QUEST_INIT     = 1, // quest has spawned, waiting to trigger
	QUEST_ACTIVE   = 2, // quest is currently in progress
	QUEST_DONE     = 3  // quest log closed and finished
} quest_state;

typedef enum quest_mush_state {
	QS_INIT         = 0,
	QS_TOMESPAWNED  = 1,
	QS_TOMEGIVEN    = 2,
	QS_MUSHSPAWNED  = 3,
	QS_MUSHPICKED   = 4,
	QS_MUSHGIVEN    = 5,
	QS_BRAINSPAWNED = 6,
	QS_BRAINGIVEN   = 7,
} quest_mush_state;

typedef enum talk_id {
	STORE_NONE      = 0x0,
	STORE_SMITH     = 0x1,
	STORE_SBUY      = 0x2,
	STORE_SSELL     = 0x3,
	STORE_SREPAIR   = 0x4,
	STORE_WITCH     = 0x5,
	STORE_WBUY      = 0x6,
	STORE_WSELL     = 0x7,
	STORE_WRECHARGE = 0x8,
	STORE_NOMONEY   = 0x9,
	STORE_NOROOM    = 0xA,
	STORE_CONFIRM   = 0xB,
	STORE_BOY       = 0xC,
	STORE_BBOY      = 0xD,
	STORE_HEALER    = 0xE,
	STORE_STORY     = 0xF,
	STORE_HBUY      = 0x10,
	STORE_SIDENTIFY = 0x11,
	STORE_SPBUY     = 0x12,
	STORE_GOSSIP    = 0x13,
	STORE_IDSHOW    = 0x14,
	STORE_TAVERN    = 0x15,
	STORE_DRUNK     = 0x16,
	STORE_BARMAID   = 0x17,
} talk_id;

typedef enum _unique_items {
	UITEM_CLEAVER,
	UITEM_SKCROWN,
	UITEM_INFRARING,
	UITEM_OPTAMULET,
	UITEM_TRING,
	UITEM_HARCREST,
	UITEM_STEELVEIL,
	UITEM_ARMOFVAL,
	UITEM_GRISWOLD,
#ifdef HELLFIRE
	UITEM_BOVINE,
#else
	UITEM_LGTFORGE,
#endif
	UITEM_RIFTBOW,
	UITEM_NEEDLER,
	UITEM_CELESTBOW,
	//UITEM_DEADLYHUNT,
	UITEM_BOWOFDEAD,
	UITEM_BLKOAKBOW,
	UITEM_FLAMEDART,
	UITEM_FLESHSTING,
	UITEM_WINDFORCE,
	UITEM_EAGLEHORN,
	UITEM_GONNAGALDIRK,
	UITEM_DEFENDER,
	UITEM_GRYPHONCLAW,
	UITEM_BLACKRAZOR,
	UITEM_GIBBOUSMOON,
	UITEM_ICESHANK,
	UITEM_EXECUTIONER,
	UITEM_BONESAW,
	UITEM_SHADHAWK,
	UITEM_WIZSPIKE,
	UITEM_LGTSABRE,
	UITEM_FALCONTALON,
	UITEM_INFERNO,
	UITEM_DOOMBRINGER,
	UITEM_GRIZZLY,
	UITEM_GRANDFATHER,
	UITEM_MANGLER,
	UITEM_SHARPBEAK,
	//UITEM_BLOODLSLAYER,
	UITEM_CELESTAXE,
	UITEM_WICKEDAXE,
	UITEM_STONECLEAV,
	UITEM_AGUHATCHET,
	UITEM_HELLSLAYER,
	UITEM_MESSERREAVER,
	UITEM_CRACKRUST,
	UITEM_JHOLMHAMM,
	//UITEM_CIVERBS,
	UITEM_CELESTSTAR,
	UITEM_BARANSTAR,
	UITEM_GNARLROOT,
	UITEM_CRANBASH,
	UITEM_SCHAEFHAMM,
	UITEM_DREAMFLANGE,
	UITEM_STAFFOFSHAD,
	UITEM_IMMOLATOR,
	UITEM_STORMSPIRE,
	UITEM_GLEAMSONG,
	UITEM_THUNDERCALL,
	UITEM_PROTECTOR,
	UITEM_NAJPUZZLE,
	UITEM_MINDCRY,
	UITEM_RODOFONAN,
	UITEM_SPIRITSHELM,
	UITEM_THINKINGCAP,
	UITEM_OVERLORDHELM,
	UITEM_FOOLSCREST,
	UITEM_GOTTERDAM,
	UITEM_ROYCIRCLET,
	UITEM_TORNFLESH,
	UITEM_GLADBANE,
	UITEM_RAINCLOAK,
	UITEM_LEATHAUT,
	UITEM_WISDWRAP,
	UITEM_SPARKMAIL,
	UITEM_SCAVCARAP,
	UITEM_NIGHTSCAPE,
	UITEM_NAJPLATE,
	UITEM_DEMONSPIKE,
	UITEM_DEFLECTOR,
	UITEM_SKULLSHLD,
	UITEM_DRAGONBRCH,
	UITEM_BLKOAKSHLD,
	UITEM_HOLYDEF,
	UITEM_STORMSHLD,
	UITEM_BRAMBLE,
	UITEM_REGHA,
	UITEM_BLEEDER,
	UITEM_CONSTRICT,
	UITEM_ENGAGE,
#ifdef HELLFIRE
	UITEM_GKNUCKLE,
	UITEM_MERCURING,
	UITEM_XORINERING,
	UITEM_KARIGRING,
	UITEM_MAGMARING,
	UITEM_MYSTICSRING,
	UITEM_THUNDERRING,
	UITEM_WARDINGAMU,
	UITEM_GNATSTING,
	UITEM_FLAMBEAU,
	UITEM_GLOOMARMOR,
	UITEM_BLITZEN,
	UITEM_THUNDERCLAP,
	UITEM_SHIROTACHI,
	UITEM_SOULEATER,
	UITEM_DIAMONDEDGE,
	//UITEM_BONEARMOR,
	//UITEM_DEMONARMOR,
	UITEM_ACOLYTEAMU,
	UITEM_GLADIATORING,
#endif
	NUM_UITEM
} _unique_items;

typedef enum plr_class {
	PC_WARRIOR   = 0x0,
	PC_ROGUE     = 0x1,
	PC_SORCERER  = 0x2,
#ifdef HELLFIRE
	PC_MONK      = 0x3,
	PC_BARD      = 0x4,
	PC_BARBARIAN = 0x5,
#endif
	NUM_CLASSES
} plr_class;

/*typedef enum _walk_path {
	WALK_NE   = 0x1,
	WALK_NW   = 0x2,
	WALK_SE   = 0x3,
	WALK_SW   = 0x4,
	WALK_N    = 0x5,
	WALK_E    = 0x6,
	WALK_S    = 0x7,
	WALK_W    = 0x8,
} _walk_path;*/

typedef enum player_skill_flags {
	SFLAG_ANY     = 0,
	SFLAG_DUNGEON = 1 << 0,
	SFLAG_MELEE   = 1 << 1,
	SFLAG_RANGED  = 1 << 2,
	SFLAG_BLOCK   = 1 << 3,
	SFLAG_RAGE    = 1 << 4,
} player_skill_flags;

typedef enum item_class {
	ICLASS_NONE   = 0,
	ICLASS_WEAPON = 1,
	ICLASS_ARMOR  = 2,
	ICLASS_MISC   = 3,
	ICLASS_GOLD   = 4,
	ICLASS_QUEST  = 5,
} item_class;

typedef enum item_drop_rate {
	IDROP_NEVER   = 0,
	IDROP_REGULAR = 1,
	IDROP_DOUBLE  = 2,
} item_drop_rate;

typedef enum item_base_bonus {
	IBONUS_NONE,
	IBONUS_POSITIVE,
	IBONUS_NEGATIVE
} item_base_bonus;

typedef enum item_special_effect {
	ISPL_NONE           = 0x00000000,
	ISPL_QUICKATTACK    = 0x00000001,
	ISPL_FASTATTACK     = 0x00000002,
	ISPL_FASTERATTACK   = 0x00000004,
	ISPL_FASTESTATTACK  = 0x00000008,
	ISPL_FASTRECOVER    = 0x00000010,
	ISPL_FASTERRECOVER  = 0x00000020,
	ISPL_FASTESTRECOVER = 0x00000040,
	ISPL_FASTBLOCK      = 0x00000080,
	ISPL_FASTWALK       = 0x00000100,
	ISPL_FASTERWALK     = 0x00000200,
	ISPL_FASTESTWALK    = 0x00000400,
	ISPL_FASTCAST       = 0x00000800,
	ISPL_FASTERCAST     = 0x00001000,
	ISPL_FASTESTCAST    = 0x00002000,
	ISPL_MULT_ARROWS    = 0x00004000,
	ISPL_DRAINLIFE      = 0x00008000,
	ISPL_KNOCKBACK      = 0x00010000,
	ISPL_NOHEALMON      = 0x00020000, /* unused */ 
	ISPL_THORNS         = 0x00040000,
	ISPL_INFRAVISION    = 0x00080000, /* unused */ 
	ISPL_ALLRESZERO     = 0x00100000,
	ISPL_NOMANA         = 0x80000000,
} item_special_effect;

// Logical equipment locations
typedef enum inv_item {
	INVITEM_HEAD       = 0,
	INVITEM_RING_LEFT  = 1,
	INVITEM_RING_RIGHT = 2,
	INVITEM_AMULET     = 3,
	INVITEM_HAND_LEFT  = 4,
	INVITEM_HAND_RIGHT = 5,
	INVITEM_CHEST      = 6,
	INVITEM_INV_FIRST  = 7,
	INVITEM_INV_LAST   = 46,
	INVITEM_BELT_FIRST = 47,
	INVITEM_BELT_LAST  = 54,
	NUM_INVELEM,
	INVITEM_NONE       = 0xFF
} inv_item;

typedef enum inv_body_loc {
	INVLOC_HEAD       = INVITEM_HEAD,
	INVLOC_RING_LEFT  = INVITEM_RING_LEFT,
	INVLOC_RING_RIGHT = INVITEM_RING_RIGHT,
	INVLOC_AMULET     = INVITEM_AMULET,
	INVLOC_HAND_LEFT  = INVITEM_HAND_LEFT,
	INVLOC_HAND_RIGHT = INVITEM_HAND_RIGHT,
	INVLOC_CHEST      = INVITEM_CHEST,
	NUM_INVLOC,
} inv_body_loc;

// identifiers for each of the inventory squares
// see https://github.com/sanctuary/graphics/blob/master/inventory.png
typedef enum inv_xy_slot {
	SLOTXY_HEAD_FIRST       = 0,
	SLOTXY_HEAD_LAST        = 3,
	SLOTXY_RING_LEFT        = 4,
	SLOTXY_RING_RIGHT       = 5,
	SLOTXY_AMULET           = 6,
	SLOTXY_HAND_LEFT_FIRST  = 7,
	SLOTXY_HAND_LEFT_LAST   = 12,
	SLOTXY_HAND_RIGHT_FIRST = 13,
	SLOTXY_HAND_RIGHT_LAST  = 18,
	SLOTXY_CHEST_FIRST      = 19,
	SLOTXY_CHEST_LAST       = 24,

	// regular inventory
	SLOTXY_INV_FIRST = 25,
	SLOTXY_INV_LAST  = 64,

	// belt items
	SLOTXY_BELT_FIRST = 65,
	SLOTXY_BELT_LAST  = 72,
	NUM_XY_SLOTS      = 73
} inv_xy_slot;

typedef enum inv_slot {
	SLOT_HEAD,
	SLOT_RING_LEFT,
	SLOT_RING_RIGHT,
	SLOT_AMULET,
	SLOT_HAND_LEFT,
	SLOT_HAND_RIGHT,
	SLOT_CHEST,
	SLOT_STORAGE,
	SLOT_BELT
} inv_slot;

typedef enum player_graphic_idx {
	PFIDX_STAND,
	PFIDX_WALK,
	PFIDX_ATTACK,
	PFIDX_HIT,
	PFIDX_FIRE,
	PFIDX_LIGHTNING,
	PFIDX_MAGIC,
	PFIDX_DEATH,
	PFIDX_BLOCK,
	NUM_PFIDXs
} player_graphic_idx;

typedef enum player_graphic {
	PFILE_STAND     = 1 << PFIDX_STAND,
	PFILE_WALK      = 1 << PFIDX_WALK,
	PFILE_ATTACK    = 1 << PFIDX_ATTACK,
	PFILE_HIT       = 1 << PFIDX_HIT,
	PFILE_FIRE      = 1 << PFIDX_FIRE,
	PFILE_LIGHTNING = 1 << PFIDX_LIGHTNING,
	PFILE_MAGIC     = 1 << PFIDX_MAGIC,
	PFILE_DEATH     = 1 << PFIDX_DEATH,
	PFILE_BLOCK     = 1 << PFIDX_BLOCK,
	// everything except PFILE_DEATH
	// 0b1_0111_1111
	PFILE_NONDEATH = 0x17F
} player_graphic;

typedef enum player_timer {
	PT_INFRAVISION,
	PT_RAGE,
	NUM_PLRTIMERS
} player_timer;

typedef enum anim_weapon_id {
	ANIM_ID_UNARMED        = 0x00,
	ANIM_ID_UNARMED_SHIELD = 0x01,
	ANIM_ID_SWORD          = 0x02,
	ANIM_ID_SWORD_SHIELD   = 0x03,
	ANIM_ID_BOW            = 0x04,
	ANIM_ID_AXE            = 0x05,
	ANIM_ID_MACE           = 0x06,
	ANIM_ID_MACE_SHIELD    = 0x07,
	ANIM_ID_STAFF          = 0x08
} anim_weapon_id;

typedef enum anim_armor_id {
	ANIM_ID_LIGHT_ARMOR  = 0x00,
	ANIM_ID_MEDIUM_ARMOR = 0x10,
	ANIM_ID_HEAVY_ARMOR  = 0x20
} anim_armor_id;

typedef enum shrine_gametype {
	SHRINETYPE_ANY    = 0,
	SHRINETYPE_SINGLE = 1,
	SHRINETYPE_MULTI  = 2,
} shrine_gametype;

typedef enum shrine_type {
	//SHRINE_MYSTERIOUS,
	SHRINE_HIDDEN,
	SHRINE_GLOOMY,
	SHRINE_WEIRD,
	SHRINE_RELIGIOUS,
	SHRINE_MAGICAL,
	SHRINE_STONE,
	SHRINE_CREEPY,
	//SHRINE_ENCHANTED,
	SHRINE_THAUMATURGIC,
	SHRINE_FASCINATING,
	SHRINE_SHIMMERING,
	SHRINE_CRYPTIC,
	SHRINE_ELDRITCH,
	SHRINE_EERIE,
	SHRINE_SPOOKY,
	SHRINE_QUIET,
	SHRINE_DIVINE,
	SHRINE_HOLY,
	SHRINE_SACRED,
	SHRINE_ORNATE,
	SHRINE_SPIRITUAL,
	//SHRINE_ABANDONED,
	SHRINE_SECLUDED,
	SHRINE_GLIMMERING,
	SHRINE_TAINTED,
	SHRINE_GLISTENING,
#ifdef HELLFIRE
	//SHRINE_OILY,
	//SHRINE_GLOWING,
	//SHRINE_MENDICANT,
	SHRINE_SPARKLING,
	SHRINE_SOLAR,
	SHRINE_MURPHYS,
#endif
	NUM_SHRINETYPE
} shrine_type;

typedef enum action_id {
	ACTION_NONE,
	ACTION_ATTACK,
	ACTION_ATTACKMON,
	ACTION_ATTACKPLR,
	ACTION_OPERATE,
	ACTION_DISARM,
	ACTION_RATTACK,
	ACTION_RATTACKMON,
	ACTION_RATTACKPLR,
	ACTION_SPELL,
	ACTION_SPELLMON,
	ACTION_SPELLPLR,
	ACTION_BLOCK,
	ACTION_PICKUPITEM,  // put item in hand (inventory screen open)
	ACTION_PICKUPAITEM, // put item in inventory
	ACTION_OPERATETK,   // operate via telekinesis
	ACTION_TALK,
	ACTION_WALK,        // Automatic walk when using gamepad
} action_id;

typedef enum dlrg_flag {
	DLRG_HDOOR     = 0x01,
	DLRG_VDOOR     = 0x02,
	DLRG_CHAMBER   = 0x40,
	DLRG_PROTECTED = 0x80,
} dlrg_flag;

typedef enum _arch_draw_type {
	RADT_NONE,
	RADT_LEFT,
	RADT_RIGHT,
} _arch_draw_type;

typedef enum movie_flag {
	MOV_SKIP       = 1 << 0, // Makes the video unskippable.
	MOV_LOOP       = 2 << 0, // Playback in loop.
} movie_flag;

typedef enum _artfonts {
	AF_SMALL     = 0,
	AF_SMALLGRAY = 1,
	AF_MED       = 2,
	AF_MEDGRAY   = 3,
	AF_BIG       = 4,
	AF_BIGGRAY   = 5,
	AF_HUGE      = 6,
	AF_HUGEGRAY  = 7,
} _artfonts;

typedef enum mpq_files {
	MPQ_DEVILX,
#ifdef HELLFIRE
	MPQ_DEVILUTIONX,
	MPQ_HF_OPT2,
	MPQ_HF_OPT1,
	MPQ_HF_VOICE,
	MPQ_HF_MUSIC,
	MPQ_HF_BARB,
	MPQ_HF_BARD,
	MPQ_HF_MONK,
	MPQ_HELLFIRE,
#endif
	MPQ_PATCH_RT,
	MPQ_DIABDAT,
	NUM_MPQS
} mpq_files;

typedef enum redraw_flags {
	REDRAW_HP_FLASK      = 1 << 0,
	REDRAW_MANA_FLASK    = 1 << 1,
	REDRAW_SPELL_ICON    = 1 << 2,
	REDRAW_CTRL_BUTTONS  = 1 << 3,
	REDRAW_SPEED_BAR     = 1 << 4,
	REDRAW_CTRL_PANEL    = 1 << 5,
	REDRAW_ALL = REDRAW_HP_FLASK | REDRAW_MANA_FLASK | REDRAW_SPELL_ICON
               | REDRAW_CTRL_BUTTONS | REDRAW_SPEED_BAR | REDRAW_CTRL_PANEL,
} redraw_flags;

typedef enum input_key {
	ACT_NONE,
	ACT_ACT,
	ACT_ALTACT,
	ACT_SKL0,
	ACT_SKL1,
	ACT_SKL2,
	ACT_SKL3,
	ACT_SKL4,
	ACT_SKL5,
	ACT_SKL6,
	ACT_SKL7,
	ACT_INV,
	ACT_CHAR,
	ACT_SKLBOOK,
	ACT_SKLLIST,
	ACT_ITEM0,
	ACT_ITEM1,
	ACT_ITEM2,
	ACT_ITEM3,
	ACT_ITEM4,
	ACT_ITEM5,
	ACT_ITEM6,
	ACT_ITEM7,
	ACT_AUTOMAP,
	ACT_MAPZ_IN,
	ACT_MAPZ_OUT,
	ACT_CLEARUI,
	ACT_UP,
	ACT_DOWN,
	ACT_LEFT,
	ACT_RIGHT,
	ACT_PGUP,
	ACT_PGDOWN,
	ACT_RETURN,
	ACT_TEAM,
	ACT_QUESTS,
	ACT_MSG0,
	ACT_MSG1,
	ACT_MSG2,
	ACT_MSG3,
	ACT_GAMMA_DEC,
	ACT_GAMMA_INC,
	ACT_ZOOM,
	ACT_VER,
	ACT_HELP,
	ACT_PAUSE,
	ACT_ESCAPE,
	ACT_TOOLTIP,
	NUM_ACTS
} input_key;

typedef enum SDL_LogCategory {
    SDL_LOG_CATEGORY_APPLICATION,
    SDL_LOG_CATEGORY_ERROR,
    SDL_LOG_CATEGORY_ASSERT,
    SDL_LOG_CATEGORY_SYSTEM,
    SDL_LOG_CATEGORY_AUDIO,
    SDL_LOG_CATEGORY_VIDEO,
    SDL_LOG_CATEGORY_RENDER,
    SDL_LOG_CATEGORY_INPUT,
    SDL_LOG_CATEGORY_TEST,
} SDL_LogCategory;

typedef enum SDL_LogPriority
{
    SDL_LOG_PRIORITY_VERBOSE = 1,
    SDL_LOG_PRIORITY_DEBUG,
    SDL_LOG_PRIORITY_INFO,
    SDL_LOG_PRIORITY_WARN,
    SDL_LOG_PRIORITY_ERROR,
    SDL_LOG_PRIORITY_CRITICAL,
    SDL_NUM_LOG_PRIORITIES
} SDL_LogPriority;

DEVILUTION_END_NAMESPACE
