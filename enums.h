/**
 * @file enums.h
 *
 * Various global enumerators.
 */

DEVILUTION_BEGIN_NAMESPACE

typedef enum item_indexes {
	IDI_GOLD,
	IDI_WARRSWORD,
	IDI_WARRSHLD,
	IDI_ROGUEBOW,
	IDI_SORCSTAFF,
	IDI_BARDSWORD,
	IDI_BARDDAGGER,
	IDI_MONKSTAFF,
	IDI_BARBCLUB,
	IDI_CLEAVER,
	IDI_GRISWOLD,
	IDI_HARCREST,
	IDI_SKCROWN,
	IDI_STEELVEIL,
	IDI_ARMOFVAL,
	IDI_INFRARING,
	IDI_OPTAMULET,
	IDI_TRING,
	IDI_LGTFORGE,
	IDI_ROCK,
	IDI_BANNER,
	IDI_GLDNELIX,
	IDI_ANVIL,
	IDI_MUSHROOM,
	IDI_BRAIN,
	IDI_FUNGALTM,
	IDI_SPECELIX,
	IDI_BLDSTONE,
	IDI_LAZSTAFF,
	IDI_FANG,
	IDI_EAR,
	IDI_IDENTIFY,
	IDI_PORTAL,
	IDI_RESURRECT,
	IDI_RUNEBOMB,
	IDI_THEODORE,
	IDI_NOTE1,
	IDI_NOTE2,
	IDI_NOTE3,
	IDI_FULLNOTE,
	IDI_BROWNSUIT,
	IDI_GRAYSUIT,
	IDI_CAP,
	IDI_RNDDROP_FIRST = IDI_CAP,
	IDI_HEAL       = 0x48,
	IDI_FULLHEAL   = 0x49,
	IDI_MANA       = 0x4A,
	IDI_FULLMANA   = 0x4B,
	IDI_REJUV      = 0x4C,
	IDI_FULLREJUV  = 0x4D,
	IDI_BOOK1      = 0x5E,
	IDI_BOOK4      = 0x61,
	IDI_CLUB       = 0x7A,
	IDI_DROPSHSTAFF= 0x86,
#ifdef HELLFIRE
	NUM_IDI        = 0x9A,
#else
	NUM_IDI        = 0x93,
#endif
	IDI_PHOLDER    = 0xFFFE,
	IDI_NONE       = 0xFFFF
} item_indexes;

typedef enum unique_item_indexes {
	UITEM_CLEAVER,
	UITEM_SKCROWN,
	UITEM_INFRARING,
	UITEM_OPTAMULET,
	UITEM_TRING,
	UITEM_HARCREST,
	UITEM_STEELVEIL,
	UITEM_ARMOFVAL,
	UITEM_GRISWOLD,
#ifdef HELLFIRE
	UITEM_BOVINE,
#else
	UITEM_LGTFORGE,
#endif
	UITEM_RIFTBOW,
	UITEM_NEEDLER,
	UITEM_CELESTBOW,
	//UITEM_DEADLYHUNT,
	UITEM_BOWOFDEAD,
	UITEM_BLKOAKBOW,
	UITEM_FLAMEDART,
	UITEM_FLESHSTING,
	UITEM_WINDFORCE,
	UITEM_EAGLEHORN,
	UITEM_GONNAGALDIRK,
	UITEM_DEFENDER,
	UITEM_GRYPHONCLAW,
	UITEM_BLACKRAZOR,
	UITEM_GIBBOUSMOON,
	UITEM_ICESHANK,
	UITEM_EXECUTIONER,
	UITEM_BONESAW,
	UITEM_SHADHAWK,
	UITEM_WIZSPIKE,
	UITEM_LGTSABRE,
	UITEM_FALCONTALON,
	UITEM_INFERNO,
	UITEM_DOOMBRINGER,
	UITEM_GRIZZLY,
	UITEM_GRANDFATHER,
	UITEM_MANGLER,
	UITEM_SHARPBEAK,
	//UITEM_BLOODLSLAYER,
	UITEM_CELESTAXE,
	UITEM_WICKEDAXE,
	UITEM_STONECLEAV,
	UITEM_AGUHATCHET,
	UITEM_HELLSLAYER,
	UITEM_MESSERREAVER,
	UITEM_CRACKRUST,
	UITEM_JHOLMHAMM,
	//UITEM_CIVERBS,
	UITEM_CELESTSTAR,
	UITEM_BARANSTAR,
	UITEM_GNARLROOT,
	UITEM_CRANBASH,
	UITEM_SCHAEFHAMM,
	UITEM_DREAMFLANGE,
	UITEM_STAFFOFSHAD,
	UITEM_IMMOLATOR,
	UITEM_STORMSPIRE,
	UITEM_GLEAMSONG,
	UITEM_THUNDERCALL,
	UITEM_PROTECTOR,
	UITEM_NAJPUZZLE,
	UITEM_MINDCRY,
	UITEM_RODOFONAN,
	UITEM_SPIRITSHELM,
	UITEM_THINKINGCAP,
	UITEM_OVERLORDHELM,
	UITEM_FOOLSCREST,
	UITEM_GOTTERDAM,
	UITEM_ROYCIRCLET,
	UITEM_TORNFLESH,
	UITEM_GLADBANE,
	UITEM_RAINCLOAK,
	UITEM_LEATHAUT,
	UITEM_WISDWRAP,
	UITEM_SPARKMAIL,
	UITEM_SCAVCARAP,
	UITEM_NIGHTSCAPE,
	UITEM_NAJPLATE,
	UITEM_DEMONSPIKE,
	UITEM_DEFLECTOR,
	UITEM_SKULLSHLD,
	UITEM_DRAGONBRCH,
	UITEM_BLKOAKSHLD,
	UITEM_HOLYDEF,
	UITEM_SPIRITSHLD,
	UITEM_STORMSHLD,
	UITEM_BRAMBLE,
	UITEM_TYRAELGIFT,
	UITEM_LILITHCOLLAR,
	UITEM_BLEEDER,
	UITEM_CONSTRICT,
	UITEM_ENGAGERING,
	UITEM_DESTRING,
	UITEM_RAINBOWRING,
#ifdef HELLFIRE
	UITEM_GKNUCKLE,
	UITEM_MERCURING,
	UITEM_XORINERING,
	UITEM_KARIGRING,
	UITEM_MAGMARING,
	UITEM_MYSTICSRING,
	UITEM_THUNDERRING,
	UITEM_WARDINGAMU,
	UITEM_GNATSTING,
	UITEM_FLAMBEAU,
	UITEM_GLOOMARMOR,
	UITEM_BLITZEN,
	UITEM_THUNDERCLAP,
	UITEM_SHIROTACHI,
	UITEM_SOULEATER,
	UITEM_DIAMONDEDGE,
	//UITEM_BONEARMOR,
	//UITEM_DEMONARMOR,
	UITEM_ACOLYTEAMU,
	UITEM_GLADIATORING,
#endif
	NUM_UITEM
} unique_item_indexes;

typedef enum item_class {
	ICLASS_NONE,
	ICLASS_WEAPON,
	ICLASS_ARMOR,
	ICLASS_MISC,
	ICLASS_GOLD,
	ICLASS_QUEST,
} item_class;

typedef enum item_equip_type {
	ILOC_UNEQUIPABLE,
	ILOC_ONEHAND,
	ILOC_TWOHAND,
	ILOC_ARMOR,
	ILOC_HELM,
	ILOC_RING,
	ILOC_AMULET,
	ILOC_BELT,
} item_equip_type;

typedef enum item_misc_id {
	IMISC_NONE,
	IMISC_HEAL,
	IMISC_FULLHEAL,
	IMISC_MANA,
	IMISC_FULLMANA,
	IMISC_REJUV,
	IMISC_FULLREJUV,
	IMISC_SCROLL,
	IMISC_BOOK,
	IMISC_UNIQUE,
	IMISC_EAR,
	IMISC_SPECELIX,
	IMISC_OILQLTY,
	IMISC_OILFIRST  = IMISC_OILQLTY,
	IMISC_OILZEN,
	IMISC_OILSTR,
	IMISC_OILDEX,
	IMISC_OILVIT,
	IMISC_OILMAG,
	IMISC_OILRESIST,
	IMISC_OILCHANCE,
	IMISC_OILCLEAN,
	IMISC_OILLAST = IMISC_OILCLEAN,
	//IMISC_MAPOFDOOM,
	IMISC_RUNE,
	IMISC_NOTE,
	IMISC_INVALID   = -1,
} item_misc_id;

typedef enum item_type {
	ITYPE_NONE,
	ITYPE_SWORD,
	ITYPE_AXE,
	ITYPE_BOW,
	ITYPE_MACE,
	ITYPE_STAFF,
	ITYPE_SHIELD,
	ITYPE_HELM,
	ITYPE_LARMOR,
	ITYPE_MARMOR,
	ITYPE_HARMOR,
	ITYPE_MISC,
	ITYPE_GOLD,
	ITYPE_RING,
	ITYPE_AMULET,
	ITYPE_PLACEHOLDER,
} item_type;

typedef enum item_damage_type {
	IDAM_NONE,
	IDAM_SLASH,
	IDAM_BLUNT,
	IDAM_SB_MIX,
	IDAM_PUNCTURE,
} item_damage_type;

typedef enum item_quality {
	ITEM_QUALITY_NORMAL,
	ITEM_QUALITY_MAGIC,
	ITEM_QUALITY_UNIQUE,
} item_quality;

typedef enum unique_item_type {
	UITYPE_NONE,
	UITYPE_SHORTBOW,
	UITYPE_LONGBOW,
	UITYPE_HUNTBOW,
	UITYPE_COMPBOW,
	UITYPE_WARBOW,
	UITYPE_BATTLEBOW,
	UITYPE_DAGGER,
	UITYPE_FALCHION,
	UITYPE_CLAYMORE,
	UITYPE_BROADSWR,
	UITYPE_SABRE,
	UITYPE_SCIMITAR,
	UITYPE_LONGSWR,
	UITYPE_BASTARDSWR,
	UITYPE_TWOHANDSWR,
	UITYPE_GREATSWR,
	UITYPE_CLEAVER,
	UITYPE_LARGEAXE,
	UITYPE_BROADAXE,
	UITYPE_SMALLAXE,
	UITYPE_BATTLEAXE,
	UITYPE_GREATAXE,
	UITYPE_MACE,
	UITYPE_MORNSTAR,
	UITYPE_SPIKCLUB,
	UITYPE_MAUL,
	UITYPE_WARHAMMER,
	UITYPE_FLAIL,
	UITYPE_LONGSTAFF,
	UITYPE_SHORTSTAFF,
	UITYPE_COMPSTAFF,
	UITYPE_QUARSTAFF,
	UITYPE_WARSTAFF,
	UITYPE_SKULLCAP,
	UITYPE_HELM,
	UITYPE_GREATHELM,
	UITYPE_CROWN,
	UITYPE_38, // unused
	UITYPE_RAGS,
	UITYPE_STUDARMOR,
	UITYPE_CLOAK,
	UITYPE_ROBE,
	UITYPE_CHAINMAIL,
	UITYPE_LEATHARMOR,
	UITYPE_BREASTPLATE,
	UITYPE_CAPE,
	UITYPE_PLATEMAIL,
	UITYPE_FULLPLATE,
	UITYPE_BUCKLER,
	UITYPE_SMALLSHIELD,
	UITYPE_LARGESHIELD,
	UITYPE_KITESHIELD,
	UITYPE_GOTHSHIELD,
	UITYPE_RING,
	UITYPE_TOWERSHIELD,
	UITYPE_AMULET,
	UITYPE_SKCROWN,
	UITYPE_INFRARING,
	UITYPE_OPTAMULET,
	UITYPE_TRING,
	UITYPE_HARCREST,
	UITYPE_MAPOFDOOM, // 'unused'
	UITYPE_ELIXIR, // 'unused'
	UITYPE_ARMOFVAL,
	UITYPE_STEELVEIL,
	UITYPE_GRISWOLD,
	UITYPE_LGTFORGE, // 'unused'
	UITYPE_LAZSTAFF, // 'unused'
	UITYPE_BOVINE, // hellfire-only
} unique_item_type;

typedef enum item_effect_type {
	IPL_TOHIT,
	IPL_DAMP,
	IPL_TOHIT_DAMP,
	IPL_ACP,
	IPL_FIRERES,
	IPL_LIGHTRES,
	IPL_MAGICRES,
	IPL_ACIDRES,
	IPL_ALLRES,
	IPL_CRITP,
	IPL_SKILLLVL,
	IPL_SKILLLEVELS,
	IPL_CHARGES,
	IPL_FIREDAM,
	IPL_LIGHTDAM,
	IPL_MAGICDAM,
	IPL_ACIDDAM,
	IPL_STR,
	IPL_MAG,
	IPL_DEX,
	IPL_VIT,
	IPL_ATTRIBS,
	IPL_GETHIT,
	IPL_LIFE,
	IPL_MANA,
	IPL_DUR,
	IPL_DUR_CURSE,
	IPL_INDESTRUCTIBLE,
	IPL_LIGHT,
	IPL_INVCURS,
	//IPL_THORNS,
	IPL_NOMANA,
	IPL_KNOCKBACK,
	IPL_STUN,
	//IPL_NOHEALMON,
	IPL_NO_BLEED,
	IPL_BLEED,
	IPL_STEALMANA,
	IPL_STEALLIFE,
	IPL_PENETRATE_PHYS,
	IPL_FASTATTACK,
	IPL_FASTRECOVER,
	IPL_FASTBLOCK,
	IPL_DAMMOD,
	IPL_SETDAM,
	IPL_SETDUR,
	IPL_NOMINSTR,
	IPL_SPELL,
	IPL_ONEHAND,
	IPL_ALLRESZERO,
	IPL_DRAINLIFE,
	//IPL_INFRAVISION,
	IPL_SETAC,
	IPL_ACMOD,
	IPL_CRYSTALLINE,
	IPL_MANATOLIFE,     /* only used in hellfire */
	IPL_LIFETOMANA,     /* only used in hellfire */
	IPL_FASTCAST,
	IPL_FASTWALK,
	IPL_INVALID          = 0xFF,
} item_effect_type;

typedef enum affix_item_type {
	PLT_MISC   = 1 << 1,
	PLT_BOW    = 1 << 2,
	PLT_STAFF  = 1 << 3,
	PLT_MELEE  = 1 << 4,
	PLT_SHLD   = 1 << 5,
	PLT_ARMO   = 1 << 6,
	PLT_CHRG   = 1 << 7,
	PLT_LARMOR = 1 << 8,
	PLT_MARMOR = 1 << 9,
	PLT_HARMOR = 1 << 10,
} affix_item_type;

typedef enum item_base_bonus {
	IBONUS_NONE,
	IBONUS_POSITIVE,
	IBONUS_NEGATIVE
} item_base_bonus;

typedef enum item_special_effect {
	ISPL_NONE           = 0x00000000,
	ISPL_QUICKATTACK    = 0x00000001,
	ISPL_FASTATTACK     = 0x00000002,
	ISPL_FASTERATTACK   = 0x00000004,
	ISPL_FASTESTATTACK  = 0x00000008,
	ISPL_FASTRECOVER    = 0x00000010,
	ISPL_FASTERRECOVER  = 0x00000020,
	ISPL_FASTESTRECOVER = 0x00000040,
	ISPL_FASTBLOCK      = 0x00000080,
	ISPL_FASTWALK       = 0x00000100,
	ISPL_FASTERWALK     = 0x00000200,
	ISPL_FASTESTWALK    = 0x00000400,
	ISPL_FASTCAST       = 0x00000800,
	ISPL_FASTERCAST     = 0x00001000,
	ISPL_FASTESTCAST    = 0x00002000,
	//ISPL_MULT_ARROWS    = 0x00004000,
	ISPL_DRAINLIFE      = 0x00008000,
	ISPL_KNOCKBACK      = 0x00010000, // knock back on hit
	//ISPL_NOHEALMON      = 0x00020000,
	//ISPL_THORNS         = 0x00040000,
	//ISPL_INFRAVISION    = 0x00080000,
	ISPL_ALLRESZERO     = 0x00100000,
	ISPL_LIFETOMANA     = 0x00200000,
	ISPL_MANATOLIFE     = 0x00400000,
	ISPL_PENETRATE_PHYS = 0x00800000,
	ISPL_NO_BLEED       = 0x20000000, // immune to bleeding
	ISPL_BLEED          = 0x20000000, // increased chance to bleed
	ISPL_STUN           = 0x40000000, // increased chance to stun
	ISPL_NOMANA         = 0x80000000,
	ISPL_HITFLAGS_MASK  = 0xFFFF0000, // mask to prepare hitflags from pIFlags
	ISPL_FAKE_FORCE_STUN= 0x00000001, // fake flag to indicate hits with forced stun effect (against players)
	ISPL_FAKE_CAN_BLEED = 0x00000002, // fake flag to indicate hits which might cause bleeding
} item_special_effect;


/// Item graphic IDs; frame_num-11 of objcurs.cel.
typedef enum item_cursor_graphic {
	ICURS_POTION_OF_FULL_MANA         = 0,
	ICURS_SCROLL_OF                   = 1,
	ICURS_GOLD_SMALL                  = 4,
	ICURS_GOLD_MEDIUM                 = 5,
	ICURS_GOLD_LARGE                  = 6,
	ICURS_GOLD_RING                   = 7,
	ICURS_RING_BLEEDER                = 8,
	ICURS_RING_BRAMBLE                = 9,
	ICURS_RING_OF_TRUTH               = 10,
	ICURS_AMULET_LILITH               = 11,
	ICURS_RING                        = 12,
	ICURS_RING_DESTRUCTION            = 13,
	ICURS_RING_CONSTRICTING           = 14,
	ICURS_SPECTRAL_ELIXIR             = 15,
	ICURS_OIL_OF_CHANCE               = 16,
	ICURS_GOLDEN_ELIXIR               = 17,
	ICURS_EMPYREAN_BAND               = 18,
	ICURS_EAR_SORCERER                = 19,
	ICURS_EAR_WARRIOR                 = 20,
	ICURS_EAR_ROGUE                   = 21,
	ICURS_BLOOD_STONE                 = 25,
	ICURS_OIL_OF_DEXTERITY            = 29,
	ICURS_OIL_OF_STRENGTH             = 30,
	ICURS_OIL_OF_CLEANSING            = 31,
	ICURS_POTION_OF_HEALING           = 32,
	ICURS_POTION_OF_FULL_REJUVENATION = 33,
	ICURS_OIL_OF_VITALITY             = 34,
	ICURS_POTION_OF_FULL_HEALING      = 35,
	ICURS_OIL_OF_DAM_ATTR             = 36,
	ICURS_POTION_OF_REJUVENATION      = 37,
	ICURS_OIL_OF_MAGIC                = 38,
	ICURS_POTION_OF_MANA              = 39,
	ICURS_BRAIN                       = 40,
	ICURS_FANG                        = 42,
	ICURS_OPTIC_AMULET                = 44,
	ICURS_AMULET                      = 45,
	ICURS_AMULET_TYRAEL               = 48,
	ICURS_WIZARDSPIKE                 = 50,
	ICURS_DAGGER                      = 51,
	ICURS_BLACK_RAZOR                 = 53,
	ICURS_GONNAGAL_DIRK               = 54,
	ICURS_KATAR                       = 55,
	ICURS_BLADE                       = 56,
	ICURS_BASTARD_SWORD               = 57,
	ICURS_EXECUTIONER_BLADE           = 58,
	ICURS_MACE                        = 59,
	ICURS_LONG_SWORD                  = 60,
	ICURS_BROAD_SWORD                 = 61,
	ICURS_FALCHION                    = 62,
	ICURS_MORNING_STAR                = 63,
	ICURS_SHORT_SWORD                 = 64,
	ICURS_CLAYMORE                    = 65,
	ICURS_CLUB                        = 66,
	ICURS_SABRE                       = 67,
	ICURS_FALCON_GRYPHON              = 68,
	ICURS_SPIKED_CLUB                 = 70,
	ICURS_SCIMITAR                    = 72,
	ICURS_POIGNARD                    = 73,
	ICURS_FULL_HELM                   = 75,
	ICURS_MAGIC_ROCK                  = 76,
	ICURS_HELM_OF_SPIRITS             = 77,
	ICURS_THE_UNDEAD_CROWN            = 78,
	ICURS_ROYAL_CIRCLET               = 79,
	ICURS_FOOL_CREST                  = 80,
	ICURS_HARLEQUIN_CREST             = 81,
	ICURS_HELM                        = 82,
	ICURS_BUCKLER                     = 83,
	ICURS_WINGED_HELM                 = 84,
	ICURS_VEIL_OF_STEEL               = 85,
	ICURS_BOOK_GRAY                   = 86,
	ICURS_BOOK_RED                    = 87,
	ICURS_BOOK_BLUE                   = 88,
	ICURS_BLACK_MUSHROOM              = 89,
	ICURS_SKULL_CAP                   = 90,
	ICURS_CAP                         = 91,
	ICURS_FLESH_OF_SOULS              = 92,
	ICURS_THINKING_CAP                = 93,
	ICURS_CROWN                       = 95,
	ICURS_MAP_OF_THE_STARS            = 96,
	ICURS_FUNGAL_TOME                 = 97,
	ICURS_GREAT_HELM                  = 98,
	ICURS_OVERLORD_HELM               = 99,
	ICURS_STORMSHIELD                 = 100,
	ICURS_BATTLE_AXE                  = 101,
	ICURS_HUNTERS_BOW                 = 102,
	ICURS_FIELD_PLATE                 = 103,
	ICURS_STONECLEAVER                = 104,
	ICURS_SMALL_SHIELD                = 105,
	ICURS_CLEAVER                     = 106,
	ICURS_STUDDED_LEATHER_ARMOR       = 107,
	ICURS_BATTLE_BOW                  = 108,
	ICURS_SHORT_STAFF                 = 109,
	ICURS_TWO_HANDED_SWORD            = 110,
	ICURS_CHAIN_MAIL                  = 111,
	ICURS_SMALL_AXE                   = 112,
	ICURS_KITE_SHIELD                 = 113,
	ICURS_SCALE_MAIL                  = 114,
	ICURS_SPIRIT_SHIELD               = 115,
	ICURS_SKULL_SHIELD                = 116,
	ICURS_DRAGON_SHIELD               = 117,
	ICURS_SHORT_BOW                   = 118,
	ICURS_LONG_WAR_BOW                = 119,
	//ICURS_CELESTIAL_BOW               = 120,
	ICURS_WAR_HAMMER                  = 121,
	ICURS_MAUL                        = 122,
	ICURS_LONG_STAFF                  = 123,
	ICURS_WAR_STAFF                   = 124,
	ICURS_TAVERN_SIGN                 = 126,
	ICURS_HARD_LEATHER_ARMOR          = 127,
	ICURS_RAGS                        = 128,
	ICURS_QUILTED_ARMOR               = 129,
	ICURS_FLAIL                       = 131,
	ICURS_TOWER_SHIELD                = 132,
	ICURS_COMPOSITE_BOW               = 133,
	ICURS_GREAT_SWORD                 = 134,
	ICURS_LEATHER_ARMOR               = 135,
	ICURS_SPLINT_MAIL                 = 136,
	ICURS_ROBE                        = 137,
	ICURS_UCLOAK                      = 138,
	ICURS_TRELLISED_ARMOR             = 139,
	ICURS_ANVIL_OF_FURY               = 140,
	ICURS_BROAD_AXE                   = 141,
	ICURS_LARGE_AXE                   = 142,
	ICURS_GREAT_AXE                   = 143,
	ICURS_AXE                         = 144,
	ICURS_HOLY_DEFENDER               = 146,
	ICURS_LARGE_SHIELD                = 147,
	ICURS_GOTHIC_SHIELD               = 148,
	ICURS_CLOAK                       = 149,
	ICURS_CAPE                        = 150,
	ICURS_FULL_PLATE_MAIL             = 151,
	ICURS_GOTHIC_PLATE                = 152,
	ICURS_BREAST_PLATE                = 153,
	ICURS_RING_MAIL                   = 154,
	ICURS_STAFF_OF_LAZARUS            = 155,
	ICURS_ARKAINES_VALOR              = 157,
	ICURS_THE_NEEDLER                 = 158,
	ICURS_NAJ_PLATE                   = 159,
	ICURS_THE_GRIZZLY                 = 160,
	ICURS_THE_GRANDFATHER             = 161,
	ICURS_THE_PROTECTOR               = 162,
	ICURS_MESSERSCHMIDT               = 163,
	ICURS_WINDFORCE                   = 164,
	ICURS_SHORT_WAR_BOW               = 165,
	ICURS_COMPOSITE_STAFF             = 166,
	ICURS_SHORT_BATTLE_BOW            = 167,
#ifdef HELLFIRE
	ICURS_RING_XORINE                 = 168,
	ICURS_AMULET_WARDING              = 170,
	ICURS_RING_KARIK                  = 173,
	ICURS_RING_MERCURIAL              = 176,
	ICURS_RING_THUNDER                = 177,
	ICURS_RING_GIANTS                 = 179,
	ICURS_AURIC_AMULET                = 180,
	ICURS_RING_MYSTICS                = 181,
	ICURS_AMULET_ACOLYTE              = 183,
	ICURS_RING_MAGMA                  = 184,
	ICURS_RING_GLADIATOR              = 186,
	ICURS_RUNE_BOMB                   = 187,
	ICURS_THEODORE                    = 188,
	ICURS_TORN_NOTE_1                 = 189,
	ICURS_TORN_NOTE_2                 = 190,
	ICURS_TORN_NOTE_3                 = 191,
	ICURS_RECONSTRUCTED_NOTE          = 192,
	ICURS_RUNE_OF_FIRE                = 193,
	ICURS_RUNE_OF_WAVE                = 194,
	ICURS_RUNE_OF_LIGHTNING           = 195,
	ICURS_RUNE_OF_NOVA                = 196,
	ICURS_RUNE_OF_STONE               = 197,
	ICURS_GRAY_SUIT                   = 198,
	ICURS_BROWN_SUIT                  = 199,
	ICURS_SOUL_EATER                  = 200,
	ICURS_GLOOMARMOR                  = 203,
	ICURS_BONEARMOR                   = 204,
	ICURS_THUNDERCLAP                 = 205,
	ICURS_DIAMONDEDGE                 = 206,
	ICURS_FLAMBEAU                    = 209,
	ICURS_GNAT_STING                  = 210,
	ICURS_BLITZEN                     = 219,
	ICURS_DEMONARMOR                  = 225,
	ICURS_BOVINE                      = 226,
#endif
	NUM_ICURS
} item_cursor_graphic;

typedef enum item_gfx_id {
	IFILE_ARMOR2,
	IFILE_AXE,
	IFILE_FBTTLE,
	IFILE_BOW,
	IFILE_GOLDFLIP,
	IFILE_HELMUT,
	IFILE_MACE,
	IFILE_SHIELD,
	IFILE_SWRDFLIP,
	IFILE_ROCK,
	IFILE_CLEAVER,
	IFILE_STAFF,
	IFILE_RING,
	IFILE_CROWNF,
	IFILE_LARMOR,
	IFILE_WSHIELD,
	IFILE_SCROLL,
	IFILE_FPLATEAR,
	IFILE_FBOOK,
	//IFILE_FOOD,
	IFILE_FBTTLEBB,
	IFILE_FBTTLEDY,
	IFILE_FBTTLEOR,
	IFILE_FBTTLEBR,
	IFILE_FBTTLEBL,
	IFILE_FBTTLEBY,
	IFILE_FBTTLEWH,
	IFILE_FBTTLEDB,
	IFILE_FEAR,
	IFILE_FBRAIN,
	//IFILE_FHEART,
	IFILE_FMUSH,
	IFILE_INNSIGN,
	IFILE_BLDSTN,
	IFILE_FANVIL,
	IFILE_FLAZSTAF,
#ifdef HELLFIRE
	IFILE_BOMBS1,
	IFILE_HALFPS1,
	IFILE_WHOLEPS1,
	IFILE_RUNES1,
	IFILE_TEDDYS1,
	IFILE_COWS1,
	IFILE_DONKYS1,
	IFILE_MOOSES1,
#endif
	NUM_IFILE
} item_gfx_id;

/*
 First 8 bits store level
 9-10th bit stores info if item is from a specific source (griswold, wirt, adria, pepin and user crafted) 
 11-12th bit stores the drop quality (normal, good or unique)

 CF_TOWN is combining all source flags and indicates if item has been bought from a NPC or created via crafting
 */
typedef enum icreateinfo_loc {
	CFL_NONE,
	CFL_SMITH,
	CFL_SMITHPREMIUM,
	CFL_BOY,
	CFL_WITCH,
	CFL_HEALER,
	CFL_CRAFTED,
} icreateinfo_loc;
typedef enum icreateinfo_drop_quality {
	CFDQ_NONE,
	CFDQ_NORMAL,
	CFDQ_GOOD,
	CFDQ_UNIQUE,
} icreateinfo_drop_quality;
typedef enum icreateinfo_flag {
	CF_LEVEL        = (1 << 8) - 1,
	CF_SMITH        = CFL_SMITH << 8,
	CF_SMITHPREMIUM = CFL_SMITHPREMIUM << 8,
	CF_BOY          = CFL_BOY << 8,
	CF_WITCH        = CFL_WITCH << 8,
	CF_HEALER       = CFL_HEALER << 8,
	CF_CRAFTED      = CFL_CRAFTED << 8,
	CF_DROP_NORMAL  = CFDQ_NORMAL << 11,
	CF_DROP_GOOD    = CFDQ_GOOD << 11,
	CF_DROP_UNIQUE  = CFDQ_UNIQUE << 11,

	CF_TOWN         = 7 << 8,
	CF_DROP_QUALITY = 3 << 11,
} icreateinfo_flag;

typedef enum icreate_mode {
	ICM_DELTA,    // floor item, generated with the level
	ICM_DUMMY,    // spawn item, discarded
	ICM_SEND,     // spawn item on the floor, sent to (other) players
	ICM_SEND_FLIP // spawn item, sent to (other) players
} icreate_mode;

// Logical equipment locations
typedef enum inv_item {
	INVITEM_BODY_FIRST = 0,
	INVITEM_HEAD       = 0,
	INVITEM_RING_LEFT  = 1,
	INVITEM_RING_RIGHT = 2,
	INVITEM_AMULET     = 3,
	INVITEM_HAND_LEFT  = 4,
	INVITEM_HAND_RIGHT = 5,
	INVITEM_CHEST      = 6,
	INVITEM_INV_FIRST  = 7,
	INVITEM_INV_LAST   = 46,
	INVITEM_BELT_FIRST = 47,
	INVITEM_BELT_LAST  = 54,
	NUM_INVELEM,
	INVITEM_NONE       = 0xFF
} inv_item;

typedef enum inv_body_loc {
	INVLOC_HEAD       = INVITEM_HEAD,
	INVLOC_RING_LEFT  = INVITEM_RING_LEFT,
	INVLOC_RING_RIGHT = INVITEM_RING_RIGHT,
	INVLOC_AMULET     = INVITEM_AMULET,
	INVLOC_HAND_LEFT  = INVITEM_HAND_LEFT,
	INVLOC_HAND_RIGHT = INVITEM_HAND_RIGHT,
	INVLOC_CHEST      = INVITEM_CHEST,
	NUM_INVLOC,
} inv_body_loc;

// identifiers for each of the inventory squares
// see https://github.com/sanctuary/graphics/blob/master/inventory.png
typedef enum inv_xy_slot {
	SLOTXY_HEAD_FIRST       = 0,
	SLOTXY_HEAD_LAST        = 3,
	SLOTXY_RING_LEFT        = 4,
	SLOTXY_RING_RIGHT       = 5,
	SLOTXY_AMULET           = 6,
	SLOTXY_HAND_LEFT_FIRST  = 7,
	SLOTXY_HAND_LEFT_LAST   = 12,
	SLOTXY_HAND_RIGHT_FIRST = 13,
	SLOTXY_HAND_RIGHT_LAST  = 18,
	SLOTXY_CHEST_FIRST      = 19,
	SLOTXY_CHEST_LAST       = 24,

	// regular inventory
	SLOTXY_INV_FIRST = 25,
	SLOTXY_INV_LAST  = 64,

	// belt items
	SLOTXY_BELT_FIRST = 65,
	SLOTXY_BELT_LAST  = 72,
	NUM_XY_SLOTS      = 73
} inv_xy_slot;

typedef enum inv_slot {
	SLOT_HEAD,
	SLOT_RING_LEFT,
	SLOT_RING_RIGHT,
	SLOT_AMULET,
	SLOT_HAND_LEFT,
	SLOT_HAND_RIGHT,
	SLOT_CHEST,
	SLOT_STORAGE,
	SLOT_BELT
} inv_slot;

typedef enum _sfx_id {
	PS_WALK1,
	//PS_WALK2,
	//PS_WALK3,
	//PS_WALK4,
	PS_BFIRE,
	//PS_FMAG,
	//PS_TMAG,
	//PS_LGHIT,
	//PS_LGHIT1,
	PS_SWING,
	PS_SWING2,
	PS_DEAD,
	//IS_STING1,
	//IS_FBALLBOW,
	IS_QUESTDN,
	//IS_ARMRFKD,
	IS_BARLFIRE,
	IS_BARREL,
	IS_POPPOP8,
	IS_POPPOP5,
	IS_POPPOP3,
	IS_POPPOP2,
	IS_CRCLOS,
	IS_CROPEN,
	//IS_BHIT,
	//IS_BHIT1,
	IS_CHEST,
	IS_DOORCLOS,
	IS_DOOROPEN,
	IS_FANVL,
	IS_FAXE,
	IS_FBLST,
	IS_FBODY,
	IS_FBOOK,
	IS_FBOW,
	IS_FCAP,
	IS_FHARM,
	IS_FLARM,
	//IS_FMAG,
	//IS_FMAG1,
	IS_FMUSH,
	IS_FPOT,
	IS_FRING,
	IS_FROCK,
	IS_FSCRL,
	IS_FSHLD,
	//IS_FSIGN,
	IS_FSTAF,
	IS_FSWOR,
	IS_GOLD,
	//IS_HLMTFKD,
	IS_IANVL,
	IS_IAXE,
	IS_IBLST,
	IS_IBODY,
	IS_IBOOK,
	IS_IBOW,
	IS_ICAP,
	IS_IGRAB,
	IS_IHARM,
	IS_ILARM,
	IS_IMUSH,
	IS_IPOT,
	IS_IRING,
	IS_IROCK,
	IS_ISCROL,
	IS_ISHIEL,
	IS_ISIGN,
	IS_ISTAF,
	IS_ISWORD,
	IS_LEVER,
	IS_MAGIC,
	IS_MAGIC1,
	IS_RBOOK,
	IS_SARC,
	//IS_SHLDFKD,
	//IS_SWRDFKD,
	IS_TITLEMOV,
	IS_TITLSLCT,
	SFX_SILENCE,
	IS_TRAP,
	//IS_CAST1,
	//IS_CAST10,
	//IS_CAST12,
	IS_CAST2,
	//IS_CAST3,
	IS_CAST4,
	//IS_CAST5,
	IS_CAST6,
	//IS_CAST7,
	IS_CAST8,
	//IS_CAST9,
	//LS_HEALING,
	IS_REPAIR,
	LS_ACID,
	LS_ACIDS,
	//LS_APOC,
	//LS_ARROWALL,
	//LS_BLODBOIL,
	LS_BLODSTAR,
	//LS_BLSIMPT,
	LS_BONESP,
	//LS_BSIMPCT,
	LS_CALDRON,
	LS_CBOLT,
	//LS_CHLTNING,
	//LS_DSERP,
	LS_ELECIMP1,
	LS_ELEMENTL,
	LS_ETHEREAL,
	//LS_FBALL,
	LS_FBOLT1,
	//LS_FBOLT2,
	//LS_FIRIMP1,
	LS_FIRIMP2,
	LS_FLAMWAVE,
	//LS_FLASH,
	LS_FOUNTAIN,
	LS_GOLUM,
	//LS_GOLUMDED,
	LS_GSHRINE,
	LS_GUARD,
	//LS_GUARDLAN,
	LS_HOLYBOLT,
	//LS_HYPER,
	LS_INFRAVIS,
	//LS_INVISIBL,
	//LS_INVPOT,
	LS_LNING1,
	//LS_LTNING,
	LS_MSHIELD,
	//LS_NESTXPLD,
	LS_NOVA,
	//LS_PORTAL,
	LS_PUDDLE,
	//LS_RESUR,
	//LS_SCURSE,
	LS_SCURIMP,
	LS_SENTINEL,
	//LS_SHATTER,
	//LS_SOULFIRE,
	//LS_SPOUTLOP,
	LS_SPOUTSTR,
	//LS_STORM,
	LS_TRAPDIS,
	LS_TELEPORT,
	//LS_VTHEFT,
	LS_WALLLOOP,
	//LS_WALLSTRT,
	//LS_LMAG,
	TSFX_BMAID1,
	TSFX_BMAID2,
	TSFX_BMAID3,
	TSFX_BMAID4,
	//TSFX_BMAID5,
	TSFX_BMAID6,
	//TSFX_BMAID7,
	TSFX_BMAID8,
	//TSFX_BMAID9,
	TSFX_BMAID10,
	TSFX_BMAID11,
	TSFX_BMAID12,
	TSFX_BMAID13,
	//TSFX_BMAID14,
	//TSFX_BMAID15,
	TSFX_BMAID16,
	//TSFX_BMAID17,
	TSFX_BMAID18,
	TSFX_BMAID19,
	//TSFX_BMAID20,
	//TSFX_BMAID21,
	//TSFX_BMAID22,
	//TSFX_BMAID23,
	//TSFX_BMAID24,
	//TSFX_BMAID25,
	//TSFX_BMAID26,
	TSFX_BMAID27,
	//TSFX_BMAID28,
	//TSFX_BMAID29,
	//TSFX_BMAID30,
	TSFX_BMAID31,
	TSFX_BMAID32,
	TSFX_BMAID33,
	TSFX_BMAID34,
	TSFX_BMAID35,
	TSFX_BMAID36,
	TSFX_BMAID37,
	//TSFX_BMAID38,
	TSFX_BMAID39,
	TSFX_BMAID40,
	TSFX_SMITH1,
	TSFX_SMITH2,
	TSFX_SMITH3,
	TSFX_SMITH4,
	//TSFX_SMITH5,
	//TSFX_SMITH6,
	TSFX_SMITH7,
	//TSFX_SMITH8,
	//TSFX_SMITH9,
	TSFX_SMITH10,
	//TSFX_SMITH11,
	TSFX_SMITH12,
	TSFX_SMITH13,
	TSFX_SMITH14,
	//TSFX_SMITH15,
	//TSFX_SMITH16,
	TSFX_SMITH17,
	//TSFX_SMITH18,
	TSFX_SMITH19,
	//TSFX_SMITH20,
	TSFX_SMITH21,
	TSFX_SMITH22,
	TSFX_SMITH23,
	TSFX_SMITH24,
	TSFX_SMITH25,
	TSFX_SMITH26,
	//TSFX_SMITH27,
	//TSFX_SMITH28,
	//TSFX_SMITH29,
	//TSFX_SMITH30,
	//TSFX_SMITH31,
	//TSFX_SMITH32,
	//TSFX_SMITH33,
	//TSFX_SMITH34,
	//TSFX_SMITH35,
	//TSFX_SMITH36,
	//TSFX_SMITH37,
	//TSFX_SMITH38,
	//TSFX_SMITH39,
	//TSFX_SMITH40,
	//TSFX_SMITH41,
	//TSFX_SMITH42,
	//TSFX_SMITH43,
	TSFX_SMITH44,
	TSFX_SMITH45,
	TSFX_SMITH46,
	TSFX_SMITH47,
	TSFX_SMITH48,
	TSFX_SMITH49,
	TSFX_SMITH50,
	TSFX_SMITH51,
	TSFX_SMITH52,
	TSFX_SMITH53,
	//TSFX_SMITH54,
	TSFX_SMITH55,
	TSFX_SMITH56,
	TSFX_COW1,
	TSFX_COW2,
	//TSFX_COW3,
	//TSFX_COW4,
	//TSFX_COW5,
	//TSFX_COW6,
	//TSFX_COW7,
	//TSFX_COW8,
	//TSFX_DEADGUY,
	TSFX_DRUNK1,
	TSFX_DRUNK2,
	TSFX_DRUNK3,
	TSFX_DRUNK4,
	//TSFX_DRUNK5,
	//TSFX_DRUNK6,
	TSFX_DRUNK7,
	//TSFX_DRUNK8,
	//TSFX_DRUNK9,
	TSFX_DRUNK10,
	//TSFX_DRUNK11,
	TSFX_DRUNK12,
	TSFX_DRUNK13,
	TSFX_DRUNK14,
	TSFX_DRUNK15,
	//TSFX_DRUNK16,
	TSFX_DRUNK17,
	//TSFX_DRUNK18,
	TSFX_DRUNK19,
	TSFX_DRUNK20,
	//TSFX_DRUNK21,
	TSFX_DRUNK22,
	TSFX_DRUNK23,
	TSFX_DRUNK24,
	TSFX_DRUNK25,
	TSFX_DRUNK26,
	TSFX_DRUNK27,
	TSFX_DRUNK28,
	TSFX_DRUNK29,
	TSFX_DRUNK30,
	TSFX_DRUNK31,
	TSFX_DRUNK32,
	TSFX_DRUNK33,
	TSFX_DRUNK34,
	TSFX_DRUNK35,
	TSFX_HEALER1,
	TSFX_HEALER2,
	TSFX_HEALER3,
	//TSFX_HEALER4,
	TSFX_HEALER5,
	//TSFX_HEALER6,
	//TSFX_HEALER7,
	TSFX_HEALER8,
	//TSFX_HEALER9,
	TSFX_HEALER10,
	TSFX_HEALER11,
	TSFX_HEALER12,
	TSFX_HEALER13,
	//TSFX_HEALER14,
	//TSFX_HEALER15,
	TSFX_HEALER16,
	//TSFX_HEALER17,
	TSFX_HEALER18,
	//TSFX_HEALER19,
	TSFX_HEALER20,
	TSFX_HEALER21,
	TSFX_HEALER22,
	//TSFX_HEALER23,
	//TSFX_HEALER24,
	//TSFX_HEALER25,
	TSFX_HEALER26,
	TSFX_HEALER27,
	//TSFX_HEALER28,
	//TSFX_HEALER29,
	//TSFX_HEALER30,
	//TSFX_HEALER31,
	//TSFX_HEALER32,
	//TSFX_HEALER33,
	//TSFX_HEALER34,
	//TSFX_HEALER35,
	//TSFX_HEALER36,
	TSFX_HEALER37,
	TSFX_HEALER38,
	TSFX_HEALER39,
	TSFX_HEALER40,
	TSFX_HEALER41,
	TSFX_HEALER42,
	TSFX_HEALER43,
	//TSFX_HEALER44,
	TSFX_HEALER45,
	TSFX_HEALER46,
	TSFX_HEALER47,
	TSFX_PEGBOY1,
	TSFX_PEGBOY2,
	TSFX_PEGBOY3,
	TSFX_PEGBOY4,
	//TSFX_PEGBOY5,
	//TSFX_PEGBOY6,
	TSFX_PEGBOY7,
	//TSFX_PEGBOY8,
	//TSFX_PEGBOY9,
	TSFX_PEGBOY10,
	TSFX_PEGBOY11,
	TSFX_PEGBOY12,
	TSFX_PEGBOY13,
	TSFX_PEGBOY14,
	//TSFX_PEGBOY15,
	//TSFX_PEGBOY16,
	TSFX_PEGBOY17,
	TSFX_PEGBOY18,
	TSFX_PEGBOY19,
	//TSFX_PEGBOY20,
	//TSFX_PEGBOY21,
	//TSFX_PEGBOY22,
	//TSFX_PEGBOY23,
	//TSFX_PEGBOY24,
	//TSFX_PEGBOY25,
	//TSFX_PEGBOY26,
	//TSFX_PEGBOY27,
	//TSFX_PEGBOY28,
	//TSFX_PEGBOY29,
	//TSFX_PEGBOY30,
	//TSFX_PEGBOY31,
	TSFX_PEGBOY32,
	TSFX_PEGBOY33,
	TSFX_PEGBOY34,
	TSFX_PEGBOY35,
	TSFX_PEGBOY36,
	TSFX_PEGBOY37,
	TSFX_PEGBOY38,
	TSFX_PEGBOY39,
	TSFX_PEGBOY40,
	//TSFX_PEGBOY41,
	TSFX_PEGBOY42,
	TSFX_PEGBOY43,
	TSFX_PRIEST0,
	//TSFX_PRIEST1,
	//TSFX_PRIEST2,
	//TSFX_PRIEST3,
	//TSFX_PRIEST4,
	//TSFX_PRIEST5,
	//TSFX_PRIEST6,
	//TSFX_PRIEST7,
	//TSFX_STORY0,
	TSFX_STORY1,
	TSFX_STORY2,
	//TSFX_STORY3,
	TSFX_STORY4,
	//TSFX_STORY5,
	//TSFX_STORY6,
	TSFX_STORY7,
	//TSFX_STORY8,
	//TSFX_STORY9,
	TSFX_STORY10,
	//TSFX_STORY11,
	TSFX_STORY12,
	TSFX_STORY13,
	TSFX_STORY14,
	TSFX_STORY15,
	//TSFX_STORY16,
	//TSFX_STORY17,
	TSFX_STORY18,
	//TSFX_STORY19,
	TSFX_STORY20,
	TSFX_STORY21,
	//TSFX_STORY22,
	//TSFX_STORY23,
	//TSFX_STORY24,
	TSFX_STORY25,
	TSFX_STORY26,
	TSFX_STORY27,
	TSFX_STORY28,
	TSFX_STORY29,
	TSFX_STORY30,
	TSFX_STORY31,
	//TSFX_STORY32,
	TSFX_STORY33,
	TSFX_STORY34,
	TSFX_STORY35,
	TSFX_STORY36,
	TSFX_STORY37,
	TSFX_STORY38,
	TSFX_TAVERN0,
	TSFX_TAVERN1,
	TSFX_TAVERN2,
	//TSFX_TAVERN3,
	//TSFX_TAVERN4,
	TSFX_TAVERN5,
	//TSFX_TAVERN6,
	//TSFX_TAVERN7,
	TSFX_TAVERN8,
	//TSFX_TAVERN9,
	TSFX_TAVERN10,
	TSFX_TAVERN11,
	TSFX_TAVERN12,
	TSFX_TAVERN13,
	//TSFX_TAVERN14,
	//TSFX_TAVERN15,
	TSFX_TAVERN16,
	//TSFX_TAVERN17,
	TSFX_TAVERN18,
	TSFX_TAVERN19,
	//TSFX_TAVERN20,
	TSFX_TAVERN21,
	TSFX_TAVERN22,
	TSFX_TAVERN23,
	TSFX_TAVERN24,
	TSFX_TAVERN25,
	//TSFX_TAVERN26,
	//TSFX_TAVERN27,
	//TSFX_TAVERN28,
	//TSFX_TAVERN29,
	//TSFX_TAVERN30,
	//TSFX_TAVERN31,
	//TSFX_TAVERN32,
	//TSFX_TAVERN33,
	//TSFX_TAVERN34,
	//TSFX_TAVERN35,
	TSFX_TAVERN36,
	TSFX_TAVERN37,
	TSFX_TAVERN38,
	TSFX_TAVERN39,
	TSFX_TAVERN40,
	TSFX_TAVERN41,
	//TSFX_TAVERN42,
	TSFX_TAVERN43,
	TSFX_TAVERN44,
	TSFX_TAVERN45,
	TSFX_WITCH1,
	TSFX_WITCH2,
	TSFX_WITCH3,
	TSFX_WITCH4,
	//TSFX_WITCH5,
	//TSFX_WITCH6,
	TSFX_WITCH7,
	//TSFX_WITCH8,
	//TSFX_WITCH9,
	TSFX_WITCH10,
	//TSFX_WITCH11,
	TSFX_WITCH12,
	TSFX_WITCH13,
	TSFX_WITCH14,
	TSFX_WITCH15,
	//TSFX_WITCH16,
	//TSFX_WITCH17,
	TSFX_WITCH18,
	//TSFX_WITCH19,
	TSFX_WITCH20,
	//TSFX_WITCH21,
	TSFX_WITCH22,
	TSFX_WITCH23,
	TSFX_WITCH24,
	TSFX_WITCH25,
	TSFX_WITCH26,
	//TSFX_WITCH27,
	//TSFX_WITCH28,
	//TSFX_WITCH29,
	//TSFX_WITCH30,
	//TSFX_WITCH31,
	//TSFX_WITCH32,
	//TSFX_WITCH33,
	//TSFX_WITCH34,
	//TSFX_WITCH35,
	//TSFX_WITCH36,
	//TSFX_WITCH37,
	TSFX_WITCH38,
	TSFX_WITCH39,
	TSFX_WITCH40,
	TSFX_WITCH41,
	TSFX_WITCH42,
	TSFX_WITCH43,
	TSFX_WITCH44,
	TSFX_WITCH45,
	TSFX_WITCH46,
	TSFX_WITCH47,
	//TSFX_WITCH48,
	TSFX_WITCH49,
	TSFX_WITCH50,
	TSFX_WOUND,
	PS_MAGE1,
	//PS_MAGE2,
	//PS_MAGE3,
	//PS_MAGE4,
	//PS_MAGE5,
	//PS_MAGE6,
	//PS_MAGE7,
	PS_MAGE8,
	PS_MAGE9,
	PS_MAGE10,
	PS_MAGE11,
	PS_MAGE12,
	PS_MAGE13,
	PS_MAGE14,
	PS_MAGE15,
	PS_MAGE16,
	//PS_MAGE17,
	//PS_MAGE18,
	//PS_MAGE19,
	//PS_MAGE20,
	//PS_MAGE21,
	//PS_MAGE22,
	//PS_MAGE23,
	PS_MAGE24,
	//PS_MAGE25,
	//PS_MAGE26,
	PS_MAGE27,
	//PS_MAGE28,
	PS_MAGE29,
	//PS_MAGE30,
	//PS_MAGE31,
	//PS_MAGE32,
	//PS_MAGE33,
	PS_MAGE34,
	PS_MAGE35,
	//PS_MAGE36,
	//PS_MAGE37,
	//PS_MAGE38,
	//PS_MAGE39,
	//PS_MAGE40,
	//PS_MAGE41,
	//PS_MAGE42,
	//PS_MAGE43,
	//PS_MAGE44,
	//PS_MAGE45,
	PS_MAGE46,
	//PS_MAGE47,
	//PS_MAGE48,
	PS_MAGE49,
	PS_MAGE50,
	//PS_MAGE51,
	PS_MAGE52,
	//PS_MAGE53,
	PS_MAGE54,
	PS_MAGE55,
	PS_MAGE56,
	//PS_MAGE57,
	//PS_MAGE58,
	//PS_MAGE59,
	//PS_MAGE60,
	PS_MAGE61,
	PS_MAGE62,
	//PS_MAGE63,
	//PS_MAGE64,
	//PS_MAGE65,
	//PS_MAGE66,
	//PS_MAGE67,
	PS_MAGE68,
	PS_MAGE69,
	PS_MAGE69B,
	PS_MAGE70,
	PS_MAGE71,
	PS_MAGE72,
	//PS_MAGE73,
	//PS_MAGE74,
	//PS_MAGE75,
	//PS_MAGE76,
	//PS_MAGE77,
	//PS_MAGE78,
	PS_MAGE79,
	PS_MAGE80,
	//PS_MAGE81,
	PS_MAGE82,
	PS_MAGE83,
	//PS_MAGE84,
	//PS_MAGE85,
	//PS_MAGE86,
	PS_MAGE87,
	PS_MAGE88,
	PS_MAGE89,
	//PS_MAGE90,
	PS_MAGE91,
	PS_MAGE92,
	//PS_MAGE93,
	PS_MAGE94,
	PS_MAGE95,
	PS_MAGE96,
	PS_MAGE97,
	PS_MAGE98,
	PS_MAGE99,
	//PS_MAGE100,
	//PS_MAGE101,
	//PS_MAGE102,
	PS_ROGUE1,
	//PS_ROGUE2,
	//PS_ROGUE3,
	//PS_ROGUE4,
	//PS_ROGUE5,
	//PS_ROGUE6,
	//PS_ROGUE7,
	PS_ROGUE8,
	PS_ROGUE9,
	PS_ROGUE10,
	PS_ROGUE11,
	PS_ROGUE12,
	PS_ROGUE13,
	PS_ROGUE14,
	PS_ROGUE15,
	PS_ROGUE16,
	//PS_ROGUE17,
	//PS_ROGUE18,
	//PS_ROGUE19,
	//PS_ROGUE20,
	//PS_ROGUE21,
	//PS_ROGUE22,
	//PS_ROGUE23,
	PS_ROGUE24,
	//PS_ROGUE25,
	//PS_ROGUE26,
	PS_ROGUE27,
	//PS_ROGUE28,
	PS_ROGUE29,
	//PS_ROGUE30,
	//PS_ROGUE31,
	//PS_ROGUE32,
	//PS_ROGUE33,
	PS_ROGUE34,
	PS_ROGUE35,
	//PS_ROGUE36,
	//PS_ROGUE37,
	//PS_ROGUE38,
	//PS_ROGUE39,
	//PS_ROGUE40,
	//PS_ROGUE41,
	//PS_ROGUE42,
	//PS_ROGUE43,
	//PS_ROGUE44,
	//PS_ROGUE45,
	PS_ROGUE46,
	//PS_ROGUE47,
	//PS_ROGUE48,
	PS_ROGUE49,
	PS_ROGUE50,
	//PS_ROGUE51,
	PS_ROGUE52,
	//PS_ROGUE53,
	PS_ROGUE54,
	PS_ROGUE55,
	PS_ROGUE56,
	//PS_ROGUE57,
	//PS_ROGUE58,
	//PS_ROGUE59,
	//PS_ROGUE60,
	PS_ROGUE61,
	PS_ROGUE62,
	//PS_ROGUE63,
	//PS_ROGUE64,
	//PS_ROGUE65,
	//PS_ROGUE66,
	//PS_ROGUE67,
	PS_ROGUE68,
	PS_ROGUE69,
	PS_ROGUE69B,
	PS_ROGUE70,
	PS_ROGUE71,
	PS_ROGUE72,
	//PS_ROGUE73,
	//PS_ROGUE74,
	//PS_ROGUE75,
	//PS_ROGUE76,
	//PS_ROGUE77,
	//PS_ROGUE78,
	PS_ROGUE79,
	PS_ROGUE80,
	//PS_ROGUE81,
	PS_ROGUE82,
	PS_ROGUE83,
	//PS_ROGUE84,
	//PS_ROGUE85,
	//PS_ROGUE86,
	PS_ROGUE87,
	PS_ROGUE88,
	PS_ROGUE89,
	//PS_ROGUE90,
	PS_ROGUE91,
	PS_ROGUE92,
	//PS_ROGUE93,
	PS_ROGUE94,
	PS_ROGUE95,
	PS_ROGUE96,
	PS_ROGUE97,
	PS_ROGUE98,
	PS_ROGUE99,
	//PS_ROGUE100,
	//PS_ROGUE101,
	//PS_ROGUE102,
	PS_WARR1,
	//PS_WARR2,
	//PS_WARR3,
	//PS_WARR4,
	//PS_WARR5,
	//PS_WARR6,
	//PS_WARR7,
	PS_WARR8,
	PS_WARR9,
	PS_WARR10,
	PS_WARR11,
	PS_WARR12,
	PS_WARR13,
	PS_WARR14,
	PS_WARR14B,
	PS_WARR14C,
	PS_WARR15,
	//PS_WARR15B,
	//PS_WARR15C,
	//PS_WARR16,
	//PS_WARR16B,
	//PS_WARR16C,
	//PS_WARR17,
	//PS_WARR18,
	//PS_WARR19,
	//PS_WARR20,
	//PS_WARR21,
	//PS_WARR22,
	//PS_WARR23,
	PS_WARR24,
	//PS_WARR25,
	//PS_WARR26,
	PS_WARR27,
	//PS_WARR28,
	PS_WARR29,
	//PS_WARR30,
	//PS_WARR31,
	//PS_WARR32,
	//PS_WARR33,
	PS_WARR34,
	PS_WARR35,
	//PS_WARR36,
	//PS_WARR37,
	//PS_WARR38,
	//PS_WARR39,
	//PS_WARR40,
	//PS_WARR41,
	//PS_WARR42,
	//PS_WARR43,
	//PS_WARR44,
	//PS_WARR45,
	PS_WARR46,
	//PS_WARR47,
	//PS_WARR48,
	PS_WARR49,
	PS_WARR50,
	//PS_WARR51,
	PS_WARR52,
	//PS_WARR53,
	PS_WARR54,
	PS_WARR55,
	PS_WARR56,
	//PS_WARR57,
	//PS_WARR58,
	//PS_WARR59,
	//PS_WARR60,
	PS_WARR61,
	PS_WARR62,
	//PS_WARR63,
	//PS_WARR64,
	//PS_WARR65,
	//PS_WARR66,
	//PS_WARR67,
	PS_WARR68,
	PS_WARR69,
	PS_WARR69B,
	PS_WARR70,
	PS_WARR71,
	PS_WARR72,
	//PS_WARR73,
	//PS_WARR74,
	//PS_WARR75,
	//PS_WARR76,
	//PS_WARR77,
	//PS_WARR78,
	PS_WARR79,
	PS_WARR80,
	//PS_WARR81,
	PS_WARR82,
	PS_WARR83,
	//PS_WARR84,
	//PS_WARR85,
	//PS_WARR86,
	PS_WARR87,
	PS_WARR88,
	PS_WARR89,
	//PS_WARR90,
	PS_WARR91,
	PS_WARR92,
	//PS_WARR93,
	PS_WARR94,
	PS_WARR95,
	//PS_WARR95B,
	//PS_WARR95C,
	//PS_WARR95D,
	//PS_WARR95E,
	//PS_WARR95F,
	PS_WARR96B,
	PS_WARR97,
	PS_WARR98,
	PS_WARR99,
	//PS_WARR100,
	//PS_WARR101,
	//PS_WARR102,
	PS_MONK1,
	//PS_MONK2,
	//PS_MONK3,
	//PS_MONK4,
	//PS_MONK5,
	//PS_MONK6,
	//PS_MONK7,
	PS_MONK8,
	PS_MONK9,
	PS_MONK10,
	PS_MONK11,
	PS_MONK12,
	PS_MONK13,
	PS_MONK14,
	PS_MONK15,
	PS_MONK16,
	//PS_MONK17,
	//PS_MONK18,
	//PS_MONK19,
	//PS_MONK20,
	//PS_MONK21,
	//PS_MONK22,
	//PS_MONK23,
	PS_MONK24,
	//PS_MONK25,
	//PS_MONK26,
	PS_MONK27,
	//PS_MONK28,
	PS_MONK29,
	//PS_MONK30,
	//PS_MONK31,
	//PS_MONK32,
	//PS_MONK33,
	PS_MONK34,
	PS_MONK35,
	//PS_MONK36,
	//PS_MONK37,
	//PS_MONK38,
	//PS_MONK39,
	//PS_MONK40,
	//PS_MONK41,
	//PS_MONK42,
	//PS_MONK43,
	//PS_MONK44,
	//PS_MONK45,
	PS_MONK46,
	//PS_MONK47,
	//PS_MONK48,
	PS_MONK49,
	PS_MONK50,
	//PS_MONK51,
	PS_MONK52,
	//PS_MONK53,
	PS_MONK54,
	PS_MONK55,
	PS_MONK56,
	//PS_MONK57,
	//PS_MONK58,
	//PS_MONK59,
	//PS_MONK60,
	PS_MONK61,
	PS_MONK62,
	//PS_MONK63,
	//PS_MONK64,
	//PS_MONK65,
	//PS_MONK66,
	//PS_MONK67,
	PS_MONK68,
	PS_MONK69,
	PS_MONK69B,
	PS_MONK70,
	PS_MONK71,
	//PS_MONK72,
	//PS_MONK73,
	//PS_MONK74,
	//PS_MONK75,
	//PS_MONK76,
	//PS_MONK77,
	//PS_MONK78,
	PS_MONK79,
	PS_MONK80,
	//PS_MONK81,
	PS_MONK82,
	PS_MONK83,
	//PS_MONK84,
	//PS_MONK85,
	//PS_MONK86,
	PS_MONK87,
	PS_MONK88,
	PS_MONK89,
	//PS_MONK90,
	PS_MONK91,
	PS_MONK92,
	//PS_MONK93,
	PS_MONK94,
	PS_MONK95,
	PS_MONK96,
	PS_MONK97,
	PS_MONK98,
	PS_MONK99,
	//PS_MONK100,
	//PS_MONK101,
	//PS_MONK102,
	PS_NAR1,
	PS_NAR2,
	PS_NAR3,
	PS_NAR4,
	PS_NAR5,
	PS_NAR6,
	PS_NAR7,
	PS_NAR8,
	PS_NAR9,
	PS_DIABLVLINT,
	USFX_CLEAVER,
	USFX_GARBUD1,
	USFX_GARBUD2,
	USFX_GARBUD3,
	USFX_GARBUD4,
	//USFX_IZUAL1,
	USFX_LACH1,
	USFX_LACH2,
	USFX_LACH3,
	USFX_LAZ1,
	USFX_LAZ2,
	USFX_SKING1,
	USFX_SNOT1,
	USFX_SNOT2,
	USFX_SNOT3,
	USFX_WARLRD1,
	USFX_WLOCK1,
	USFX_ZHAR1,
	USFX_ZHAR2,
	USFX_DIABLOD,
	TSFX_FARMER1,
	TSFX_FARMER2,
	TSFX_FARMER2A,
	TSFX_FARMER3,
	TSFX_FARMER4,
	TSFX_FARMER5,
	TSFX_FARMER6,
	TSFX_FARMER7,
	TSFX_FARMER8,
	TSFX_FARMER9,
	TSFX_TEDDYBR1,
	TSFX_TEDDYBR2,
	TSFX_TEDDYBR3,
	TSFX_TEDDYBR4,
	//USFX_DEFILER1,
	//USFX_DEFILER2,
	//USFX_DEFILER3,
	//USFX_DEFILER4,
	USFX_DEFILER8,
	USFX_DEFILER6,
	USFX_DEFILER7,
	//USFX_NAKRUL1,
	//USFX_NAKRUL2,
	//USFX_NAKRUL3,
	USFX_NAKRUL4,
	USFX_NAKRUL5,
	USFX_NAKRUL6,
	//PS_NARATR3,
	TSFX_COWSUT1,
	TSFX_COWSUT2,
	TSFX_COWSUT3,
	TSFX_COWSUT4,
	TSFX_COWSUT4A,
	TSFX_COWSUT5,
	TSFX_COWSUT6,
	TSFX_COWSUT7,
	TSFX_COWSUT8,
	TSFX_COWSUT9,
	TSFX_COWSUT10,
	TSFX_COWSUT11,
	TSFX_COWSUT12,
	//USFX_SKLJRN1,
	PS_NARATR6,
	PS_NARATR7,
	PS_NARATR8,
	PS_NARATR5,
	PS_NARATR9,
	PS_NARATR4,
	//TSFX_TRADER1,
	NUM_SFXS,
	SFX_NONE = -1,
} _sfx_id;

typedef enum sfx_flag {
	sfx_STREAM   = 0x01,
	sfx_MISC     = 0x02,
	sfx_UI       = 0x04,
	sfx_MONK     = 0x08,
	sfx_ROGUE    = 0x10,
	sfx_WARRIOR  = 0x20,
	sfx_SORCERER = 0x40,
	sfx_HELLFIRE = 0x80,
} sfx_flag;

typedef enum sfx_set {
	SFXS_MASK,
	SFXS_PLR_01,
	SFXS_PLR_08,
	SFXS_PLR_09,
	SFXS_PLR_10,
	SFXS_PLR_11,
	SFXS_PLR_12,
	SFXS_PLR_13,
	SFXS_PLR_14,
	//SFXS_PLR_16,
	SFXS_PLR_24,
	SFXS_PLR_27,
	SFXS_PLR_29,
	SFXS_PLR_34,
	SFXS_PLR_35,
	SFXS_PLR_46,
	SFXS_PLR_54,
	SFXS_PLR_55,
	SFXS_PLR_56,
	SFXS_PLR_61,
	SFXS_PLR_62,
	SFXS_PLR_68,
	SFXS_PLR_69,
	SFXS_PLR_70,
	SFXS_PLR_71,
	SFXS_PLR_72,
	SFXS_PLR_79,
	SFXS_PLR_80,
	SFXS_PLR_82,
	SFXS_PLR_83,
	SFXS_PLR_87,
	SFXS_PLR_88,
	SFXS_PLR_89,
	SFXS_PLR_91,
	SFXS_PLR_92,
	SFXS_PLR_94,
	SFXS_PLR_95,
	SFXS_PLR_96,
	SFXS_PLR_97,
	SFXS_PLR_98,
	SFXS_PLR_99,
	NUM_SFXSets,
} sfx_set;

typedef enum missile_id {
	MIS_ARROW,
	MIS_PBARROW,
	MIS_ASARROW,
	MIS_MLARROW,
	MIS_PCARROW,
	MIS_FIREBOLT,
	MIS_FIREBALL,
	MIS_HBOLT,
	MIS_FLARE,
	MIS_SNOWWICH,
	MIS_HLSPWN,
	MIS_SOLBRNR,
	MIS_MAGMABALL,
	MIS_ACID,
	MIS_ACIDPUD,
	MIS_EXACIDP,
	MIS_EXFIRE,
	MIS_EXFBALL,
	MIS_EXLGHT,
	MIS_EXMAGIC,
	MIS_EXACID,
	MIS_EXHOLY,
	MIS_EXFLARE,
	MIS_EXSNOWWICH,
	MIS_EXHLSPWN,
	MIS_EXSOLBRNR,
	MIS_POISON,
	MIS_WIND,
	MIS_LIGHTBALL,
	MIS_LIGHTNINGC,
	MIS_LIGHTNING,
	MIS_LIGHTNINGC2,
	MIS_LIGHTNING2,
	MIS_BLOODBOILC,
	MIS_BLOODBOIL,
	MIS_TOWN,
	MIS_RPORTAL,
	MIS_FLASH,
	MIS_FLASH2,
	MIS_CHAIN,
	//MIS_BLODSTAR,	// TODO: Check beta
	//MIS_BONE,		// TODO: Check beta
	//MIS_METLHIT,	// TODO: Check beta
	MIS_RHINO,
	MIS_CHARGE,
	MIS_TELEPORT,
	MIS_RNDTELEPORT,
	//MIS_FARROW,
	//MIS_DOOMSERP,
	MIS_STONE,
	MIS_SHROUD,
	//MIS_INVISIBL,
	MIS_GUARDIAN,
	MIS_GOLEM,
	//MIS_ETHEREALIZE,
	MIS_BLEED,
	//MIS_EXAPOCA,
	MIS_FIREWALLC,
	MIS_FIREWALL,
	MIS_FIREWAVEC,
	MIS_FIREWAVE,
	MIS_METEOR,
	MIS_LIGHTNOVAC,
	//MIS_APOCAC,
	MIS_HEAL,
	MIS_HEALOTHER,
	MIS_RESURRECT,
	MIS_ATTRACT,
	MIS_TELEKINESIS,
	//MIS_LARROW,
	MIS_OPITEM,
	MIS_REPAIR,
	MIS_DISARM,
	MIS_INFERNOC,
	MIS_INFERNO,
	//MIS_FIRETRAP,
	MIS_BARRELEX,
	//MIS_FIREMAN,	// TODO: Check beta
	//MIS_KRULL,		// TODO: Check beta
	MIS_CBOLTC,
	MIS_CBOLT,
	MIS_ELEMENTAL,
	//MIS_BONESPIRIT,
	MIS_APOCAC2,
	MIS_EXAPOCA2,
	MIS_MANASHIELD,
	MIS_INFRA,
	MIS_RAGE,
#ifdef HELLFIRE
	//MIS_LIGHTWALLC,
	//MIS_LIGHTWALL,
	//MIS_FIRENOVAC,
	//MIS_FIREBALL2,
	//MIS_REFLECT,
	MIS_FIRERING,
	//MIS_MANATRAP,
	//MIS_LIGHTRING,
	MIS_RUNEFIRE,
	MIS_RUNELIGHT,
	MIS_RUNENOVA,
	MIS_RUNEWAVE,
	MIS_RUNESTONE,
	MIS_FIREEXP,
	MIS_HORKDMN,
	MIS_PSYCHORB,
	MIS_LICH,
	MIS_BONEDEMON,
	MIS_ARCHLICH,
	MIS_NECROMORB,
	MIS_EXPSYCHORB,
	MIS_EXLICH,
	MIS_EXBONEDEMON,
	MIS_EXARCHLICH,
	MIS_EXNECROMORB,
#endif
	NUM_MISTYPES
} missile_id;

typedef enum missile_source_type {
	MST_MONSTER, // monster
	MST_OBJECT,  // trap or object
	MST_RUNE,    // rune of a player
	MST_PLAYER   = 1 << 7,  // player
	MST_NA = 0,  // does not matter
} missile_source_type;

typedef enum missile_telekinesis_type {
	MTT_ITEM,
	MTT_MONSTER,
	MTT_OBJECT,
} missile_telekinesis_type;

typedef enum missile_gfx_id {
	MFILE_ARROWS,
	MFILE_FIREBA,
	MFILE_GUARD,
	MFILE_LGHNING,
	MFILE_FIREWAL,
	MFILE_MAGBLOS,
	MFILE_PORTAL,
	MFILE_BLUEXFR,
	MFILE_BLUEXBK,
	//MFILE_MANASHLD,
	//MFILE_BONE,
	//MFILE_METLHIT,
	MFILE_FARROW,
	MFILE_LARROW,
	MFILE_MARROW,
	MFILE_PARROW,
	MFILE_MAGICEXP,
	MFILE_GREENEXP,
	//MFILE_DOOM,
	//MFILE_DOOMEXP,
	MFILE_BLODBURS,
	//MFILE_NEWEXP,
	MFILE_SHATTER1,
	MFILE_BIGEXP,
	MFILE_WIND,
	MFILE_SHROUD,
	MFILE_INFERNO,
	MFILE_THINLGHT,
	MFILE_FLARE,
	MFILE_FLAREEXP,
	MFILE_MAGBALL,
	//MFILE_KRULL,
	MFILE_MINILTNG,
	MFILE_HOLY,
	MFILE_HOLYEXPL,
	//MFILE_FIRARWEX,
	MFILE_ACIDBF,
	MFILE_ACIDSPLA,
	MFILE_ACIDPUD,
	//MFILE_ETHRSHLD,
	MFILE_FIRERUN,
	MFILE_RESSUR1,
	//MFILE_SKLBALL,
	MFILE_RPORTAL,
	MFILE_FIREPLAR,
	MFILE_SCUBMISB,
	MFILE_SCBSEXPB,
	MFILE_SCUBMISC,
	MFILE_SCBSEXPC,
	MFILE_SCUBMISD,
	MFILE_SCBSEXPD,
#ifdef HELLFIRE
	MFILE_SPAWNS,
	MFILE_RGLOWS1,
	//MFILE_REFLECT,
	//MFILE_MS_BLA,
	//MFILE_MS_BLB,
	MFILE_MS_ORA,
	MFILE_MS_ORA_A,
	MFILE_MS_ORA_B,
	MFILE_MS_REB_B,
	MFILE_MS_YEB_A,
	//MFILE_EXBL2,
	//MFILE_EXBL3,
	//MFILE_EXRED3,
	//MFILE_EXYEL2,
	MFILE_EXYEL2_A,
	MFILE_EXYEL2_B,
	MFILE_EXORA1,
	MFILE_EXORA1_A,
	MFILE_EXORA1_B,
#endif
	NUM_MFILE,
	MFILE_NONE = NUM_MFILE,
} missile_gfx_id;

typedef enum missile_flags {
	MIF_AREA    = 1 << 0, // alternative hit chance calculation
	MIF_NOBLOCK = 1 << 1, // can not be blocked
	MIF_DOT     = 1 << 2, // IPL_GETHIT modifier is ignored, hit check multiple times
	MIF_LEAD    = 1 << 3, // leads the monster to the player (on impact)
	MIF_SHROUD  = 1 << 4, // interacts with MIS_SHROUD
	MIF_ARROW   = 1 << 7, // alternative hit chance/damage calculation (for physical arrows)
} missile_flags;

typedef enum missile_anim_flags {
	MAFLAG_HIDDEN         = 1 << 0,
	MAFLAG_LOCK_ANIMATION = 1 << 1,
} missile_anim_flags;

typedef enum missile_add_result {
	MIRES_DONE,
	MIRES_DELETE,
	MIRES_FAIL_DELETE,
} missile_add_result;

typedef enum missile_collision_mode {
	MICM_NONE,
	MICM_BLOCK_ANY,
	MICM_BLOCK_WALL,
} missile_collision_mode;

typedef enum _monster_ai {
	AI_ZOMBIE,
	AI_FAT,
	AI_SKELSD,
	AI_SKELBOW,
	AI_SCAV,
	AI_RHINO,
	AI_ROUND,
	AI_RANGED,
	AI_FALLEN,
	AI_ROUNDRANGED,
	AI_SKELKING,
	AI_BAT,
	AI_GARG,
	AI_CLEAVER,
	AI_SNEAK,
	//AI_FIREMAN,
	AI_GARBUD,
	AI_GOLUM,
	AI_ZHAR,
	AI_SNOTSPIL,
	AI_SNAKE,
	AI_COUNSLR,
	AI_ROUNDRANGED2,
	AI_LAZARUS,
	AI_LAZHELP,
	AI_LACHDAN,
	AI_WARLORD,
#ifdef HELLFIRE
	AI_HORKDMN,
#endif
} _monster_ai;

typedef enum _monster_class {
	MC_UNDEAD,
	MC_DEMON,
	MC_ANIMAL,
} _monster_class;

typedef enum _monster_id {
	MT_NZOMBIE,
	MT_BZOMBIE,
	MT_GZOMBIE,
	MT_YZOMBIE,
	MT_RFALLSP,
	MT_DFALLSP,
	MT_YFALLSP,
	MT_BFALLSP,
	MT_WSKELAX,
	MT_TSKELAX,
	MT_RSKELAX,
	MT_XSKELAX,
	MT_RFALLSD,
	MT_DFALLSD,
	MT_YFALLSD,
	MT_BFALLSD,
	MT_NSCAV,
	MT_BSCAV,
	MT_WSCAV,
	MT_YSCAV,
	MT_WSKELBW,
	MT_TSKELBW,
	MT_RSKELBW,
	MT_XSKELBW,
	MT_WSKELSD,
	MT_TSKELSD,
	MT_RSKELSD,
	MT_XSKELSD,
	//MT_INVILORD,
	MT_NSNEAK,
	MT_RSNEAK,
	MT_BSNEAK,
	MT_YSNEAK,
	MT_NGOATMC,
	MT_BGOATMC,
	MT_RGOATMC,
	MT_GGOATMC,
	MT_RBAT,
	MT_NBAT,
	MT_GBAT,
	MT_XBAT,
	MT_NGOATBW,
	MT_BGOATBW,
	MT_RGOATBW,
	MT_GGOATBW,
	MT_NACID,
	MT_RACID,
	MT_BACID,
	MT_XACID,
	MT_SKING,
	MT_CLEAVER,
	MT_NFAT,
	MT_BFAT,
	MT_XFAT,
	MT_RFAT,
//	MT_WYRM,
//	MT_CAVSLUG,
//	MT_DVLWYRM,
//	MT_DEVOUR,
	MT_NMAGMA,
	MT_YMAGMA,
	MT_BMAGMA,
	MT_WMAGMA,
	MT_NRHINO,
	MT_XRHINO,
	MT_BRHINO,
	MT_DRHINO,
	//MT_BONEDMN,
	//MT_REDDTH,
	//MT_LTCHDMN,
	//MT_UDEDBLRG,
	//MT_INCIN,
	//MT_FLAMLRD,
	//MT_DOOMFIRE,
	//MT_HELLBURN,
	MT_RTHIN,
	MT_NTHIN,
	MT_XTHIN,
	MT_GTHIN,
	MT_NGARG,
	MT_XGARG,
	MT_DGARG,
	MT_BGARG,
	MT_NMEGA,
	MT_DMEGA,
	MT_BMEGA,
	MT_RMEGA,
	MT_NSNAKE,
	MT_RSNAKE,
	MT_BSNAKE,
	MT_GSNAKE,
	MT_NBLACK,
	MT_RBLACK,
	MT_BBLACK,
	MT_GBLACK,
	//MT_UNRAV,
	//MT_HOLOWONE,
	//MT_PAINMSTR,
	//MT_REALWEAV,
	MT_NSUCC,
	MT_GSUCC,
	MT_RSUCC,
	MT_BSUCC,
	MT_NMAGE,
	MT_GMAGE,
	MT_XMAGE,
	MT_BMAGE,
	MT_GOLEM,
	MT_DIABLO,
	//MT_DARKMAGE,
#ifdef HELLFIRE
	MT_HELLBOAR,
	MT_STINGER,
	MT_PSYCHORB,
	MT_ARACHNON,
	MT_FELLTWIN,
	MT_UNRAV,
	MT_HORKSPWN,
	MT_VENMTAIL,
	MT_NECRMORB,
	MT_SPIDLORD,
	MT_LASHWORM,
	MT_TORCHANT,
	MT_HORKDMN,
	MT_DEFILER,
	MT_LRDSAYTR,
	MT_GRAVEDIG,
	MT_BIGFALL,
	MT_TOMBRAT,
	MT_FIREBAT,
	MT_SKLWING,
	MT_LICH,
	MT_CRYPTDMN,
	MT_HELLBAT,
	MT_BONEDEMN,
	MT_ARCHLICH,
	MT_BICLOPS,
	MT_FLESTHNG,
	MT_REAPER,
	MT_NAKRUL,
#endif
	NUM_MTYPES, /// BUGFIX the count is off by one (fixed)
	MT_INVALID = 0xFF
} _monster_id;

typedef enum _monster_gfx_id {
	MOFILE_ZOMBIE,
	MOFILE_FALLSP,
	MOFILE_SKELAX,
	MOFILE_FALLSD,
	MOFILE_SCAV,
	MOFILE_SKELBW,
	MOFILE_SKELSD,
//	MOFILE_TSNEAK
	MOFILE_SNEAK,
	MOFILE_GOATMC,
	MOFILE_BAT,
	MOFILE_GOATBW,
	MOFILE_ACID,
	MOFILE_SKING,
	MOFILE_CLEAVER,
	MOFILE_FAT,
//	MOFILE_WORM,
	MOFILE_MAGMA,
	MOFILE_RHINO,
//	MOFILE_FIREMAN,
	MOFILE_THIN,
	MOFILE_GARGOYLE,
	MOFILE_MEGA,
	MOFILE_SNAKE,
	MOFILE_BLACK,
	MOFILE_SUCC,
	MOFILE_MAGE,
	MOFILE_GOLEM,
	MOFILE_DIABLO,
//MOFILE_DARKMAGE,
#ifdef HELLFIRE
	MOFILE_FORK,
	MOFILE_SCORP,
	MOFILE_EYE,
	MOFILE_SPIDER,
	MOFILE_TSNEAK,
	MOFILE_UNRAV,
	MOFILE_SPAWN,
	MOFILE_WSCORP,
	MOFILE_EYE2,
	MOFILE_BSPIDR,
	MOFILE_CLASP,
	MOFILE_ANTWORM,
	MOFILE_HORKD,
	MOFILE_HELLBUG,
	MOFILE_GOATLORD,
	MOFILE_GRAVDG,
	MOFILE_BIGFALL,
	MOFILE_RAT,
	MOFILE_HELLBAT,
	MOFILE_LICH,
	MOFILE_BUBBA,
	MOFILE_HELLBAT2,
	MOFILE_DEMSKEL,
	MOFILE_LICH2,
	MOFILE_BYCLPS,
	MOFILE_FLESH,
	MOFILE_REAPER,
	MOFILE_NKR,
#endif
	NUM_MOFILE
} _monster_gfx_id;

// this enum contains indexes from UniqMonst array for special unique monsters (usually quest related)
typedef enum _uniq_monsterid {
	UMT_GARBUD,
	UMT_SKELKING,
	UMT_ZHAR,
	UMT_SNOTSPIL,
	UMT_LAZARUS,
	UMT_RED_VEX,
	UMT_BLACKJADE,
	UMT_LACHDAN,
	UMT_WARLORD,
	UMT_BUTCHER,
	UMT_DIABLO,
#ifdef HELLFIRE
	UMT_HORKDMN,
	UMT_DEFILER,
	UMT_NAKRUL,
	UMT_STEELMACE = 46,
	UMT_BARON     = 49,
#else
	UMT_STEELMACE = 43,
	UMT_BARON     = 46,
#endif
} _uniq_monsterid;

typedef enum _monster_flag {
	MFLAG_HIDDEN          = 0x0001,
	MFLAG_REV_ANIMATION   = 0x0002,
	MFLAG_LOCK_ANIMATION  = 0x0004,
	MFLAG_GARG_STONE      = 0x0008,
	// MFLAG_KNOCKBACK       = 0x0010,
	MFLAG_LIFESTEAL       = 0x0020,
	MFLAG_CAN_OPEN_DOOR   = 0x0040,
	MFLAG_SEARCH          = 0x0080,
	MFLAG_TARGETS_MONSTER = 0x0100,
	MFLAG_NOSTONE         = 0x0200,
	MFLAG_NOCORPSE        = 0x0400,
	MFLAG_CAN_BLEED       = 0x0800,
	// MFLAG_NO_ENEMY        = 0x0800,
	// MFLAG_NOHEAL          = 0x1000,
	MFLAG_KNOCKBACK       = 0x00010000,
	// TODO: ensure the high word does not conflict and matches with ISPL_HITFLAGS
} _monster_flag;

typedef enum _monster_treasure {
	NO_DROP = 0x4000,
	UQ_DROP = 0x8000,
} _monster_treasure;

typedef enum _uniq_monster_flag {
	UMF_GROUP   = 1 << 0,
	UMF_LEADER  = 1 << 1,
	UMF_NODROP  = 1 << 2,
	UMF_GANG = UMF_GROUP | UMF_LEADER
} _uniq_monster_flag;

typedef enum _monster_goal {
	MGOAL_NORMAL,
	MGOAL_RETREAT,
	MGOAL_HEALING,
	MGOAL_MOVE,
	MGOAL_ATTACK2,
	MGOAL_TALKING,
} _monster_goal;

typedef enum _monster_leaderflag {
	MLEADER_NONE,
	MLEADER_PRESENT,
	MLEADER_AWAY,
	MLEADER_SELF,
} _monster_leaderflag;

typedef enum _monster_resistance_type {
	MORT_NONE,
	MORT_PROTECTED,
	MORT_RESIST,
	MORT_IMMUNE,
} _monster_resistance_type;

typedef enum _monster_resistance_idx {
	MORS_IDX_SLASH     = 0,
	MORS_IDX_BLUNT     = 2,
	MORS_IDX_PUNCTURE  = 4,
	MORS_IDX_FIRE      = 6,
	MORS_IDX_LIGHTNING = 8,
	MORS_IDX_MAGIC     = 10,
	MORS_IDX_ACID      = 12,
} _monster_resistance_idx;

typedef enum _monster_resistance {
	MORS_SLASH_PROTECTED     = 0x01 << MORS_IDX_SLASH,
	MORS_SLASH_RESIST        = 0x02 << MORS_IDX_SLASH,
	MORS_SLASH_IMMUNE        = 0x03 << MORS_IDX_SLASH,
	MORS_BLUNT_PROTECTED     = 0x01 << MORS_IDX_BLUNT,
	MORS_BLUNT_RESIST        = 0x02 << MORS_IDX_BLUNT,
	MORS_BLUNT_IMMUNE        = 0x03 << MORS_IDX_BLUNT,
	MORS_PUNCTURE_PROTECTED  = 0x01 << MORS_IDX_PUNCTURE,
	MORS_PUNCTURE_RESIST     = 0x02 << MORS_IDX_PUNCTURE,
	MORS_PUNCTURE_IMMUNE     = 0x03 << MORS_IDX_PUNCTURE,
	MORS_FIRE_PROTECTED      = 0x01 << MORS_IDX_FIRE,
	MORS_FIRE_RESIST         = 0x02 << MORS_IDX_FIRE,
	MORS_FIRE_IMMUNE         = 0x03 << MORS_IDX_FIRE,
	MORS_LIGHTNING_PROTECTED = 0x01 << MORS_IDX_LIGHTNING,
	MORS_LIGHTNING_RESIST    = 0x02 << MORS_IDX_LIGHTNING,
	MORS_LIGHTNING_IMMUNE    = 0x03 << MORS_IDX_LIGHTNING,
	MORS_MAGIC_PROTECTED     = 0x01 << MORS_IDX_MAGIC,
	MORS_MAGIC_RESIST        = 0x02 << MORS_IDX_MAGIC,
	MORS_MAGIC_IMMUNE        = 0x03 << MORS_IDX_MAGIC,
	MORS_ACID_PROTECTED      = 0x01 << MORS_IDX_ACID,
	MORS_ACID_RESIST         = 0x02 << MORS_IDX_ACID,
	MORS_ACID_IMMUNE         = 0x03 << MORS_IDX_ACID,
} _monster_resistance;

typedef enum missile_resistance {
	MISR_NONE,
	MISR_SLASH,
	MISR_BLUNT,
	MISR_PUNCTURE,
	MISR_FIRE,
	MISR_LIGHTNING,
	MISR_MAGIC,
	MISR_ACID,
} missile_resistance;

typedef enum _speech_id {
	TEXT_KING1,
	TEXT_KING2,
	TEXT_KING3,
	TEXT_KING4,
	TEXT_KING5,
	TEXT_KING6,
	TEXT_KING7,
	TEXT_KING8,
	TEXT_KING9,
	TEXT_KING10,
	TEXT_BANNER1,
	TEXT_BANNER2,
	TEXT_BANNER3,
	TEXT_BANNER4,
	TEXT_BANNER5,
	TEXT_BANNER6,
	TEXT_BANNER7,
	TEXT_BANNER8,
	TEXT_BANNER9,
	TEXT_BANNER10,
	TEXT_BANNER11,
	TEXT_BANNER12,
	TEXT_VILE1,
	TEXT_VILE2,
	TEXT_VILE3,
	TEXT_VILE4,
	//TEXT_VILE5,
	//TEXT_VILE6,
	TEXT_VILE7,
	TEXT_VILE8,
	TEXT_VILE9,
	TEXT_VILE10,
	TEXT_VILE11,
	TEXT_VILE12,
	TEXT_VILE13,
	//TEXT_VILE14,
	TEXT_POISON1,
	TEXT_POISON2,
	TEXT_POISON3,
	TEXT_POISON4,
	TEXT_POISON5,
	TEXT_POISON6,
	TEXT_POISON7,
	TEXT_POISON8,
	TEXT_POISON9,
	TEXT_POISON10,
	TEXT_BONE1,
	TEXT_BONE2,
	TEXT_BONE3,
	TEXT_BONE4,
	TEXT_BONE5,
	TEXT_BONE6,
	TEXT_BONE7,
	TEXT_BONE8,
	TEXT_BUTCH1,
	TEXT_BUTCH2,
	TEXT_BUTCH3,
	TEXT_BUTCH4,
	TEXT_BUTCH5,
	TEXT_BUTCH6,
	TEXT_BUTCH7,
	TEXT_BUTCH8,
	TEXT_BUTCH9,
	//TEXT_BUTCH10,
	TEXT_BLIND1,
	TEXT_BLIND2,
	TEXT_BLIND3,
	TEXT_BLIND4,
	TEXT_BLIND5,
	TEXT_BLIND6,
	TEXT_BLIND7,
	TEXT_BLIND8,
	TEXT_VEIL1,
	TEXT_VEIL2,
	TEXT_VEIL3,
	TEXT_VEIL4,
	TEXT_VEIL5,
	TEXT_VEIL6,
	TEXT_VEIL7,
	TEXT_VEIL8,
	TEXT_VEIL9,
	TEXT_VEIL10,
	TEXT_VEIL11,
	TEXT_ANVIL1,
	TEXT_ANVIL2,
	TEXT_ANVIL3,
	TEXT_ANVIL4,
	TEXT_ANVIL5,
	TEXT_ANVIL6,
	TEXT_ANVIL7,
	TEXT_ANVIL8,
	TEXT_ANVIL9,
	TEXT_ANVIL10,
	TEXT_BLOOD1,
	TEXT_BLOOD2,
	TEXT_BLOOD3,
	TEXT_BLOOD4,
	TEXT_BLOOD5,
	TEXT_BLOOD6,
	TEXT_BLOOD7,
	TEXT_BLOOD8,
	TEXT_WARLRD1,
	TEXT_WARLRD2,
	TEXT_WARLRD3,
	TEXT_WARLRD4,
	TEXT_WARLRD5,
	TEXT_WARLRD6,
	TEXT_WARLRD7,
	TEXT_WARLRD8,
	TEXT_WARLRD9,
	TEXT_INFRA1,
	TEXT_INFRA2,
	TEXT_INFRA3,
	TEXT_INFRA4,
	TEXT_INFRA5,
	TEXT_INFRA6,
	TEXT_INFRA7,
	TEXT_INFRA8,
	TEXT_INFRA9,
	TEXT_INFRA10,
	TEXT_MUSH1,
	TEXT_MUSH2,
	TEXT_MUSH3,
	TEXT_MUSH4,
	TEXT_MUSH5,
	TEXT_MUSH6,
	TEXT_MUSH7,
	TEXT_MUSH8,
	TEXT_MUSH9,
	TEXT_MUSH10,
	TEXT_MUSH11,
	TEXT_MUSH12,
	TEXT_MUSH13,
	//TEXT_DOOM1,
	//TEXT_DOOM2,
	//TEXT_DOOM3,
	//TEXT_DOOM4,
	//TEXT_DOOM5,
	//TEXT_DOOM6,
	//TEXT_DOOM7,
	//TEXT_DOOM8,
	//TEXT_DOOM9,
	//TEXT_DOOM10,
	TEXT_GARBUD1,
	TEXT_GARBUD2,
	TEXT_GARBUD3,
	TEXT_GARBUD4,
	TEXT_ZHAR1,
	TEXT_ZHAR2,
	TEXT_STORY1,
	TEXT_STORY2,
	TEXT_STORY3,
	TEXT_STORY4,
	TEXT_STORY5,
	TEXT_STORY6,
	TEXT_STORY7,
	TEXT_STORY9,
	TEXT_STORY10,
	TEXT_STORY11,
	TEXT_TAVERN1,
	TEXT_TAVERN2,
	TEXT_TAVERN3,
	TEXT_TAVERN4,
	TEXT_TAVERN5,
	TEXT_TAVERN6,
	TEXT_TAVERN8,
	TEXT_TAVERN9,
	TEXT_TAVERN10,
	TEXT_HEALER1,
	TEXT_HEALER2,
	TEXT_HEALER3,
	TEXT_HEALER4,
	TEXT_HEALER5,
	TEXT_HEALER6,
	TEXT_HEALER7,
	TEXT_HEALER9,
	TEXT_HEALER10,
	TEXT_HEALER11,
	TEXT_BARMAID1,
	TEXT_BARMAID2,
	TEXT_BARMAID3,
	TEXT_BARMAID4,
	TEXT_BARMAID5,
	TEXT_BARMAID6,
	TEXT_BARMAID7,
	TEXT_BARMAID9,
	TEXT_BARMAID10,
	TEXT_SMITH1,
	TEXT_SMITH2,
	TEXT_SMITH3,
	TEXT_SMITH4,
	TEXT_SMITH5,
	TEXT_SMITH6,
	TEXT_SMITH7,
	TEXT_SMITH8,
	TEXT_SMITH9,
	TEXT_SMITH10,
	TEXT_SMITH12,
	TEXT_SMITH13,
	TEXT_DRUNK1,
	TEXT_DRUNK2,
	TEXT_DRUNK3,
	TEXT_DRUNK4,
	TEXT_DRUNK5,
	TEXT_DRUNK6,
	TEXT_DRUNK8,
	TEXT_DRUNK9,
	TEXT_DRUNK10,
	TEXT_DRUNK11,
	TEXT_DRUNK12,
	TEXT_DRUNK13,
	TEXT_WITCH1,
	TEXT_WITCH2,
	TEXT_WITCH3,
	TEXT_WITCH4,
	TEXT_WITCH5,
	TEXT_WITCH6,
	TEXT_WITCH7,
	TEXT_WITCH8,
	TEXT_WITCH9,
	TEXT_WITCH10,
	TEXT_WITCH12,
	TEXT_WITCH13,
	TEXT_PEGBOY1,
	TEXT_PEGBOY2,
	TEXT_PEGBOY3,
	TEXT_PEGBOY4,
	TEXT_PEGBOY5,
	TEXT_PEGBOY6,
	TEXT_PEGBOY7,
	TEXT_PEGBOY8,
	TEXT_PEGBOY9,
	TEXT_PEGBOY11,
	TEXT_PEGBOY12,
	TEXT_PRIEST1,
	TEXT_BONER,
	TEXT_BLOODY,
	TEXT_BLINDING,
	TEXT_BLOODWAR,
	TEXT_COW1,
	TEXT_COW2,
	TEXT_BOOK11,
	TEXT_BOOK12,
	TEXT_BOOK13,
	TEXT_BOOK21,
	TEXT_BOOK22,
	TEXT_BOOK23,
	TEXT_BOOK31,
	TEXT_BOOK32,
	TEXT_BOOK33,
	TEXT_INTRO,
	TEXT_IM_MUSHROOM,
	TEXT_IM_ANVIL,
	TEXT_IM_GLDNELIX,
	TEXT_IM_ROCK,
	TEXT_IM_ARMOFVAL,
	TEXT_IM_FANG,
	TEXT_IM_FULLNOTE,
	TEXT_IM_FUNGALTM,
	TEXT_QM_BUTCHER,
	TEXT_QM_GARBUD,
	TEXT_QM_SKING,
	TEXT_QM_ZHAR,
	TEXT_QM_LAZARUS,
	TEXT_QM_WARLORD,
	TEXT_DM_CATHEDRAL,
	TEXT_DM_CATACOMBS,
	TEXT_DM_CAVES,
	TEXT_DM_HELL,
	TEXT_DM_DIABLO,
	TEXT_DM_SKING,
#ifdef HELLFIRE
	TEXT_DM_NEST,
	TEXT_DM_CRYPT,
	//TEXT_DEFILER4,
	//TEXT_DEFILER5,
	TEXT_DM_DEFILER,
	//TEXT_GRAVE1,
	//TEXT_GRAVE2,
	//TEXT_GRAVE3,
	//TEXT_GRAVE4,
	//TEXT_GRAVE5,
	//TEXT_GRAVE6,
	//TEXT_GRAVE7,
	TEXT_GRAVE8,
	//TEXT_GRAVE9,
	//TEXT_GRAVE10,
	TEXT_FARMER1,
	TEXT_FARMER2,
	TEXT_FARMER3,
	TEXT_FARMER4,
	TEXT_FARMER5,
	TEXT_GIRL1,
	TEXT_GIRL2,
	TEXT_GIRL3,
	TEXT_GIRL4,
	//TEXT_NAKRUL1,
	//TEXT_NAKRUL2,
	//TEXT_NAKRUL3,
	//TEXT_NAKRUL4,
	//TEXT_NAKRUL5,
	//TEXT_CORNSTN,
	TEXT_JERSEY1,
	TEXT_JERSEY2,
	TEXT_JERSEY3,
	TEXT_JERSEY4,
	TEXT_JERSEY5,
	TEXT_JERSEY6,
	TEXT_JERSEY7,
	TEXT_JERSEY8,
	TEXT_JERSEY9,
	//TEXT_TRADER,
	TEXT_FARMER6,
	TEXT_FARMER7,
	TEXT_FARMER8,
	TEXT_FARMER9,
	TEXT_FARMER10,
	TEXT_JERSEY10,
	TEXT_JERSEY11,
	TEXT_JERSEY12,
	TEXT_JERSEY13,
	//TEXT_SKLJRN,
	TEXT_BOOK4,
	TEXT_BOOK5,
	TEXT_BOOK6,
	TEXT_BOOK7,
	TEXT_BOOK8,
	TEXT_BOOK9,
	TEXT_BOOKA,
	TEXT_BOOKB,
	TEXT_BOOKC,
/*
	TEXT_DEADGUY,
	TEXT_DRUNK14,
	TEXT_DRUNK15,
	TEXT_DRUNK16,
	TEXT_DRUNK17,
	TEXT_DRUNK18,
	TEXT_DRUNK19,
	TEXT_DRUNK20,
	TEXT_DRUNK21,
	TEXT_DRUNK22,
	TEXT_BARMAID11,
	TEXT_BARMAID12,
	TEXT_BARMAID13,
	TEXT_BARMAID14,
	TEXT_BARMAID15,
	TEXT_BARMAID16,
	TEXT_BARMAID17,
    TEXT_BARMAID18,
    TEXT_BARMAID19,
    TEXT_BARMAID20,
    TEXT_BARMAID21,
    TEXT_BARMAID22,
    TEXT_BARMAID23,
    TEXT_BARMAID24,
    TEXT_BARMAID25,
	TEXT_BARMAID26,
	TEXT_HEALER12,
	TEXT_HEALER13,
	TEXT_HEALER14,
	TEXT_HEALER15,
	TEXT_HEALER16,
	TEXT_HEALER17,
	TEXT_HEALER18,
	TEXT_HEALER19,
	TEXT_HEALER20,
	TEXT_HEALER21,
	TEXT_HEALER22,
	TEXT_HEALER23,
	TEXT_HEALER24,
	TEXT_HEALER25,
	TEXT_HEALER26,
	TEXT_HEALER27,
	TEXT_HEALER28,
	TEXT_HEALER29,
	TEXT_HEALER30,
	TEXT_SMITH14,
	TEXT_SMITH15,
	TEXT_SMITH16,
	TEXT_SMITH17,
	TEXT_SMITH18,
	TEXT_SMITH19,
	TEXT_SMITH20,
	TEXT_SMITH21,
	TEXT_SMITH22,
	TEXT_SMITH23,
	TEXT_SMITH24,
	TEXT_SMITH25,
	TEXT_SMITH26,
	TEXT_SMITH27,
	TEXT_SMITH28,
	TEXT_SMITH29,
	TEXT_SMITH30,
	TEXT_SMITH31,
	TEXT_SMITH32,
	TEXT_SMITH33,
	TEXT_SMITH34,
	TEXT_SMITH35,
	TEXT_SMITH36,
	TEXT_SMITH37,
	TEXT_SMITH38,
	TEXT_PEGBOY13,
	TEXT_PEGBOY14,
	TEXT_PEGBOY15,
	TEXT_PEGBOY16,
	TEXT_PEGBOY17,
	TEXT_PEGBOY18,
	TEXT_PEGBOY19,
	TEXT_PEGBOY20,
	TEXT_PEGBOY21,
	TEXT_PEGBOY22,
	TEXT_PEGBOY23,
	TEXT_PEGBOY24,
	TEXT_PEGBOY25,
	TEXT_PEGBOY26,
	TEXT_PEGBOY27,
	TEXT_PEGBOY28,
	TEXT_PEGBOY29,
	TEXT_PEGBOY30,
	TEXT_PRIEST1,
	TEXT_PRIEST2,
	TEXT_PRIEST3,
	TEXT_PRIEST4,
	TEXT_PRIEST5,
	TEXT_PRIEST6,
	TEXT_PRIEST7,
	TEXT_STORY12,
	TEXT_STORY13,
	TEXT_STORY14,
	TEXT_STORY15,
	TEXT_STORY16,
	TEXT_STORY17,
	TEXT_STORY18,
	TEXT_STORY19,
	TEXT_STORY20,
	TEXT_STORY21,
	TEXT_TAVERN11,
	TEXT_TAVERN12,
	TEXT_TAVERN13,
	TEXT_TAVERN14,
	TEXT_TAVERN15,
	TEXT_TAVERN16,
	TEXT_TAVERN17,
	TEXT_TAVERN18,
	TEXT_TAVERN19,
	TEXT_TAVERN20,
	TEXT_TAVERN21,
	TEXT_TAVERN22,
	TEXT_TAVERN23,
	TEXT_TAVERN24,
	TEXT_TAVERN25,
	TEXT_TAVERN26,
	TEXT_TAVERN27,
	TEXT_TAVERN28,
	TEXT_WITCH14,
	TEXT_WITCH15,
	TEXT_WITCH16,
	TEXT_WITCH17,
	TEXT_WITCH18,
	TEXT_WITCH19,
	TEXT_WITCH20,
	TEXT_WITCH21,
	TEXT_WITCH22,
	TEXT_WITCH23,
	TEXT_WITCH24,
	TEXT_WITCH25,
	TEXT_WITCH26,
	TEXT_WITCH27,
	TEXT_WITCH28,
	TEXT_WITCH29,
	TEXT_WITCH30,
	TEXT_WITCH31,
*/
#endif
	NUM_TEXTS,
	TEXT_NONE = -1,
} _speech_id;

typedef enum object_graphic_id {
	OFILE_L1BRAZ,
	OFILE_L1DOORS,
	OFILE_LEVER,
	OFILE_CHEST1,
	OFILE_CHEST2,
	OFILE_BANNER,
	//OFILE_SKULPILE,
	OFILE_SKULFIRE,
	//OFILE_SKULSTIK,
	OFILE_CRUXSK1,
	OFILE_CRUXSK2,
	OFILE_CRUXSK3,
	OFILE_BOOK1,
	OFILE_BOOK2,
	OFILE_ROCKSTAN,
	//OFILE_ANGEL,
	//OFILE_GHOST,
	OFILE_CHEST3,
	OFILE_BURNCROS,
	//OFILE_CANDLE,
	OFILE_CANDLE2,
	//OFILE_CANDLABR,
	//OFILE_NUDE2,
	//OFILE_SWITCH2,
	//OFILE_SWITCH3,
	OFILE_SWITCH4,
	OFILE_TNUDEM,
	OFILE_TNUDEW,
	OFILE_TSOUL,
	OFILE_L2DOORS,
	OFILE_WTORCH4,
	OFILE_WTORCH3,
	OFILE_SARC,
	//OFILE_FLAME1,
	//OFILE_FLAME3,
	//OFILE_FIREWAL1,
	//OFILE_EXPLOD1,
	//OFILE_EXPLOD2,
	//OFILE_VAPOR1,
	//OFILE_PRSRPLT1,
	OFILE_TRAPHOLE,
	//OFILE_DIRTFALL,
	//OFILE_WATER,
	//OFILE_MINIWATR,
	OFILE_WTORCH2,
	OFILE_WTORCH1,
	OFILE_BCASE,
	//OFILE_BSHELF,
	OFILE_WEAPSTND,
	//OFILE_BKURNS,
	//OFILE_WATERJUG,
	OFILE_BARREL,
	OFILE_BARRELEX,
	OFILE_LSHRINEG,
	OFILE_RSHRINEG,
	OFILE_BLOODFNT,
	OFILE_DECAP,
	OFILE_PEDISTL,
	OFILE_L3DOORS,
	OFILE_PFOUNTN,
	OFILE_ARMSTAND,
	OFILE_GOATSHRN,
	OFILE_CAULDREN,
	OFILE_MFOUNTN,
	OFILE_TFOUNTN,
	OFILE_ALTBOY,
	OFILE_MCIRL,
	OFILE_BKSLBRNT,
	OFILE_MUSHPTCH,
	OFILE_LZSTAND,
#ifdef HELLFIRE
	OFILE_L5DOOR,
	OFILE_L5SARCO,
	OFILE_URN,
	OFILE_URNEXPLD,
	OFILE_L5BOOKS,
	OFILE_L5CANDLE,
	OFILE_L5LEVER,
	OFILE_L6POD1,
	OFILE_L6POD2,
#endif
	NUM_OFILE_TYPES
} object_graphic_id;

typedef enum object_proc_func {
	OPF_NONE,
	OPF_DOOR,
	//OPF_FLTRP,
	OPF_TRAP,
	OPF_CIRCLE,
	OPF_BCROSS,
#if FLICKER_LIGHT
	OPF_LIGHT,
#endif
} object_proc_func;

typedef enum object_mode_flags { // TODO: merge with object_break_mode?
	OMF_NONE,
	OMF_ACTIVE   = 1 << 0, // interactive object
	OMF_RESERVED = 1 << 1, // inactive till it its not placed
	OMF_FLOOR    = 1 << 2, // must have a non-blocked piece to be placed
} object_mode_flags;

typedef enum object_anim_mode {
	OAM_NONE,
	OAM_SINGLE,
	OAM_LOOP,
} object_anim_mode;

typedef enum object_break_mode {
	OBM_UNBREAKABLE,
	OBM_BREAKABLE,
	OBM_BROKEN
} object_break_mode;

typedef enum object_door_type {
	ODT_NONE,
	ODT_LEFT,
	ODT_RIGHT,
} object_door_type;

typedef enum dungeon_type {
	DTYPE_TOWN,
	DTYPE_CATHEDRAL,
	DTYPE_CATACOMBS,
	DTYPE_CAVES,
	DTYPE_HELL,
	DTYPE_CRYPT,
	DTYPE_NEST,
} dungeon_type;

typedef enum dungeon_type_mask {
	DTM_TOWN      = 1 << DTYPE_TOWN,
	DTM_CATHEDRAL = 1 << DTYPE_CATHEDRAL,
	DTM_CATACOMBS = 1 << DTYPE_CATACOMBS,
	DTM_CAVES     = 1 << DTYPE_CAVES,
	DTM_HELL      = 1 << DTYPE_HELL,
	DTM_CRYPT     = 1 << DTYPE_CRYPT,
	DTM_NEST      = 1 << DTYPE_NEST,
	DTM_ANY       = 0xFF,
	DTM_NONE      = 0,
} dungeon_type_mask;

typedef enum townwarp_dest {
	TWARP_CATHEDRAL,
	TWARP_CATACOMB,
	TWARP_CAVES,
	TWARP_HELL,
#ifdef HELLFIRE
	TWARP_CRYPT,
	TWARP_NEST,
#endif
	NUM_TWARP
} townwarp_dest;

typedef enum dungeon_warp {
	DWARP_ENTRY,
	DWARP_EXIT,
	DWARP_TOWN,
	DWARP_SIDE,
	NUM_DWARP
} dungeon_warp;

typedef enum dungeon_warp_type {
	WRPT_NONE,
	WRPT_L1_UP,
	WRPT_L1_DOWN,
	WRPT_L1_SKING,
	WRPT_L1_PWATER,
	WRPT_L2_UP,
	WRPT_L2_DOWN,
	WRPT_L3_UP,
	WRPT_L3_DOWN,
	WRPT_L4_UP,
	WRPT_L4_DOWN,
	WRPT_L4_PENTA,
	WRPT_CIRCLE,
} dungeon_warp_type;

typedef enum dungeon_level {
	DLV_TOWN,
	DLV_CATHEDRAL1,
	DLV_CATHEDRAL2,
	DLV_CATHEDRAL3,
	DLV_CATHEDRAL4,
	DLV_CATACOMBS1,
	DLV_CATACOMBS2,
	DLV_CATACOMBS3,
	DLV_CATACOMBS4,
	DLV_CAVES1,
	DLV_CAVES2,
	DLV_CAVES3,
	DLV_CAVES4,
	DLV_HELL1,
	DLV_HELL2,
	DLV_HELL3,
	DLV_HELL4,
#ifdef HELLFIRE
	DLV_NEST1,
	DLV_NEST2,
	DLV_NEST3,
	DLV_NEST4,
	DLV_CRYPT1,
	DLV_CRYPT2,
	DLV_CRYPT3,
	DLV_CRYPT4,
#endif
	NUM_STDLVLS
} dungeon_level;

typedef enum _setlevels {
	//SL_BUTCHCHAMB   = NUM_STDLVLS,
	SL_SKELKING = NUM_STDLVLS,
	SL_BONECHAMB,
	//SL_MAZE,
	SL_POISONWATER,
	SL_VILEBETRAYER,
	NUM_SETLVLS = SL_VILEBETRAYER - NUM_STDLVLS + 1,
	NUM_LEVELS = NUM_STDLVLS + NUM_SETLVLS,
	DLV_INVALID = NUM_LEVELS
} _setlevels;

typedef enum _setpiece_type {
	SPT_NONE,
	SPT_BANNER,
	SPT_SKELKING,
	SPT_BUTCHER,
	SPT_BLIND,
	SPT_BLOOD,
	SPT_BCHAMB,
	SPT_ANVIL,
	SPT_BETRAYER,
	SPT_WARLORD,
	SPT_DIAB_QUAD_1,
	SPT_DIAB_QUAD_2,
	SPT_DIAB_QUAD_3,
	SPT_DIAB_QUAD_4,
#ifdef HELLFIRE
	SPT_NAKRUL,
#endif
} _setpiece_type;

typedef enum piece_flag {
	PFLAG_BLOCK_PATH       = 1 << 0,
	PFLAG_BLOCK_LIGHT      = 1 << 1,
	PFLAG_BLOCK_MISSILE    = 1 << 2,
	PFLAG_TRANSPARENT      = 1 << 3,
	PFLAG_TRANS_MASK_LEFT  = 1 << 4,
	PFLAG_TRANS_MASK_RIGHT = 1 << 5,
	// PFLAG_TRANS_MASK_NONE  = 1 << 6, - unused. masked the LEFT/RIGHT flags in vanilla.
	PFLAG_TRAP_SOURCE      = 1 << 7,
} piece_flag;

typedef enum _piece_trap_type {
	PTT_NONE,
	PTT_ANY,
	PTT_LEFT,
	PTT_RIGHT,
} _piece_trap_type;

typedef enum piece_micro_flag {
	TMIF_WALL_TRANS = 1 << 0,
	TMIF_LEFT_REDRAW = 1 << 1,
	TMIF_LEFT_FOLIAGE = 1 << 2,
	TMIF_LEFT_WALL_TRANS = 1 << 3,
	TMIF_RIGHT_REDRAW = 1 << 4,
	TMIF_RIGHT_FOLIAGE = 1 << 5,
	TMIF_RIGHT_WALL_TRANS = 1 << 6,
} piece_micro_flag;

typedef enum micro_encoding_type {
	MET_SQUARE,
	MET_TRANSPARENT,
	MET_LTRIANGLE,
	MET_RTRIANGLE,
	MET_LTRAPEZOID,
	MET_RTRAPEZOID
} micro_encoding_type;

typedef enum _draw_mask_type {
	DMT_NONE,					// SolidMask
	DMT_TWALL,					// WallMask
	DMT_LTFLOOR,				// LeftMask
	DMT_RTFLOOR,				// RightMask
	DMT_LFLOOR,					// LeftFoliageMask
	DMT_RFLOOR,					// RightFoliageMask
	DMT_FLOOR_UP_TOP_LEFT,		// UpperTopLeftFoliageMask
	DMT_FLOOR_TOP_LEFT,			// TopLeftFoliageMask
	DMT_FLOOR_LOW_BOTTOM_LEFT,	// LowerBottomLeftFoliageMask
	DMT_FLOOR_BOTTOM_LEFT,		// BottomLeftFoliageMask
	DMT_FLOOR_UP_TOP_RIGHT,		// UpperTopRightFoliageMask
	DMT_FLOOR_TOP_RIGHT,		// TopRightFoliageMask
	DMT_FLOOR_LOW_BOTTOM_RIGHT,	// LowerBottomRightFoliageMask
	DMT_FLOOR_BOTTOM_RIGHT,		// BottomRightFoliageMask
	DMT_FLOOR_TRN_UP_LEFT,		// UpperLeftMask
	DMT_FLOOR_TRN_UP_RIGHT,		// UpperRightMask
	DMT_EMPTY,
} _draw_mask_type;

typedef enum dflag {
	BFLAG_MISSILE_PRE = 0x01, // 'missile-on-floor' flag, used by DrawView to draw missiles in pre-phase
	BFLAG_ALERT       = 0x02, // alert flag, used by monsters to set squelch
	BFLAG_DEAD_PLAYER = 0x04,
	BFLAG_POPULATED   = 0x08, // protection flag used during dungeon generation
	BFLAG_HAZARD      = 0x10, // fire hazard flag, used by monsters to avoid tiles
	BFLAG_VISIBLE     = 0x40, // visibility flag, used by the local player to check if monsters/players are visible
	BFLAG_EXPLORED    = 0x80, // whether the automapview is set (not in sync after load/deltaload/shrine-effect)
} dflag;

typedef enum placeflag {
	PLACE_SCATTER = 1,
	PLACE_SPECIAL = 2,
	PLACE_UNIQUE  = 4,
} placeflag;

typedef enum dungeon_message {
	DMSG_CATHEDRAL = 1 << 0,
	DMSG_CATACOMBS = 1 << 1,
	DMSG_CAVES     = 1 << 2,
	DMSG_HELL      = 1 << 3,
	DMSG_DIABLO    = 1 << 4,
	DMSG_SKING     = 1 << 5,
} dungeon_message;

typedef enum dungeon_message2 {
	DMSG2_DEFILER  = 1 << 0,
	DMSG2_DEFILER1 = 1 << 1,
	DMSG2_DEFILER2 = 1 << 2,
} dungeon_message2;

typedef enum diablo_message {
	EMSG_NONE,
	EMSG_DESYNC,
	EMSG_LOADING,
	EMSG_SAVING,
	EMSG_SHRINE_HIDDEN,
	EMSG_SHRINE_GLOOMY,
	EMSG_SHRINE_WEIRD,
	EMSG_SHRINE_RELIGIOUS,
	EMSG_SHRINE_MAGICAL,
	EMSG_SHRINE_STONE,
	EMSG_SHRINE_CREEPY,
	EMSG_SHRINE_THAUMATURGIC,
	EMSG_SHRINE_FASCINATING,
	EMSG_SHRINE_SHIMMERING,
	EMSG_SHRINE_CRYPTIC,
	EMSG_SHRINE_ELDRITCH,
	EMSG_SHRINE_EERIE1,
	EMSG_SHRINE_EERIE2,
	EMSG_SHRINE_SPOOKY1,
	EMSG_SHRINE_SPOOKY2,
	EMSG_SHRINE_QUIET1,
	EMSG_SHRINE_QUIET2,
	EMSG_SHRINE_DIVINE,
	EMSG_SHRINE_HOLY,
	EMSG_SHRINE_SACRED,
	EMSG_SHRINE_ORNATE,
	EMSG_SHRINE_SPIRITUAL,
	EMSG_SHRINE_SECLUDED,
	EMSG_SHRINE_GLIMMERING,
	EMSG_SHRINE_TAINTED,
	EMSG_SHRINE_GLISTENING,
	EMSG_BONECHAMB,
	EMSG_SHRINE_SPARKLING,
	EMSG_SHRINE_MURPHYS,
#ifdef HELLFIRE
	EMSG_SHRINE_SOLAR,
#endif
	NUM_EMSGS
} diablo_message;

typedef enum theme_id {
	THEME_BARREL,
	THEME_SHRINE,
	THEME_MONSTPIT,
	THEME_SKELROOM,
	THEME_TREASURE,
	THEME_LIBRARY,
	THEME_TORTURE,
	THEME_BLOODFOUNTAIN,
	THEME_DECAPITATED,
	THEME_PURIFYINGFOUNTAIN,
	THEME_ARMORSTAND,
	THEME_GOATSHRINE,
	THEME_CAULDRON,
	THEME_MURKYFOUNTAIN,
	THEME_TEARFOUNTAIN,
	THEME_BRNCROSS,
	THEME_WEAPONRACK,
	NUM_THEMES,
	THEME_NONE              = 0xFF,
} theme_id;

typedef enum event_type {
	EVENT_TYPE_JOIN_ACCEPTED,
	EVENT_TYPE_PLAYER_LEAVE_GAME,
	NUM_EVT_TYPES,
} event_type;

typedef enum player_status {
	PCS_CONNECTED    = 0x01, // was 0x10000 - player sent a packet recently 
	PCS_TURN_ARRIVED = 0x02, // was 0x20000 - the next turn of the player has arrived
	PCS_ACTIVE       = 0x04, // was 0x40000 - a future turn (next or later) of the player has arrived
	PCS_JOINED       = 0x08, //             - the player just joined (sent an initial turn)
} player_status;

typedef enum turn_status {
	TS_LIVE,	// turn is not due
	TS_ACTIVE,	// turn is due and all turns arrived
	TS_TIMEOUT,	// turn is due, but not all turns arrived
	TS_DESYNC,	// turn is not necessary due, but a higher than current turn arrived
} turn_status;

typedef enum leave_reason {
	LEAVE_NONE,
	LEAVE_NORMAL,
	LEAVE_DROP,   // was 0x40000006
} leave_reason;

typedef enum text_color {
	COL_WHITE,
	COL_BLUE,
	COL_RED,
	COL_GOLD,
	COL_BLACK,
} text_color;

typedef enum item_color {
	ICOL_YELLOW = PAL16_YELLOW + 5,
	ICOL_WHITE = PAL16_GRAY + 5,
	ICOL_BLUE  = PAL16_BLUE + 5,
	ICOL_RED   = PAL16_RED + 5,
} item_color;

typedef enum _difficulty {
	DIFF_NORMAL,
	DIFF_NIGHTMARE,
	DIFF_HELL,
} _difficulty;

typedef enum _speed {
	SPEED_NORMAL  = 25,
	SPEED_FAST    = 30,
	SPEED_FASTER  = 40,
	SPEED_FASTEST = 50,
} _speed;

typedef enum MON_MODE {
	MM_STAND,
	MM_WALK, // Movement towards N, NW, NE or W
	MM_WALK2, // Movement towards S, SW, SE or E
	MM_ATTACK,
	MM_GOTHIT,
	MM_DEATH,
	MM_SPATTACK,
	MM_FADEIN,
	MM_FADEOUT,
	MM_RATTACK,
	MM_SPSTAND,
	MM_RSPATTACK,
	MM_DELAY,
	MM_CHARGE,
	MM_STONE,
	MM_HEAL,
	MM_TALK,
	MM_DEAD,     // dead monster. x/y coordinates are used to reproduce the corpse (and light)
	MM_UNUSED,   // unused slot (except for ex-monsters with light)
	MM_RESERVED, // reserved slot for minions and prespawned skeletons
	NUM_MON_MODES,
	MM_INGAME_LAST = MM_TALK
} MON_MODE;

typedef enum MON_ANIM {
	MA_STAND,
	MA_WALK,
	MA_ATTACK,
	MA_GOTHIT,
	MA_DEATH,
	MA_SPECIAL,
	NUM_MON_ANIM
} MON_ANIM;

typedef enum MON_SFX {
	MS_ATTACK,
	MS_GOTHIT,
	MS_DEATH,
	MS_SPECIAL,
	NUM_MON_SFX
} MON_SFX;

typedef enum MYPLR_DEATH_MODE {
	MDM_ALIVE,
	MDM_DYING,
	MDM_DEAD
} MYPLR_DEATH_MODE;

typedef enum PLR_MODE {
	PM_STAND,
	PM_WALK, // Movement towards N, NW, NE or W
	PM_WALK2, // Movement towards S, SW, SE or E
	PM_CHARGE,
	PM_ATTACK,
	PM_RATTACK,
	PM_BLOCK,
	PM_GOTHIT,
	PM_SPELL,
	PM_DYING, // pre-death mode which might be out of sync
	PM_DEATH, // death mode which is in sync with external players
	PM_NEWLVL,
	NUM_PLR_MODES,
	PM_INVALID = 0xFF
} PLR_MODE;

typedef enum PLR_ANIM {
	PA_STAND,
	PA_WALK,
	PA_ATTACK,
	PA_SPELL,
	PA_BLOCK,
	PA_GOTHIT,
	PA_DEATH,
	NUM_PLR_ANIMS
} PLR_ANIM;

typedef enum PLR_EAR {
	DMGTYPE_NPC,
	DMGTYPE_PLAYER,
	DMGTYPE_UNKNOWN,
} PLR_EAR;

typedef enum spell_type {
	RSPLTYPE_ABILITY,
	RSPLTYPE_SPELL,
	RSPLTYPE_SCROLL,
	RSPLTYPE_CHARGES,
	RSPLTYPE_INVALID,
#ifdef HELLFIRE
	RSPLTYPE_RUNE,
#endif
	NUM_RSPLTYPES,
	RSPLTYPE_INV = RSPLTYPE_SCROLL,
} spell_type;

typedef enum spell_from_type {
	SPLFROM_ABILITY        = -1,
	SPLFROM_MANA           = -2,
	SPLFROM_INVALID_SOURCE = -3,
	SPLFROM_INVALID_MANA   = -4,
	SPLFROM_INVALID_LEVEL  = -5,
	SPLFROM_INVALID_TYPE   = -6,
} spell_from_type;

typedef enum cursor_id {
	CURSOR_NONE,
	CURSOR_HAND,
	CURSOR_IDENTIFY,
	CURSOR_REPAIR,
	CURSOR_RECHARGE,
	CURSOR_DISARM,
	CURSOR_OIL,
	CURSOR_TELEKINESIS,
	CURSOR_RESURRECT,
	CURSOR_TELEPORT,
	CURSOR_HEALOTHER,
	CURSOR_HOURGLASS,
	CURSOR_FIRSTITEM,
} cursor_id;

typedef enum direction {
	DIR_S,
	DIR_SW,
	DIR_W,
	DIR_NW,
	DIR_N,
	DIR_NE,
	DIR_E,
	DIR_SE,
	NUM_DIRS,
	DIR_NONE = NUM_DIRS,
} direction;

typedef enum _scroll_direction {
	SDIR_NONE,
	SDIR_N,
	SDIR_NE,
	SDIR_E,
	SDIR_SE,
	SDIR_S,
	SDIR_SW,
	SDIR_W,
	SDIR_NW,
} _scroll_direction;

typedef enum _path_direction {
	PDIR_N,
	PDIR_W,
	PDIR_E,
	PDIR_S,
	PDIR_NW,
	PDIR_NE,
	PDIR_SE,
	PDIR_SW
} _path_direction;

typedef enum lvl_entry {
	ENTRY_MAIN,
	ENTRY_PREV,
	ENTRY_SETLVL,
	ENTRY_RTNLVL,
	ENTRY_LOAD,
	ENTRY_WARPLVL,
	ENTRY_TWARPDN,
	ENTRY_TWARPUP,
	ENTRY_RETOWN,
} lvl_entry;

/*typedef enum game_info {
	GAMEINFO_NAME         = 1,
	GAMEINFO_PASSWORD     = 2,
	GAMEINFO_STATS        = 3,
	GAMEINFO_MODEFLAG     = 4,
	GAMEINFO_GAMETEMPLATE = 5,
	GAMEINFO_PLAYERS      = 6,
} game_info;*/

typedef enum spell_id {
	SPL_NULL,
	SPL_WALK,
	SPL_BLOCK,
	SPL_ATTACK,
	SPL_WHIPLASH,
	SPL_WALLOP,
	SPL_SWIPE,
	SPL_RATTACK,
	SPL_POINT_BLANK,
	SPL_FAR_SHOT,
	SPL_PIERCE_SHOT,
	SPL_MULTI_SHOT,
	SPL_CHARGE,
	SPL_RAGE,
	SPL_FIREBOLT,
	SPL_CBOLT,
	SPL_HBOLT,
	SPL_LIGHTNING,
	SPL_FLASH,
	SPL_FIREWALL,
	SPL_FIREBALL,
	SPL_METEOR,
	SPL_BLOODBOIL,
	SPL_CHAIN,
	SPL_WAVE,
	SPL_NOVA,
	SPL_INFERNO,
	SPL_ELEMENTAL,
	SPL_FLARE,
	SPL_POISON,
	SPL_WIND,
	SPL_SHROUD,
	SPL_GUARDIAN,
	SPL_GOLEM,
	SPL_STONE,
	SPL_INFRA,
	SPL_MANASHIELD,
	SPL_ATTRACT,
	SPL_TELEKINESIS,
	SPL_TELEPORT,
	SPL_RNDTELEPORT,
	SPL_TOWN,
	SPL_HEAL,
	SPL_HEALOTHER,
	SPL_RESURRECT,
	SPL_IDENTIFY,
	SPL_OIL,
	SPL_REPAIR,
	SPL_RECHARGE,
	SPL_DISARM,
#ifdef HELLFIRE
	SPL_BUCKLE,
	SPL_WHITTLE,
	//SPL_LIGHTWALL,
	//SPL_IMMOLAT,
	SPL_FIRERING,
	SPL_RUNEFIRE,
	SPL_RUNELIGHT,
	SPL_RUNENOVA,
	SPL_RUNEWAVE,
	SPL_RUNESTONE,
#endif
	NUM_SPELLS,
	SPL_INVALID = NUM_SPELLS,
#ifdef HELLFIRE
	SPL_RUNE_FIRST = SPL_RUNEFIRE,
	SPL_RUNE_LAST = SPL_RUNESTONE
#endif
} spell_id;

typedef enum _msg_id {
	NMSG_SEND_GAME_DELTA,
	NMSG_PLRINFO,
	NMSG_DLEVEL_DATA,
	NMSG_DLEVEL_JUNK,
	NMSG_DLEVEL_PLR,
	NMSG_DLEVEL_END,
	NMSG_LVL_DELTA,
	NMSG_LVL_DELTA_END,
	NMSG_STRING,
	NMSG_PLRDROP, // internal use only (supposedly)
} _msg_id;

typedef enum _cmd_id {
	CMD_SYNCDATA,
	CMD_WALKXY,
	CMD_SKILLXY,
	CMD_OPOBJXY,
	CMD_DISARMXY,
	CMD_SKILLPLR,
	CMD_SKILLMON,
	CMD_BLOCK,
	CMD_TALKXY,
	CMD_MONSTDEATH,
	CMD_MONSTDAMAGE,
	CMD_MONSTCORPSE,
	CMD_MONSTSUMMON,
	CMD_AWAKEGOLEM,
	CMD_PLRDEAD,
	CMD_PLRRESURRECT,
	CMD_SETSHIELD,
	CMD_REMSHIELD,
	CMD_ADDSTR,
	CMD_ADDMAG,
	CMD_ADDDEX,
	CMD_ADDVIT,
	CMD_DECHP,
	CMD_SPLITPLRGOLD,
	CMD_PASTEPLRITEM,
	CMD_PASTEPLRBELTITEM,
	CMD_CUTPLRITEM,
	CMD_DELPLRITEM,
	CMD_USEPLRITEM,
	CMD_PUTITEM,
	CMD_SPAWNITEM,
	CMD_GETITEM,
	CMD_AUTOGETITEM,
	CMD_GOTOGETITEM,
	CMD_GOTOAGETITEM,
	CMD_OPERATEITEM,
	CMD_OPERATEOBJ,
	CMD_DOOROPEN,
	CMD_DOORCLOSE,
	CMD_TRAPDISABLE,
	CMD_TRAPOPEN,
	CMD_TRAPCLOSE,
	CMD_SHRINE,
	CMD_TELEKINXY,
	CMD_TELEKINID,
	CMD_TELEKINOID,
	CMD_ACTIVATEPORTAL,
	CMD_NEWLVL,
	CMD_TWARP,
	CMD_RETOWN,
	CMD_JOINLEVEL,
	CMD_DISCONNECT,
	CMD_INVITE,
	CMD_ACK_INVITE,
	CMD_DEC_INVITE,
	CMD_REV_INVITE,
	CMD_KICK_PLR,
	CMD_STORE_1,
	CMD_STORE_2,
	CMD_QTOWNER,
	CMD_QMONSTER,
	CMD_SYNCQUEST,
	CMD_SYNCQUESTEXT,
	CMD_BLOODPASS,
	CMD_OPENSPIL,
	CMD_OPENNAKRUL,        // HELLFIRE
	CMD_DUMP_MONSTERS,     // DEV_MODE
	CMD_REQUEST_PLRCHECK,  // DEV_MODE
	CMD_DO_PLRCHECK,       // DEV_MODE
	CMD_REQUEST_ITEMCHECK, // DEV_MODE
	CMD_DO_ITEMCHECK,      // DEV_MODE
	CMD_CHEAT_EXPERIENCE,  // DEBUG_MODE
	CMD_CHEAT_SPELL_LEVEL, // DEBUG_MODE
	CMD_DEBUG,             // DEBUG_MODE
} _cmd_id;

typedef enum _dcmd_item {
	DCMD_INVALID,
	DCMD_ITM_SPAWNED,
	DCMD_ITM_TAKEN,
	DCMD_ITM_MOVED,
	DCMD_ITM_DROPPED,
} _dcmd_item;

typedef enum _dcmd_monster {
	DCMD_MON_INVALID,
	DCMD_MON_ACTIVE,
	DCMD_MON_DEAD,
	DCMD_MON_DESTROYED,
	NUM_DCMD_MON
} _dcmd_monster;

typedef enum _msg_mode {
	MSG_NORMAL,
	MSG_GAME_DELTA_WAIT, // wait for game delta information
	MSG_GAME_DELTA_LOAD, // download game delta
	//MSG_RUN_DELTA,
	MSG_LVL_DELTA_WAIT, // wait for level delta information
	MSG_LVL_DELTA_PROC, // process turns till the timestamp of the level delta info
	MSG_LVL_DELTA_SKIP_JOIN // skip most of the JOINLEVEL message of the level-delta timestamp (level delta is supposed to contain this)
} _msg_mode;

typedef enum _talker_id {
	TOWN_SMITH,
	TOWN_HEALER,
	TOWN_TAVERN,
	TOWN_STORY,
	TOWN_DRUNK,
	TOWN_WITCH,
	TOWN_BARMAID,
	TOWN_PEGBOY,
	TOWN_PRIEST,
	TOWN_DEADGUY,
#ifdef HELLFIRE
	TOWN_FARMER,
	TOWN_COWFARM,
	TOWN_GIRL,
#endif
	TOWN_COW,
} _talker_id;

typedef enum _music_id {
	TMUSIC_TOWN,
	TMUSIC_L1,
	TMUSIC_L2,
	TMUSIC_L3,
	TMUSIC_L4,
#ifdef HELLFIRE
	TMUSIC_L5,
	TMUSIC_L6,
#endif
	TMUSIC_INTRO,
	NUM_MUSIC,
} _music_id;

enum _artFontTables {
	AFT_SMALL,
	AFT_MED,
	AFT_BIG,
	AFT_HUGE,
};

enum _artFontColors {
	AFC_SILVER,
	AFC_GOLD,
};

typedef enum _mainmenu_selections {
	MAINMENU_SINGLE_PLAYER,
	MAINMENU_MULTIPLAYER,
	MAINMENU_SETTINGS,
	MAINMENU_REPLAY_INTRO,
	MAINMENU_SHOW_CREDITS,
	MAINMENU_EXIT_DIABLO,
	NUM_MAINMENU,
} _mainmenu_selections;

typedef enum _selhero_selections {
	SELHERO_NEW_DUNGEON = 1,
	SELHERO_CONTINUE    = 2,
	SELHERO_PREVIOUS    = 3
} _selhero_selections;

typedef enum _selgame_selections {
	SELGAME_CREATE,
	SELGAME_JOIN,
	SELGAME_PREVIOUS
} _selgame_selections;

typedef enum conn_type {
	SELCONN_ZT,       // zerotier (p2p)
	SELCONN_TCP,      // tcp/ip server-client
	SELCONN_TCPD,     // tcp/ip server-client + p2p
	SELCONN_TCPS,     // tcp/ip server
	SELCONN_TCPDS,    // tcp/ip server + p2p
	SELCONN_LOOPBACK, // local
} conn_type;

typedef enum _create_hero {
	NEWHERO_DONE,
	NEWHERO_INVALID_NAME,
	NEWHERO_HERO_LIMIT,
	NEWHERO_FAIL,
} _create_hero;

typedef enum server_type {
	SRV_BASIC,
	SRV_DIRECT,
} server_type;

typedef enum panel_button_id {
	PANBTN_MAINMENU,
	PANBTN_OPTIONS,
	PANBTN_CHARINFO,
	PANBTN_INVENTORY,
	PANBTN_SPELLBOOK,
	PANBTN_QLOG,
	PANBTN_AUTOMAP,
	PANBTN_SENDMSG,
	PANBTN_TEAMBOOK,
	NUM_PANBTNS
} panel_button_id;

typedef enum attribute_id {
	ATTRIB_STR,
	ATTRIB_MAG,
	ATTRIB_DEX,
	ATTRIB_VIT,
	NUM_ATTRIBS
} attribute_id;

typedef enum _object_id {
	OBJ_L1LIGHT,
	OBJ_L1LDOOR,
	OBJ_L1RDOOR,
	OBJ_SKFIRE,
	OBJ_LEVER,
	OBJ_CHEST1,
	OBJ_CHEST2,
	OBJ_CHEST3,
	//OBJ_CANDLE1,
	OBJ_CANDLE2,
	//OBJ_CANDLEO,
	OBJ_BANNERL,
	OBJ_BANNERM,
	OBJ_BANNERR,
	//OBJ_SKPILE,
	//OBJ_SKSTICK1,
	//OBJ_SKSTICK2,
	//OBJ_SKSTICK3,
	//OBJ_SKSTICK4,
	//OBJ_SKSTICK5,
	OBJ_CRUXM,
	OBJ_CRUXR,
	OBJ_CRUXL,
	OBJ_STAND,
	//OBJ_ANGEL,
	//OBJ_NUDEW2R,
	OBJ_SWITCHSKL,
	OBJ_TNUDEM,
	OBJ_TNUDEW,
	OBJ_TORTUREL1,
	OBJ_TORTUREL2,
	OBJ_TORTUREL3,
	OBJ_TORTURER1,
	OBJ_TORTURER2,
	OBJ_TORTURER3,
	OBJ_L2LDOOR,
	OBJ_L2RDOOR,
	OBJ_TORCHL1,
	OBJ_TORCHL2,
	OBJ_TORCHR1,
	OBJ_TORCHR2,
	OBJ_SARC,
	//OBJ_FLAMEHOLE,
	//OBJ_FLAMELVR,
	//OBJ_WATER,
	OBJ_TRAPL,
	OBJ_TRAPR,
	//OBJ_BOOKSHELF,
	//OBJ_WEAPRACK,
	OBJ_BARREL,
	OBJ_BARRELEX,
	OBJ_SHRINEL,
	OBJ_SHRINER,
	OBJ_BOOKCASEL,
	OBJ_BOOKCASER,
	OBJ_BOOKCANDLE,
	OBJ_BLOODFTN,
	OBJ_DECAP,
	OBJ_TCHEST1,
	OBJ_TCHEST2,
	OBJ_TCHEST3,
	OBJ_ANCIENTTOME,
	OBJ_VILEBOOK,
	OBJ_MYTHICBOOK,
	OBJ_BOOKSTAND,
	OBJ_SKELBOOK,
	//OBJ_BOOKLVR,
	OBJ_BLINDBOOK,
	OBJ_BLOODBOOK,
	OBJ_STEELTOME,
	OBJ_PEDESTAL,
	OBJ_L3LDOOR,
	OBJ_L3RDOOR,
	OBJ_PURIFYINGFTN,
	OBJ_ARMORSTAND,
	OBJ_ARMORSTANDN,
	OBJ_GOATSHRINE,
	OBJ_CAULDRON,
	OBJ_MURKYFTN,
	OBJ_TEARFTN,
	OBJ_ALTBOY,
	OBJ_MCIRCLE1,
	OBJ_MCIRCLE2,
	OBJ_STORYBOOK,
	OBJ_STORYCANDLE,
	OBJ_TBCROSS,
	OBJ_WEAPONRACKL,
	OBJ_WEAPONRACKLN,
	OBJ_WEAPONRACKR,
	OBJ_WEAPONRACKRN,
	OBJ_MUSHPATCH,
	OBJ_LAZSTAND,
	OBJ_SLAINHERO,
	OBJ_SIGNCHEST,
	//OBJ_BOOKSHELFR,
#ifdef HELLFIRE
	OBJ_L5LDOOR,
	OBJ_L5RDOOR,
	OBJ_L5SARC,
	OBJ_URN,
	OBJ_URNEX,
	OBJ_L5CANDLE,
	OBJ_L5BOOK,
	OBJ_NAKRULBOOK,
	OBJ_NAKRULLEVER,
	OBJ_POD,
	OBJ_PODEX,
#endif
	NUM_OBJECTS
} _object_id;

typedef enum quest_id {
	Q_BUTCHER,
	Q_PWATER,
	Q_SKELKING,
	Q_BANNER,
	Q_GARBUD,
	Q_ROCK,
	Q_BLOOD,
	Q_BCHAMB,
	Q_BLIND,
	Q_ZHAR,
	Q_MUSHROOM,
	Q_ANVIL,
	Q_WARLORD,
	Q_VEIL,
	Q_BETRAYER,
	Q_DIABLO,
#ifdef HELLFIRE
	Q_JERSEY,
	Q_FARMER,
	Q_GIRL,
	Q_DEFILER,
//	Q_TRADER,
	Q_GRAVE,
	Q_NAKRUL,
	//Q_CORNSTN,
#endif
	NUM_QUESTS,
	Q_INVALID  = 0xFF,
} quest_id;

typedef enum quest_state {
	QUEST_NOTAVAIL, // did not spawn this game
	QUEST_INIT,     // has spawned, waiting to trigger
	QUEST_ACTIVE,   // currently in progress
	QUEST_DONE      // quest log closed and finished
} quest_state;

typedef enum quest_var1_state {
	QV_INIT = 0,

	QV_PWATER_TALK1 = 1, // unused
	QV_PWATER_CLEAN = 2,

	QV_BANNER_TALK1 = 1,  // talked to snotspil
	QV_BANNER_GIVEN = 2,  // banner given to ogden
	QV_BANNER_TALK2 = 3,  // banner received or talked after the banner was given to ogden -> release teammates
	QV_BANNER_ATTACK = 4, // group is ready to attack

	QV_GARBUD_TALK1 = 1,  // talked once
	QV_GARBUD_TALK2 = 2,  // talked twice
	QV_GARBUD_TALK3 = 3,  // talked three times
	QV_GARBUD_ATTACK = 4, // talked four times and is now attacking

	QV_BLOOD_BOOK = 1,   // book read
	QV_BLOOD_STONE1 = 2, // first stone placed
	QV_BLOOD_STONE2 = 3, // second stone placed
	QV_BLOOD_STONE3 = 4, // third stone placed

	QV_BCHAMB_BOOK = 1,

	QV_BLIND_BOOK = 1,

	QV_ZHAR_TALK1 = 1,
	QV_ZHAR_ATTACK = 2,

	QV_MUSHROOM_TOMESPAWNED = 1, // unused
	QV_MUSHROOM_TOMEGIVEN = 2,
	QV_MUSHROOM_MUSHSPAWNED = 3, // unused
	QV_MUSHROOM_MUSHPICKED = 4,  // unused
	QV_MUSHROOM_MUSHGIVEN = 5,
	QV_MUSHROOM_BRAINSPAWNED = 6,
	QV_MUSHROOM_BRAINGIVEN = 7,

	QV_WARLORD_BOOK = 1,
	QV_WARLORD_TALK = 2,
	QV_WARLORD_ATTACK = 3,

	QV_BETRAYER_STAFFGIVEN = 2,
	QV_BETRAYER_PORTALOPEN = 3,  // portal to the setlevel is opened
	QV_BETRAYER_CENTRALOPEN = 4, // central block on the setlevel is open
	QV_BETRAYER_TALK1 = 6,       // Lazarus talked
	QV_BETRAYER_DEAD = 7,        // Lazarus dead
	QV_BETRAYER_CAIN = 8,        // Cain talked
	// hellfire-only
	QV_JERSEY_BOMBGIVEN = 1,

	QV_FARMER_BOMBGIVEN = 1,
	QV_FARMER_BOMBUSED = 2, // with pnum added to identify the player who opened the entrance

	QV_GIRL_TALK1 = 1,

	QV_NAKRUL_BOOKA = 1,     // book A was read first
	QV_NAKRUL_BOOKB = 2,     // book B was read in the correct order
	QV_NAKRUL_BOOKC = 3,     // book C was read in the correct order
	QV_NAKRUL_BOOKOPEN = 4,  // room opened by the books
	QV_NAKRUL_LEVEROPEN = 5, // room opened by the lever - unused
	QV_NAKRUL_DEAD = 6,      // Nakrul is killed - unused
	QV_NAKRUL_DEADOPEN = 7,  // Nakrul is killed and the room was opened by the books - unused

	//QV_DIABLO 0-2: -- bookframe index for the story books
} quest_var1_state;

typedef enum quest_nakrul_book {
	QNB_BOOK_1,
	QNB_BOOK_2,
	QNB_BOOK_3,
	QNB_BOOK_4,
	QNB_BOOK_5,
	QNB_BOOK_A,
	QNB_BOOK_B,
	QNB_BOOK_C,
} quest_nakrul_book;

typedef enum talk_id {
	STORE_NONE,
	STORE_SMITH,
	STORE_SBUY,
	STORE_SSELL,
	STORE_SREPAIR,
	STORE_WITCH,
	STORE_WBUY,
	STORE_WSELL,
	STORE_WRECHARGE,
	STORE_NOMONEY,
	STORE_NOROOM,
	STORE_CONFIRM,
	STORE_PEGBOY,
	STORE_PBUY,
	STORE_HEALER,
	STORE_STORY,
	STORE_HBUY,
	STORE_SIDENTIFY,
	STORE_SPBUY,
	STORE_GOSSIP,
	STORE_IDSHOW,
	STORE_TAVERN,
	STORE_DRUNK,
	STORE_BARMAID,
	STORE_PRIEST,
	STORE_WAIT,
} talk_id;

typedef enum plr_class {
	PC_WARRIOR,
	PC_ROGUE,
	PC_SORCERER,
#ifdef HELLFIRE
	PC_MONK,
	PC_BARD,
	PC_BARBARIAN,
#endif
	NUM_CLASSES
} plr_class;

/*typedef enum _walk_path {
	WALK_NE   = 0x1,
	WALK_NW   = 0x2,
	WALK_SE   = 0x3,
	WALK_SW   = 0x4,
	WALK_N    = 0x5,
	WALK_E    = 0x6,
	WALK_S    = 0x7,
	WALK_W    = 0x8,
} _walk_path;*/

typedef enum magic_type {
	STYPE_FIRE,
	STYPE_LIGHTNING,
	STYPE_MAGIC,
	STYPE_NONE
} magic_type;

typedef enum skill_data_flags {
	SDFLAG_TARGETED = 1 << 7,
} skill_data_flags;

typedef enum player_skill_flags {
	SFLAG_ANY     = 0,
	SFLAG_DUNGEON = 1 << 0,
	SFLAG_MELEE   = 1 << 1,
	SFLAG_RANGED  = 1 << 2,
	SFLAG_BLOCK   = 1 << 3,
	SFLAG_RAGE    = 1 << 4,
} player_skill_flags;

typedef enum window_active {
	WND_INV,
	WND_CHAR,
	WND_BOOK,
	WND_TEAM,
	WND_QUEST,
	WND_BELT,
	NUM_WNDS,
	WND_NONE = 0xFF,
} window_active;

typedef enum player_graphic_idx {
	PGX_STAND,
	PGX_WALK,
	PGX_ATTACK,
	PGX_FIRE,
	PGX_LIGHTNING,
	PGX_MAGIC,
	PGX_BLOCK,
	PGX_GOTHIT,
	PGX_DEATH,
	NUM_PGXS
} player_graphic_idx;

typedef enum player_graphic_type {
	PGT_STAND_TOWN,
	PGT_STAND_DUNGEON,
	PGT_WALK_TOWN,
	PGT_WALK_DUNGEON,
	PGT_ATTACK,
	PGT_FIRE,
	PGT_LIGHTNING,
	PGT_MAGIC,
	PGT_BLOCK,
	PGT_GOTHIT,
	PGT_DEATH,
	NUM_PGTS
} player_graphic_type;

typedef enum player_graphic_flag {
	PGF_STAND_TOWN    = 1 << PGT_STAND_TOWN,
	PGF_STAND_DUNGEON = 1 << PGT_STAND_DUNGEON,
	PGF_WALK_TOWN     = 1 << PGT_WALK_TOWN,
	PGF_WALK_DUNGEON  = 1 << PGT_WALK_DUNGEON,
	PGF_ATTACK        = 1 << PGT_ATTACK,
	PGF_FIRE          = 1 << PGT_FIRE,
	PGF_LIGHTNING     = 1 << PGT_LIGHTNING,
	PGF_MAGIC         = 1 << PGT_MAGIC,
	PGF_BLOCK         = 1 << PGT_BLOCK,
	PGF_GOTHIT        = 1 << PGT_GOTHIT,
	PGF_DEATH         = 1 << PGT_DEATH,

	PGF_STAND    = PGF_STAND_TOWN | PGF_STAND_DUNGEON,
	PGF_WALK     = PGF_WALK_TOWN | PGF_WALK_DUNGEON,
	// everything except PGF_DEATH
	PGF_NONDEATH = (PGF_STAND |	PGF_WALK | PGF_ATTACK | PGF_FIRE | PGF_LIGHTNING | PGF_MAGIC | PGF_BLOCK | PGF_GOTHIT)
} player_graphic_flag;

typedef enum player_timer {
	PLTR_INFRAVISION,
	PLTR_RAGE,
	NUM_PLRTIMERS
} player_timer;

typedef enum anim_weapon_id {
	ANIM_ID_UNARMED,
	ANIM_ID_UNARMED_SHIELD,
	ANIM_ID_SWORD,
	ANIM_ID_SWORD_SHIELD,
	ANIM_ID_BOW,
	ANIM_ID_AXE,
	ANIM_ID_MACE,
	ANIM_ID_MACE_SHIELD,
	ANIM_ID_STAFF,
} anim_weapon_id;

typedef enum anim_armor_id {
	ANIM_ID_LIGHT_ARMOR  = 0x00,
	ANIM_ID_MEDIUM_ARMOR = 0x10,
	ANIM_ID_HEAVY_ARMOR  = 0x20
} anim_armor_id;

typedef enum shrine_gametype {
	SHRINETYPE_ANY,
	SHRINETYPE_SINGLE,
	SHRINETYPE_MULTI,
} shrine_gametype;

typedef enum shrine_type {
	//SHRINE_MYSTERIOUS,
	SHRINE_HIDDEN,
	SHRINE_GLOOMY,
	SHRINE_WEIRD,
	SHRINE_RELIGIOUS,
	SHRINE_MAGICAL,
	SHRINE_STONE,
	SHRINE_CREEPY,
	//SHRINE_ENCHANTED,
	SHRINE_THAUMATURGIC,
	SHRINE_FASCINATING,
	SHRINE_SHIMMERING,
	SHRINE_CRYPTIC,
	SHRINE_ELDRITCH,
	SHRINE_EERIE,
	SHRINE_SPOOKY,
	SHRINE_QUIET,
	SHRINE_DIVINE,
	SHRINE_HOLY,
	SHRINE_SACRED,
	SHRINE_ORNATE,
	SHRINE_SPIRITUAL,
	//SHRINE_ABANDONED,
	SHRINE_SECLUDED,
	SHRINE_GLIMMERING,
	SHRINE_TAINTED,
	SHRINE_GLISTENING,
	SHRINE_SPARKLING,
	SHRINE_MURPHYS,
#ifdef HELLFIRE
	//SHRINE_OILY,
	//SHRINE_GLOWING,
	//SHRINE_MENDICANT,
	SHRINE_SOLAR,
#endif
	NUM_SHRINETYPE
} shrine_type;

typedef enum action_id {
	ACTION_NONE,
	ACTION_WALK,
	ACTION_OPERATE,
	ACTION_ATTACK,
	ACTION_ATTACKMON,
	ACTION_ATTACKPLR,
	ACTION_RATTACK,
	ACTION_RATTACKMON,
	ACTION_RATTACKPLR,
	ACTION_SPELL,
	ACTION_SPELLMON,
	ACTION_SPELLPLR,
	ACTION_BLOCK,
	ACTION_PICKUPITEM,  // put item in hand (inventory screen open)
	ACTION_PICKUPAITEM, // put item in inventory
	ACTION_TALK,
} action_id;

typedef enum drlg_flag {
	// DRLG_L1_HDOOR   = 0x01,
	// DRLG_L1_VDOOR   = 0x02,
	DRLG_L1_CHAMBER = 0x02,
	DRLG_L3_LAVA    = 0x02,
	DRLG_PROTECTED  = 0x40,
	DRLG_FROZEN     = 0x80,
} drlg_flag;

typedef enum movie_flag {
	MOV_SKIP       = 1 << 0, // Makes the video skippable by mouse-button or keypress (not just ESC).
	MOV_LOOP       = 1 << 1, // Playback in loop.
} movie_flag;

typedef enum movie_playback_result {
	MPR_DONE,   // the movie is finished
	MPR_CANCEL, // the movie is cancelled
	MPR_QUIT,   // the user wants to leave the game
} movie_playback_result;

typedef enum _artfonts {
	AF_SMALL,
	AF_SMALLGRAY,
	AF_MED,
	AF_MEDGRAY,
	AF_BIG,
	AF_BIGGRAY,
	AF_HUGE,
	AF_HUGEGRAY,
} _artfonts;

typedef enum _gmenu_flags {
	GMF_SLIDER  = 1 << 0,
	GMF_ENABLED = 1 << 1,
} _gmenu_flags;

typedef enum mpq_files {
#if ASSET_MPL != 1
	MPQ_DEVILHD,
#endif
	MPQ_DEVILX,
#ifdef HELLFIRE
	MPQ_HF_OPT2,
	MPQ_HF_OPT1,
	MPQ_HF_VOICE,
	MPQ_HF_MUSIC,
	MPQ_HF_BARB,
	MPQ_HF_BARD,
	MPQ_HF_MONK,
	MPQ_HELLFIRE,
#endif
	MPQ_PATCH_RT,
	MPQ_DIABDAT,
	NUM_MPQS
} mpq_files;

typedef enum game_logic_progress {
	GLP_NONE,
	GLP_PLAYERS_DONE,
	GLP_MONSTERS_DONE,
	//GLP_TOWNERS_DONE,
	//GLP_OBJECTS_DONE,
	//GLP_MISSILES_DONE,
	//GLP_ITEMS_DONE,
} game_logic_progress; 

typedef enum redraw_flags {
	REDRAW_HP_FLASK      = 1 << 0,
	REDRAW_MANA_FLASK    = 1 << 1,
	REDRAW_SPELL_ICON    = 1 << 2,
	REDRAW_CTRL_BUTTONS  = 1 << 3,
	REDRAW_SPEED_BAR     = 1 << 4,
	REDRAW_CTRL_PANEL    = 1 << 5,
	REDRAW_ALL = REDRAW_HP_FLASK | REDRAW_MANA_FLASK | REDRAW_SPELL_ICON
               | REDRAW_CTRL_BUTTONS | REDRAW_SPEED_BAR | REDRAW_CTRL_PANEL,
} redraw_flags;

typedef enum input_key {
	ACT_NONE,
	ACT_ACT,
	ACT_ALTACT,
	ACT_SKL0,
	ACT_SKL1,
	ACT_SKL2,
	ACT_SKL3,
	ACT_SKL4,
	ACT_SKL5,
	ACT_SKL6,
	ACT_SKL7,
	ACT_INV,
	ACT_CHAR,
	ACT_SKLBOOK,
	ACT_SKLLIST,
	ACT_ITEM0,
	ACT_ITEM1,
	ACT_ITEM2,
	ACT_ITEM3,
	ACT_ITEM4,
	ACT_ITEM5,
	ACT_ITEM6,
	ACT_ITEM7,
	ACT_AUTOMAP,
	ACT_MAPZ_IN,
	ACT_MAPZ_OUT,
	ACT_CLEARUI,
	ACT_UP,
	ACT_DOWN,
	ACT_LEFT,
	ACT_RIGHT,
	ACT_PGUP,
	ACT_PGDOWN,
	ACT_RETURN,
	ACT_TEAM,
	ACT_QUESTS,
	ACT_MSG0,
	ACT_MSG1,
	ACT_MSG2,
	ACT_MSG3,
	ACT_GAMMA_DEC,
	ACT_GAMMA_INC,
	ACT_ZOOM,
	ACT_VER,
	ACT_HELP,
	ACT_PAUSE,
	ACT_ESCAPE,
	ACT_TOOLTIP,
	NUM_ACTS
} input_key;

typedef enum application_error {
	ERR_APP_FRAME_BUFSIZE,
	ERR_APP_LOOPBACK_JOIN,
	ERR_APP_LOOPBACK_SENDMSG,
	ERR_APP_LOOPBACK_QUEUE_SIZE,
	ERR_APP_LOOPBACK_POLLTURN,
	ERR_APP_LOOPBACK_LASTTURN,
	ERR_APP_LOOPBACK_DROPPLR,
	ERR_APP_LOOPBACK_TRANSIT,
	ERR_APP_PACKET_ENCRYPT,
	ERR_APP_PACKET_SETUP,
	ERR_APP_PACKET_PASSWD,
	ERR_APP_SETMAP,
} application_error;

typedef enum app_sdl_error {
	ERR_SDL_ART_COLOR,
	ERR_SDL_ART_BLIT,
	ERR_SDL_CREDIT_BLIT,
	ERR_SDL_CREDIT_PRE_SURFACE,
	ERR_SDL_CREDIT_PRE_TEXT,
	ERR_SDL_CREDIT_PRE_TEXT_COLOR,
	ERR_SDL_CREDIT_PRE_SHADOW,
	ERR_SDL_CREDIT_PRE_SHADOW_COLOR,
	ERR_SDL_UI_CURSOR_DISABLE,
	ERR_SDL_TDRAW_TEXT,
	ERR_SDL_TDRAW_SHADOW,
	ERR_SDL_DX_FLIP,
	ERR_SDL_DX_RENDER_SURFACE,
	ERR_SDL_DX_RENDER_COPY,
	ERR_SDL_FULLSCREEN_SDL1,
	ERR_SDL_FULLSCREEN_SDL2,
	ERR_SDL_PALETTE_UPDATE,
	ERR_SDL_DX_BLIT_SDL1,
	ERR_SDL_DX_BLIT_SDL2,
	ERR_SDL_DX_BLIT_SCALE,
	ERR_SDL_DX_BLIT_STRETCH,
	ERR_SDL_DX_BLIT_CONVERTED,
	ERR_SDL_DX_UPDATE_TEXTURE,
	ERR_SDL_DX_DRAW_COLOR,
	ERR_SDL_DX_RENDER_CLEAR,
	ERR_SDL_BACK_PALETTE_ALLOC,
	ERR_SDL_BACK_PALETTE_SET,
	ERR_SDL_TEXTURE_CREATE,
	ERR_SDL_SURFACE_CHECK,
	ERR_SDL_BACK_PALETTE_CREATE,
	ERR_SDL_MUSIC_FILE,
	ERR_SDL_SOUND_FILE,
	ERR_SDL_VIDEO_BLIT_SCALED,
	ERR_SDL_VIDEO_BLIT_B,
	ERR_SDL_VIDEO_BLIT_A,
	ERR_SDL_VIDEO_AUDIO,
	ERR_SDL_VIDEO_CREATE,
	ERR_SDL_VIDEO_PALETTE,
	ERR_SDL_VIDEO_SURFACE,
	ERR_SDL_AUDIO_DEVICE_SDL1,
	ERR_SDL_AUDIO_DEVICE_SDL2,
	ERR_SDL_DISPLAY_MODE_SET,
	ERR_SDL_DISPLAY_MODE_GET,
	ERR_SDL_INIT,
	ERR_SDL_WINDOW_CREATE,
	ERR_SDL_RENDERER_CREATE,
	ERR_SDL_RENDERER_TEXTURE,
	ERR_SDL_RENDERER_SCALE,
	ERR_SDL_RENDERER_SIZE,
	ERR_SDL_WINDOW_STRETCH,
	ERR_SDL_THREAD_CREATE,
	ERR_SDL_MUTEX_CREATE,
	ERR_SDL_MUTEX_LOCK,
	ERR_SDL_MUTEX_UNLOCK,
	ERR_SDL_COND_CREATE,
	ERR_SDL_EVENT_SET,
	ERR_SDL_EVENT_RESET,
	ERR_SDL_EVENT_LOCK,
	ERR_SDL_EVENT_WAIT,
	ERR_SDL_TTF_INIT,
	ERR_SDL_TTF_FONT,
} app_sdl_error;

typedef enum SDL_LogCategory {
    SDL_LOG_CATEGORY_APPLICATION,
    SDL_LOG_CATEGORY_ERROR,
    SDL_LOG_CATEGORY_ASSERT,
    SDL_LOG_CATEGORY_SYSTEM,
    SDL_LOG_CATEGORY_AUDIO,
    SDL_LOG_CATEGORY_VIDEO,
    SDL_LOG_CATEGORY_RENDER,
    SDL_LOG_CATEGORY_INPUT,
    SDL_LOG_CATEGORY_TEST,
} SDL_LogCategory;

typedef enum SDL_LogPriority
{
    SDL_LOG_PRIORITY_VERBOSE = 1,
    SDL_LOG_PRIORITY_DEBUG,
    SDL_LOG_PRIORITY_INFO,
    SDL_LOG_PRIORITY_WARN,
    SDL_LOG_PRIORITY_ERROR,
    SDL_LOG_PRIORITY_CRITICAL,
    SDL_NUM_LOG_PRIORITIES
} SDL_LogPriority;

DEVILUTION_END_NAMESPACE
